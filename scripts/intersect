#!/usr/bin/python

import sys

dest = '-a'
inverse = '-v' in sys.argv

if '-b' in sys.argv:
    dest = '-b'

exact = True
if '-f' in sys.argv:
    i = sys.argv.index('-f')
    match = float(sys.argv[i + 1])
    exact = False

header = None

def index_file(path, get_header = False):
    index = {} 
    with open(path) as f:
        line = f.readline()
        tokens = line.split()
        has_header = 'chrom' in tokens[0].lower()
        if has_header:
            if get_header:
                global header
                header = line.strip()
            line = f.readline()
        while line:
            tokens = line.split()
            s = tokens[0] + '_' + tokens[1] + '_' + tokens[2]
            index[s] = (line, tokens[0].lower().strip(), int(tokens[1]), int(tokens[2]))
            line = f.readline()
    return index

def overlap(a, b):
    return max(0, min(a[1], b[1]) - max(a[0], b[0])) / float((a[1] - a[0]))

def match_overlap(a, b, t):
    l = match * (a[t][3] - a[t][2])
    choice = (0, None if not inverse else t)
    for p in b:
        if b[p][1] != a[t][1]:
            continue
        o = overlap((a[t][2], a[t][3]), (b[p][2], b[p][3]))
        if o >= match:
            if inverse:
                return None
            else:
                if o > choice[0]:
                    choice = (o, p)
    return choice[1]

def intersect(a, b):
    i = []
    for track in a:
        if exact:
            if inverse:
                if track not in b:
                    yield a[track] if dest == '-a' else b[track]
            else:
                if track in b:
                    yield a[track] if dest == '-a' else b[track]
        else:
            p = match_overlap(a, b, track)
            if p:
                yield a[track] if dest == '-a' or inverse else b[p]
                b.pop(p, None)

def print_intersection(i):
    if header:
        print(header)
    for line in i:
        print(line[0].strip())

a_index = index_file(sys.argv[1], True)
b_index = index_file(sys.argv[2])
#i = intersect(a_index, b_index)
if header:
    print(header)
for track in intersect(a_index, b_index):
    print(track[0].strip())
#print_intersection(i)
