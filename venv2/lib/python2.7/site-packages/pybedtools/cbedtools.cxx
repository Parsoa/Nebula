/* Generated by Cython 0.24 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pybedtools__cbedtools
#define __PYX_HAVE_API__pybedtools__cbedtools
#include "string.h"
#include "stdio.h"
#include "pythread.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include "bedFile.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pybedtools/cbedtools.pyx",
  "pybedtools/stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_10pybedtools_9cbedtools_Interval;
struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator;
struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile;

/* "pybedtools/cbedtools.pxd":84
 * 
 * 
 * cdef class Interval:             # <<<<<<<<<<<<<<
 *     cdef BED *_bed
 *     cdef object _attrs
 */
struct __pyx_obj_10pybedtools_9cbedtools_Interval {
  PyObject_HEAD
  struct __pyx_vtabstruct_10pybedtools_9cbedtools_Interval *__pyx_vtab;
  BED *_bed;
  PyObject *_attrs;
};


/* "pybedtools/cbedtools.pyx":727
 * 
 * 
 * cdef class IntervalIterator:             # <<<<<<<<<<<<<<
 *     cdef object stream
 *     cdef int _itemtype
 */
struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator {
  PyObject_HEAD
  PyObject *stream;
  int _itemtype;
};


/* "pybedtools/cbedtools.pyx":791
 * 
 * 
 * cdef class IntervalFile:             # <<<<<<<<<<<<<<
 *     cdef BedFile *intervalFile_ptr
 *     cdef bint _loaded
 */
struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile {
  PyObject_HEAD
  BedFile *intervalFile_ptr;
  int _loaded;
  int _open;
  std::string _fn;
};



/* "pybedtools/cbedtools.pyx":204
 *         return self.sep.join(pairs) + self.sep
 * 
 * cdef class Interval:             # <<<<<<<<<<<<<<
 *     """
 *     Class to represent a genomic interval.
 */

struct __pyx_vtabstruct_10pybedtools_9cbedtools_Interval {
  PyObject *(*append)(struct __pyx_obj_10pybedtools_9cbedtools_Interval *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*deparse_attrs)(struct __pyx_obj_10pybedtools_9cbedtools_Interval *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10pybedtools_9cbedtools_Interval *__pyx_vtabptr_10pybedtools_9cbedtools_Interval;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectSetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* py_dict_iteritems.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_IterItems(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    ((likely((cfunc)->func)) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
             ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) : __Pyx__CallUnboundCMethod0(cfunc, self)))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* SaveResetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AndObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AndObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAnd(op1, op2) : PyNumber_And(op1, op2))
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObjectLookupSpecial.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* SwapException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CHRPOS(CHRPOS value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE CHRPOS __Pyx_PyInt_As_CHRPOS(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_10pybedtools_9cbedtools_8Interval_deparse_attrs(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_10pybedtools_9cbedtools_8Interval_append(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pybedtools.cbedtools' */
static PyTypeObject *__pyx_ptype_10pybedtools_9cbedtools_Interval = 0;
static PyTypeObject *__pyx_ptype_10pybedtools_9cbedtools_IntervalIterator = 0;
static PyTypeObject *__pyx_ptype_10pybedtools_9cbedtools_IntervalFile = 0;
static PyObject *__pyx_v_10pybedtools_9cbedtools_LOOKUPS = 0;
static PyObject *__pyx_f_10pybedtools_9cbedtools__cppstr(PyObject *); /*proto*/
static PyObject *__pyx_f_10pybedtools_9cbedtools__pystr(std::string); /*proto*/
static struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_f_10pybedtools_9cbedtools_create_interval(BED); /*proto*/
static PyObject *__pyx_f_10pybedtools_9cbedtools_isdigit(PyObject *); /*proto*/
static struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_f_10pybedtools_9cbedtools_create_interval_from_list(PyObject *, int __pyx_skip_dispatch); /*proto*/
static std::vector<std::string>  __pyx_f_10pybedtools_9cbedtools_list_to_vector(PyObject *); /*proto*/
static PyObject *__pyx_f_10pybedtools_9cbedtools_string_vec2list(std::vector<std::string> ); /*proto*/
static PyObject *__pyx_f_10pybedtools_9cbedtools_bed_vec2list(std::vector<BED> ); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pybedtools.cbedtools"
int __pyx_module_is_main_pybedtools__cbedtools = 0;

/* Implementation of 'pybedtools.cbedtools' */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_open;
static const char __pyx_k_k[] = "k";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_ID[] = "ID";
static const char __pyx_k__2[] = "";
static const char __pyx_k__3[] = ";";
static const char __pyx_k__5[] = "=";
static const char __pyx_k__7[] = "\"";
static const char __pyx_k__9[] = " ";
static const char __pyx_k_e1[] = "e1";
static const char __pyx_k_e2[] = "e2";
static const char __pyx_k_fn[] = "fn";
static const char __pyx_k_kv[] = "kv";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_s2[] = "s2";
static const char __pyx_k__12[] = ".";
static const char __pyx_k__13[] = "\t";
static const char __pyx_k__22[] = "\n";
static const char __pyx_k__25[] = "+";
static const char __pyx_k__26[] = "-";
static const char __pyx_k__27[] = "*";
static const char __pyx_k__30[] = "@";
static const char __pyx_k__31[] = "#";
static const char __pyx_k__34[] = "\r\n";
static const char __pyx_k_bed[] = "bed";
static const char __pyx_k_cmp[] = "cmp";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_gff[] = "gff";
static const char __pyx_k_kvs[] = "kvs";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_s_i[] = "%s:%i";
static const char __pyx_k_sam[] = "sam";
static const char __pyx_k_sep[] = "sep";
static const char __pyx_k_six[] = "six";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_vcf[] = "vcf";
static const char __pyx_k_Name[] = "Name";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_n_eq[] = "n_eq";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_attrs[] = "attrs";
static const char __pyx_k_chrom[] = "chrom";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_field[] = "field";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_kdict[] = "kdict";
static const char __pyx_k_ktype[] = "ktype";
static const char __pyx_k_pairs[] = "pairs";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_score[] = "score";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_track[] = "track";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Parent[] = "Parent";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_fields[] = "fields";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_n_semi[] = "n_semi";
static const char __pyx_k_quoted[] = "_quoted";
static const char __pyx_k_rstrip[] = "rstrip";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_strand[] = "strand";
static const char __pyx_k_stream[] = "stream";
static const char __pyx_k_browser[] = "browser";
static const char __pyx_k_gene_id[] = "gene_id";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_isdigit[] = "isdigit";
static const char __pyx_k_overlap[] = "overlap";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_all_hits[] = "all_hits";
static const char __pyx_k_attr_str[] = "attr_str";
static const char __pyx_k_interval[] = "interval";
static const char __pyx_k_n_quotes[] = "n_quotes";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_readline[] = "readline";
static const char __pyx_k_Exception[] = "Exception";
static const char __pyx_k_field_sep[] = "field_sep";
static const char __pyx_k_file_type[] = "file_type";
static const char __pyx_k_gene_name[] = "gene_name";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_sort_keys[] = "sort_keys";
static const char __pyx_k_Attributes[] = "Attributes";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_attr_str_2[] = "_attr_str";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_subprocess[] = "subprocess";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_defaultdict[] = "defaultdict";
static const char __pyx_k_loadIntoMap[] = "loadIntoMap";
static const char __pyx_k_otherfields[] = "otherfields";
static const char __pyx_k_same_strand[] = "same_strand";
static const char __pyx_k_intervalFile[] = "intervalFile";
static const char __pyx_k_PROFILES_TRUE[] = "PROFILES_TRUE";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_deparse_attrs[] = "deparse_attrs";
static const char __pyx_k_integer_types[] = "integer_types";
static const char __pyx_k_transcript_id[] = "transcript_id";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_Interval_s_i_i[] = "Interval(%s:%i-%i)";
static const char __pyx_k_Attributes___str[] = "Attributes.__str__";
static const char __pyx_k_advance_iterator[] = "advance_iterator";
static const char __pyx_k_malformed_line_s[] = "malformed line: %s";
static const char __pyx_k_Attributes___init[] = "Attributes.__init__";
static const char __pyx_k_BedToolsFileError[] = "BedToolsFileError";
static const char __pyx_k_Error_opening_file[] = "Error opening file";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_pybedtools_cbedtools[] = "pybedtools.cbedtools";
static const char __pyx_k_richcmp___locals_cmp[] = "__richcmp__.<locals>.cmp";
static const char __pyx_k_MalformedBedLineError[] = "MalformedBedLineError";
static const char __pyx_k_field_index_out_of_range[] = "field index out of range";
static const char __pyx_k_Start_is_greater_than_stop[] = "Start is greater than stop";
static const char __pyx_k_Class_to_map_between_a_dict_of[] = "\n    Class to map between a dict of attrs and fields[8] of a GFF Interval obj.\n    ";
static const char __pyx_k_Create_an_Interval_object_from[] = "\n    Create an Interval object from a list of strings.\n\n    Constructor::\n\n        create_interval_from_list(fields)\n\n    Given the list of strings, `fields`, automatically detects the format (BED,\n    GFF, VCF, SAM) and creates a new Interval object.\n\n    `fields` is a list with an arbitrary number of items (it can be quite long,\n    say after a -wao intersection of a BED12 and a GFF), however, the first\n    fields must conform to one of the supported formats.  For example, if you\n    want the resulting Interval to be considered a GFF feature, then the first\n    9 fields must conform to the GFF format.  Similarly, if you want the\n    resulting Interval to be considered a BED feature, then the first three\n    fields must be chrom, start, stop.\n\n    Example usage:\n\n        >>> # Creates a BED3 feature\n        >>> feature = create_interval_from_list(['chr1', '1', '100'])\n\n    ";
static const char __pyx_k_IntervalFile_all_hits_line_884[] = "IntervalFile.all_hits (line 884)";
static const char __pyx_k_IntervalFile_any_hits_line_930[] = "IntervalFile.any_hits (line 930)";
static const char __pyx_k_Unable_to_detect_format_from_s[] = "Unable to detect format from %s";
static const char __pyx_k_IntervalFile_objects_do_not_yet[] = "IntervalFile objects do not yet natively support SAM. Please convert to BED/GFF/VCF first if you want to use the low-level API of IntervalFile";
static const char __pyx_k_Interval_attrs_was_not_None_but[] = "Interval.attrs was not None, but this was a non-GFF Interval";
static const char __pyx_k_Signature_IntervalFile_all_hits[] = "\n        :Signature: `IntervalFile.all_hits(interval, same_strand=False, overlap=0.0)`\n\n        Search for the Interval `interval` this file and return **all**\n        overlaps as a list.\n\n        `same_strand`, if True, will only consider hits on the same strand as `interval`.\n\n        `overlap` can be used to specify the fraction of overlap between\n        `interval` and each feature in the IntervalFile.\n\n        Example usage:\n\n        >>> fn = pybedtools.example_filename('a.bed')\n\n        >>> # create an Interval to query with\n        >>> i = pybedtools.Interval('chr1', 1, 10000, strand='+')\n\n        >>> # Create an IntervalFile out of a.bed\n        >>> intervalfile = pybedtools.IntervalFile(fn)\n\n        >>> # get stranded hits\n        >>> intervalfile.all_hits(i, same_strand=True)\n        [Interval(chr1:1-100), Interval(chr1:100-200), Interval(chr1:900-950)]\n\n        ";
static const char __pyx_k_Signature_IntervalFile_any_hits[] = "\n        :Signature: `IntervalFile.any_hits(interval, same_strand=False, overlap=0.0)`\n\n        Return 1 if the Interval `interval` had >=1 hit in this IntervalFile, 0 otherwise.\n\n        `same_strand`, if True, will only consider hits on the same strand as `interval`.\n\n        `overlap` can be used to specify the fraction of overlap between\n        `interval` and each feature in the IntervalFile.\n\n        Example usage:\n\n        >>> fn = pybedtools.example_filename('a.bed')\n\n        >>> # create an Interval to query with\n        >>> i = pybedtools.Interval('chr1', 1, 10000, strand='+')\n\n        >>> # Create an IntervalFile out of a.bed\n        >>> intervalfile = pybedtools.IntervalFile(fn)\n\n        >>> # any stranded hits?\n        >>> intervalfile.any_hits(i, same_strand=True)\n        1\n\n        ";
static const char __pyx_k_Signature_IntervalFile_count_hi[] = "\n        :Signature: `IntervalFile.count_hits(interval, same_strand=False, overlap=0.0)`\n\n        Return the number of overlaps of the Interval `interval` had with this\n        IntervalFile.\n\n        `same_strand`, if True, will only consider hits on the same strand as\n        `interval`.\n\n        `overlap` can be used to specify the fraction of overlap between\n        `interval` and each feature in the IntervalFile.\n\n        Example usage:\n\n        >>> fn = pybedtools.example_filename('a.bed')\n\n        >>> # create an Interval to query with\n        >>> i = pybedtools.Interval('chr1', 1, 10000, strand='+')\n\n        >>> # Create an IntervalFile out of a.bed\n        >>> intervalfile = pybedtools.IntervalFile(fn)\n\n        >>> # get number of stranded hits\n        >>> intervalfile.count_hits(i, same_strand=True)\n        3\n\n        ";
static const char __pyx_k_tmp_pybedtools_pybedtools_cbedt[] = "/tmp/pybedtools/pybedtools/cbedtools.pyx";
static const char __pyx_k_Currently_unsupported_comparison[] = "Currently unsupported comparison -- please submit a bug report";
static const char __pyx_k_Features_are_nested_comparison_u[] = "Features are nested -- comparison undefined";
static const char __pyx_k_IntervalFile_count_hits_line_966[] = "IntervalFile.count_hits (line 966)";
static const char __pyx_k_create_interval_from_list_line_5[] = "create_interval_from_list (line 582)";
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_Attributes;
static PyObject *__pyx_n_s_Attributes___init;
static PyObject *__pyx_n_s_Attributes___str;
static PyObject *__pyx_n_s_BedToolsFileError;
static PyObject *__pyx_kp_s_Class_to_map_between_a_dict_of;
static PyObject *__pyx_kp_u_Create_an_Interval_object_from;
static PyObject *__pyx_kp_s_Currently_unsupported_comparison;
static PyObject *__pyx_kp_s_Error_opening_file;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_kp_s_Features_are_nested_comparison_u;
static PyObject *__pyx_n_s_ID;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_u_IntervalFile_all_hits_line_884;
static PyObject *__pyx_kp_u_IntervalFile_any_hits_line_930;
static PyObject *__pyx_kp_u_IntervalFile_count_hits_line_966;
static PyObject *__pyx_kp_s_IntervalFile_objects_do_not_yet;
static PyObject *__pyx_kp_s_Interval_attrs_was_not_None_but;
static PyObject *__pyx_kp_s_Interval_s_i_i;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_MalformedBedLineError;
static PyObject *__pyx_n_s_Name;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_PROFILES_TRUE;
static PyObject *__pyx_n_s_Parent;
static PyObject *__pyx_kp_u_Signature_IntervalFile_all_hits;
static PyObject *__pyx_kp_u_Signature_IntervalFile_any_hits;
static PyObject *__pyx_kp_u_Signature_IntervalFile_count_hi;
static PyObject *__pyx_kp_s_Start_is_greater_than_stop;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_kp_s_UTF_8;
static PyObject *__pyx_kp_s_Unable_to_detect_format_from_s;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__12;
static PyObject *__pyx_kp_s__13;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__22;
static PyObject *__pyx_kp_s__25;
static PyObject *__pyx_kp_s__26;
static PyObject *__pyx_kp_s__27;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__30;
static PyObject *__pyx_kp_s__31;
static PyObject *__pyx_kp_s__34;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_kp_s__7;
static PyObject *__pyx_kp_s__9;
static PyObject *__pyx_n_s_advance_iterator;
static PyObject *__pyx_n_s_all_hits;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_attr_str;
static PyObject *__pyx_n_s_attr_str_2;
static PyObject *__pyx_n_s_attrs;
static PyObject *__pyx_n_b_bed;
static PyObject *__pyx_n_s_bed;
static PyObject *__pyx_n_s_browser;
static PyObject *__pyx_n_s_chrom;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cmp;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_kp_u_create_interval_from_list_line_5;
static PyObject *__pyx_n_s_defaultdict;
static PyObject *__pyx_n_s_deparse_attrs;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_e1;
static PyObject *__pyx_n_s_e2;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_kp_s_field_index_out_of_range;
static PyObject *__pyx_n_s_field_sep;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_file_type;
static PyObject *__pyx_n_s_fn;
static PyObject *__pyx_n_s_gene_id;
static PyObject *__pyx_n_s_gene_name;
static PyObject *__pyx_n_b_gff;
static PyObject *__pyx_n_s_gff;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_integer_types;
static PyObject *__pyx_n_s_interval;
static PyObject *__pyx_n_s_intervalFile;
static PyObject *__pyx_n_s_isdigit;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_kdict;
static PyObject *__pyx_n_s_ktype;
static PyObject *__pyx_n_s_kv;
static PyObject *__pyx_n_s_kvs;
static PyObject *__pyx_n_s_loadIntoMap;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_s_malformed_line_s;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n_eq;
static PyObject *__pyx_n_s_n_quotes;
static PyObject *__pyx_n_s_n_semi;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_otherfields;
static PyObject *__pyx_n_s_overlap;
static PyObject *__pyx_n_s_pairs;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pybedtools_cbedtools;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_quoted;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_readline;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_richcmp___locals_cmp;
static PyObject *__pyx_n_s_rstrip;
static PyObject *__pyx_n_s_s1;
static PyObject *__pyx_n_s_s2;
static PyObject *__pyx_kp_s_s_i;
static PyObject *__pyx_n_s_sam;
static PyObject *__pyx_n_s_same_strand;
static PyObject *__pyx_n_s_score;
static PyObject *__pyx_n_s_search;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_sep;
static PyObject *__pyx_n_s_six;
static PyObject *__pyx_n_s_sort_keys;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_startswith;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_strand;
static PyObject *__pyx_n_s_stream;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_subprocess;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_tmp_pybedtools_pybedtools_cbedt;
static PyObject *__pyx_n_s_track;
static PyObject *__pyx_n_s_transcript_id;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_b_vcf;
static PyObject *__pyx_n_s_vcf;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_pf_10pybedtools_9cbedtools_10Attributes___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_attr_str); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_10Attributes_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval___init__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_chrom, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyObject *__pyx_v_name, PyObject *__pyx_v_score, PyObject *__pyx_v_strand, PyObject *__pyx_v_otherfields); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_2__copy__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_10pybedtools_9cbedtools_8Interval_4__hash__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5chrom___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_5chrom_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_chrom); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_11__richcmp___cmp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_6__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5start___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_5start_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, int __pyx_v_start); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_3end___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_3end_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, int __pyx_v_end); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_4stop___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_4stop_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, int __pyx_v_end); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_6strand___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_6strand_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_strand); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_6length___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_8deparse_attrs(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_6fields___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5attrs___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_5attrs_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_attrs); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5count___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_4name___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_4name_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5score___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_5score_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_9file_type___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_9file_type_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_7o_start___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5o_end___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5o_amt___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_10__str__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_12__repr__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static void __pyx_pf_10pybedtools_9cbedtools_8Interval_14__dealloc__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_10pybedtools_9cbedtools_8Interval_16__len__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_18__getitem__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_20__setitem__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_22append(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_24__nonzero__(CYTHON_UNUSED struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_8Interval_26__nonzero__(CYTHON_UNUSED struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_create_interval_from_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_2overlap(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_s1, int __pyx_v_s2, int __pyx_v_e1, int __pyx_v_e2); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_16IntervalIterator___init__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *__pyx_v_self, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_16IntervalIterator_2__iter__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_16IntervalIterator_4__next__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *__pyx_v_self); /* proto */
static int __pyx_pf_10pybedtools_9cbedtools_12IntervalFile___init__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, PyObject *__pyx_v_intervalFile); /* proto */
static void __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_2__dealloc__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_4__iter__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_6__next__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_2fn___get__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_9file_type___get__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_8loadIntoMap(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_10rewind(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_12seek(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, PyObject *__pyx_v_offset); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_14all_hits(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval, PyBoolObject *__pyx_v_same_strand, float __pyx_v_overlap); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_16any_hits(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval, PyBoolObject *__pyx_v_same_strand, float __pyx_v_overlap); /* proto */
static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_18count_hits(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval, PyBoolObject *__pyx_v_same_strand, float __pyx_v_overlap); /* proto */
static PyObject *__pyx_tp_new_10pybedtools_9cbedtools_Interval(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10pybedtools_9cbedtools_IntervalIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10pybedtools_9cbedtools_IntervalFile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_iteritems = {0, &__pyx_n_s_iteritems, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;

/* "pybedtools/cbedtools.pyx":21
 * # Python byte strings automatically coerce to/from C++ strings.
 * 
 * cdef _cppstr(s):             # <<<<<<<<<<<<<<
 *     # Use this to handle incoming strings from Python.
 *     #
 */

static PyObject *__pyx_f_10pybedtools_9cbedtools__cppstr(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("_cppstr", 0);
  __Pyx_INCREF(__pyx_v_s);

  /* "pybedtools/cbedtools.pyx":26
 *     # C++ uses bytestrings. PY2 strings need no conversion; bare PY3 strings
 *     # are unicode and so must be encoded to bytestring.
 *     if isinstance(s, int):             # <<<<<<<<<<<<<<
 *         s = str(s)
 *     if isinstance(s, unicode):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":27
 *     # are unicode and so must be encoded to bytestring.
 *     if isinstance(s, int):
 *         s = str(s)             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         s = s.encode('UTF-8')
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_s);
    __Pyx_GIVEREF(__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_s);
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pybedtools/cbedtools.pyx":26
 *     # C++ uses bytestrings. PY2 strings need no conversion; bare PY3 strings
 *     # are unicode and so must be encoded to bytestring.
 *     if isinstance(s, int):             # <<<<<<<<<<<<<<
 *         s = str(s)
 *     if isinstance(s, unicode):
 */
  }

  /* "pybedtools/cbedtools.pyx":28
 *     if isinstance(s, int):
 *         s = str(s)
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         s = s.encode('UTF-8')
 *     return <string> s
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_s); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pybedtools/cbedtools.pyx":29
 *         s = str(s)
 *     if isinstance(s, unicode):
 *         s = s.encode('UTF-8')             # <<<<<<<<<<<<<<
 *     return <string> s
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pybedtools/cbedtools.pyx":28
 *     if isinstance(s, int):
 *         s = str(s)
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         s = s.encode('UTF-8')
 *     return <string> s
 */
  }

  /* "pybedtools/cbedtools.pyx":30
 *     if isinstance(s, unicode):
 *         s = s.encode('UTF-8')
 *     return <string> s             # <<<<<<<<<<<<<<
 * 
 * cdef _pystr(string s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 30, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(((std::string)__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":21
 * # Python byte strings automatically coerce to/from C++ strings.
 * 
 * cdef _cppstr(s):             # <<<<<<<<<<<<<<
 *     # Use this to handle incoming strings from Python.
 *     #
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pybedtools.cbedtools._cppstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":32
 *     return <string> s
 * 
 * cdef _pystr(string s):             # <<<<<<<<<<<<<<
 *     # Use this to prepare a string for sending to Python.
 *     #
 */

static PyObject *__pyx_f_10pybedtools_9cbedtools__pystr(std::string __pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_pystr", 0);

  /* "pybedtools/cbedtools.pyx":36
 *     #
 *     # Always returns unicode.
 *     return s.decode('UTF-8', 'strict')             # <<<<<<<<<<<<<<
 * 
 * if PY_MAJOR_VERSION < 3:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_s, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":32
 *     return <string> s
 * 
 * cdef _pystr(string s):             # <<<<<<<<<<<<<<
 *     # Use this to prepare a string for sending to Python.
 *     #
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools._pystr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":149
 *     """
 * 
 *     def __init__(self, attr_str=""):             # <<<<<<<<<<<<<<
 *         attr_str = str(attr_str)
 *         self._attr_str = attr_str
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_10Attributes_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10pybedtools_9cbedtools_10Attributes_1__init__ = {"__init__", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_10Attributes_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10pybedtools_9cbedtools_10Attributes_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_attr_str = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_attr_str,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject*)__pyx_kp_s__2));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_attr_str);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 149, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_attr_str = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 149, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.Attributes.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_10Attributes___init__(__pyx_self, __pyx_v_self, __pyx_v_attr_str);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_10Attributes___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_attr_str) {
  PyObject *__pyx_v_n_semi = NULL;
  PyObject *__pyx_v_n_eq = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_n_quotes = NULL;
  PyObject *__pyx_v_kvs = NULL;
  PyObject *__pyx_v_field = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_kv = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_attr_str);

  /* "pybedtools/cbedtools.pyx":150
 * 
 *     def __init__(self, attr_str=""):
 *         attr_str = str(attr_str)             # <<<<<<<<<<<<<<
 *         self._attr_str = attr_str
 *         self.sort_keys = False
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_attr_str);
  __Pyx_GIVEREF(__pyx_v_attr_str);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_attr_str);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_attr_str, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":151
 *     def __init__(self, attr_str=""):
 *         attr_str = str(attr_str)
 *         self._attr_str = attr_str             # <<<<<<<<<<<<<<
 *         self.sort_keys = False
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_attr_str_2, __pyx_v_attr_str) < 0) __PYX_ERR(0, 151, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":152
 *         attr_str = str(attr_str)
 *         self._attr_str = attr_str
 *         self.sort_keys = False             # <<<<<<<<<<<<<<
 * 
 *         # in general, GFF files will have either as many '=' as ';'
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sort_keys, Py_False) < 0) __PYX_ERR(0, 152, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":156
 *         # in general, GFF files will have either as many '=' as ';'
 *         # (or ';'-1 if there's no trailing ';')
 *         n_semi = attr_str.count(';')             # <<<<<<<<<<<<<<
 *         n_eq = attr_str.count('=')
 *         n_quotes = attr_str.count('"')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr_str, __pyx_n_s_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_n_semi = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":157
 *         # (or ';'-1 if there's no trailing ';')
 *         n_semi = attr_str.count(';')
 *         n_eq = attr_str.count('=')             # <<<<<<<<<<<<<<
 *         n_quotes = attr_str.count('"')
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr_str, __pyx_n_s_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n_eq = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":158
 *         n_semi = attr_str.count(';')
 *         n_eq = attr_str.count('=')
 *         n_quotes = attr_str.count('"')             # <<<<<<<<<<<<<<
 * 
 *         if n_eq > n_semi - 1:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr_str, __pyx_n_s_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_n_quotes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":160
 *         n_quotes = attr_str.count('"')
 * 
 *         if n_eq > n_semi - 1:             # <<<<<<<<<<<<<<
 *             self.sep, self.field_sep = (';', '=')
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_n_semi, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_n_eq, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pybedtools/cbedtools.pyx":161
 * 
 *         if n_eq > n_semi - 1:
 *             self.sep, self.field_sep = (';', '=')             # <<<<<<<<<<<<<<
 *         else:
 *             self.sep, self.field_sep = (';', ' ')
 */
    __pyx_t_2 = __pyx_kp_s__3;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_kp_s__5;
    __Pyx_INCREF(__pyx_t_1);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sep, __pyx_t_2) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_field_sep, __pyx_t_1) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pybedtools/cbedtools.pyx":160
 *         n_quotes = attr_str.count('"')
 * 
 *         if n_eq > n_semi - 1:             # <<<<<<<<<<<<<<
 *             self.sep, self.field_sep = (';', '=')
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":163
 *             self.sep, self.field_sep = (';', '=')
 *         else:
 *             self.sep, self.field_sep = (';', ' ')             # <<<<<<<<<<<<<<
 * 
 *         self._quoted = {}
 */
  /*else*/ {
    __pyx_t_1 = __pyx_kp_s__3;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = __pyx_kp_s__9;
    __Pyx_INCREF(__pyx_t_2);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sep, __pyx_t_1) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_field_sep, __pyx_t_2) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "pybedtools/cbedtools.pyx":165
 *             self.sep, self.field_sep = (';', ' ')
 * 
 *         self._quoted = {}             # <<<<<<<<<<<<<<
 * 
 *         # TODO: pathological case . . . detect this as GFF:
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_quoted, __pyx_t_2) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":176
 * 
 *         # quick exit
 *         if attr_str == "":             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_attr_str, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "pybedtools/cbedtools.pyx":177
 *         # quick exit
 *         if attr_str == "":
 *             return             # <<<<<<<<<<<<<<
 * 
 *         kvs = map(str.strip, attr_str.strip().split(self.sep))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":176
 * 
 *         # quick exit
 *         if attr_str == "":             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "pybedtools/cbedtools.pyx":179
 *             return
 * 
 *         kvs = map(str.strip, attr_str.strip().split(self.sep))             # <<<<<<<<<<<<<<
 *         for field, value in [kv.split(self.field_sep, 1) for kv in kvs if kv]:
 *             if value.count('"') == 2:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyString_Type)), __pyx_n_s_strip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr_str, __pyx_n_s_strip); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sep); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_kvs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":180
 * 
 *         kvs = map(str.strip, attr_str.strip().split(self.sep))
 *         for field, value in [kv.split(self.field_sep, 1) for kv in kvs if kv]:             # <<<<<<<<<<<<<<
 *             if value.count('"') == 2:
 *                 self._quoted[field] = True
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_kvs)) || PyTuple_CheckExact(__pyx_v_kvs)) {
    __pyx_t_5 = __pyx_v_kvs; __Pyx_INCREF(__pyx_t_5); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_kvs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 180, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_9(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 180, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_kv, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_kv); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
    if (__pyx_t_3) {
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_kv, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field_sep); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_10 = 1;
        }
      }
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_4);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_int_1);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 180, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_2)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_7 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 180, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":181
 *         kvs = map(str.strip, attr_str.strip().split(self.sep))
 *         for field, value in [kv.split(self.field_sep, 1) for kv in kvs if kv]:
 *             if value.count('"') == 2:             # <<<<<<<<<<<<<<
 *                 self._quoted[field] = True
 *             self[field] = value.replace('"', '')
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_7, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "pybedtools/cbedtools.pyx":182
 *         for field, value in [kv.split(self.field_sep, 1) for kv in kvs if kv]:
 *             if value.count('"') == 2:
 *                 self._quoted[field] = True             # <<<<<<<<<<<<<<
 *             self[field] = value.replace('"', '')
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_quoted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_field, Py_True) < 0)) __PYX_ERR(0, 182, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pybedtools/cbedtools.pyx":181
 *         kvs = map(str.strip, attr_str.strip().split(self.sep))
 *         for field, value in [kv.split(self.field_sep, 1) for kv in kvs if kv]:
 *             if value.count('"') == 2:             # <<<<<<<<<<<<<<
 *                 self._quoted[field] = True
 *             self[field] = value.replace('"', '')
 */
    }

    /* "pybedtools/cbedtools.pyx":183
 *             if value.count('"') == 2:
 *                 self._quoted[field] = True
 *             self[field] = value.replace('"', '')             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_replace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_self, __pyx_v_field, __pyx_t_7) < 0)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":180
 * 
 *         kvs = map(str.strip, attr_str.strip().split(self.sep))
 *         for field, value in [kv.split(self.field_sep, 1) for kv in kvs if kv]:             # <<<<<<<<<<<<<<
 *             if value.count('"') == 2:
 *                 self._quoted[field] = True
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pybedtools/cbedtools.pyx":149
 *     """
 * 
 *     def __init__(self, attr_str=""):             # <<<<<<<<<<<<<<
 *         attr_str = str(attr_str)
 *         self._attr_str = attr_str
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pybedtools.cbedtools.Attributes.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n_semi);
  __Pyx_XDECREF(__pyx_v_n_eq);
  __Pyx_XDECREF(__pyx_v_n_quotes);
  __Pyx_XDECREF(__pyx_v_kvs);
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_kv);
  __Pyx_XDECREF(__pyx_v_attr_str);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":185
 *             self[field] = value.replace('"', '')
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         # stringify all items first
 *         items = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_10Attributes_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_10pybedtools_9cbedtools_10Attributes_3__str__ = {"__str__", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_10Attributes_3__str__, METH_O, 0};
static PyObject *__pyx_pw_10pybedtools_9cbedtools_10Attributes_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_10Attributes_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_10Attributes_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_items = NULL;
  PyObject *__pyx_v_field = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_v_pairs = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pybedtools/cbedtools.pyx":187
 *     def __str__(self):
 *         # stringify all items first
 *         items = []             # <<<<<<<<<<<<<<
 *         for field, val in dict.iteritems(self):
 *             try:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":188
 *         # stringify all items first
 *         items = []
 *         for field, val in dict.iteritems(self):             # <<<<<<<<<<<<<<
 *             try:
 *                 if self._quoted[field]:
 */
  if (unlikely(__pyx_v_self == Py_None)) {
    PyErr_Format(PyExc_TypeError, "descriptor '%s' requires a '%s' object but received a 'NoneType'", "iteritems", "dict");
    __PYX_ERR(0, 188, __pyx_L1_error)
  }
  if (!(likely(PyDict_Check(__pyx_v_self))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_self)->tp_name), 0))) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyDict_IterItems(((PyObject*)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 188, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 188, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 188, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pybedtools/cbedtools.pyx":189
 *         items = []
 *         for field, val in dict.iteritems(self):
 *             try:             # <<<<<<<<<<<<<<
 *                 if self._quoted[field]:
 *                     val = '"' + str(val) + '"'
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "pybedtools/cbedtools.pyx":190
 *         for field, val in dict.iteritems(self):
 *             try:
 *                 if self._quoted[field]:             # <<<<<<<<<<<<<<
 *                     val = '"' + str(val) + '"'
 *             except KeyError:
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_quoted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = PyObject_GetItem(__pyx_t_1, __pyx_v_field); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 190, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__pyx_t_12) {

          /* "pybedtools/cbedtools.pyx":191
 *             try:
 *                 if self._quoted[field]:
 *                     val = '"' + str(val) + '"'             # <<<<<<<<<<<<<<
 *             except KeyError:
 *                 pass
 */
          __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 191, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_v_val);
          __Pyx_GIVEREF(__pyx_v_val);
          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_val);
          __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Add(__pyx_kp_s__7, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 191, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_kp_s__7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF_SET(__pyx_v_val, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "pybedtools/cbedtools.pyx":190
 *         for field, val in dict.iteritems(self):
 *             try:
 *                 if self._quoted[field]:             # <<<<<<<<<<<<<<
 *                     val = '"' + str(val) + '"'
 *             except KeyError:
 */
        }

        /* "pybedtools/cbedtools.pyx":189
 *         items = []
 *         for field, val in dict.iteritems(self):
 *             try:             # <<<<<<<<<<<<<<
 *                 if self._quoted[field]:
 *                     val = '"' + str(val) + '"'
 */
      }
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pybedtools/cbedtools.pyx":192
 *                 if self._quoted[field]:
 *                     val = '"' + str(val) + '"'
 *             except KeyError:             # <<<<<<<<<<<<<<
 *                 pass
 *             items.append((field, val))
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
      if (__pyx_t_13) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L8_exception_handled;
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;

      /* "pybedtools/cbedtools.pyx":189
 *         items = []
 *         for field, val in dict.iteritems(self):
 *             try:             # <<<<<<<<<<<<<<
 *                 if self._quoted[field]:
 *                     val = '"' + str(val) + '"'
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L8_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      __pyx_L14_try_end:;
    }

    /* "pybedtools/cbedtools.pyx":194
 *             except KeyError:
 *                 pass
 *             items.append((field, val))             # <<<<<<<<<<<<<<
 * 
 *         pairs = []
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_field);
    __Pyx_GIVEREF(__pyx_v_field);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_field);
    __Pyx_INCREF(__pyx_v_val);
    __Pyx_GIVEREF(__pyx_v_val);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_val);
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_items, __pyx_t_1); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pybedtools/cbedtools.pyx":188
 *         # stringify all items first
 *         items = []
 *         for field, val in dict.iteritems(self):             # <<<<<<<<<<<<<<
 *             try:
 *                 if self._quoted[field]:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":196
 *             items.append((field, val))
 * 
 *         pairs = []             # <<<<<<<<<<<<<<
 *         if self.sort_keys:
 *             items.sort()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pairs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":197
 * 
 *         pairs = []
 *         if self.sort_keys:             # <<<<<<<<<<<<<<
 *             items.sort()
 *         for k, v in items:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sort_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_12) {

    /* "pybedtools/cbedtools.pyx":198
 *         pairs = []
 *         if self.sort_keys:
 *             items.sort()             # <<<<<<<<<<<<<<
 *         for k, v in items:
 *             pairs.append(self.field_sep.join([k, v]))
 */
    __pyx_t_14 = PyList_Sort(__pyx_v_items); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 198, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":197
 * 
 *         pairs = []
 *         if self.sort_keys:             # <<<<<<<<<<<<<<
 *             items.sort()
 *         for k, v in items:
 */
  }

  /* "pybedtools/cbedtools.pyx":199
 *         if self.sort_keys:
 *             items.sort()
 *         for k, v in items:             # <<<<<<<<<<<<<<
 *             pairs.append(self.field_sep.join([k, v]))
 * 
 */
  __pyx_t_2 = __pyx_v_items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 199, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 199, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L19_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L19_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L20_unpacking_done;
      __pyx_L19_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 199, __pyx_L1_error)
      __pyx_L20_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":200
 *             items.sort()
 *         for k, v in items:
 *             pairs.append(self.field_sep.join([k, v]))             # <<<<<<<<<<<<<<
 * 
 *         return self.sep.join(pairs) + self.sep
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field_sep); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_k);
    __Pyx_GIVEREF(__pyx_v_k);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_k);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_v_v);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_pairs, __pyx_t_1); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pybedtools/cbedtools.pyx":199
 *         if self.sort_keys:
 *             items.sort()
 *         for k, v in items:             # <<<<<<<<<<<<<<
 *             pairs.append(self.field_sep.join([k, v]))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":202
 *             pairs.append(self.field_sep.join([k, v]))
 * 
 *         return self.sep.join(pairs) + self.sep             # <<<<<<<<<<<<<<
 * 
 * cdef class Interval:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sep); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_join); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_pairs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_pairs);
    __Pyx_GIVEREF(__pyx_v_pairs);
    PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_v_pairs);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sep); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_15 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_15;
  __pyx_t_15 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":185
 *             self[field] = value.replace('"', '')
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         # stringify all items first
 *         items = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("pybedtools.cbedtools.Attributes.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_items);
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_pairs);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":245
 * 
 *     """
 *     def __init__(self, chrom, start, end, name=".", score=".", strand=".", otherfields=None):             # <<<<<<<<<<<<<<
 *         if otherfields is None:
 *             otherfields = []
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_chrom = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_end = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_score = 0;
  PyObject *__pyx_v_strand = 0;
  PyObject *__pyx_v_otherfields = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_chrom,&__pyx_n_s_start,&__pyx_n_s_end,&__pyx_n_s_name,&__pyx_n_s_score,&__pyx_n_s_strand,&__pyx_n_s_otherfields,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_kp_s__12);
    values[4] = ((PyObject *)__pyx_kp_s__12);
    values[5] = ((PyObject *)__pyx_kp_s__12);
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chrom)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 7, 1); __PYX_ERR(0, 245, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 7, 2); __PYX_ERR(0, 245, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_score);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strand);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_otherfields);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 245, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_chrom = values[0];
    __pyx_v_start = values[1];
    __pyx_v_end = values[2];
    __pyx_v_name = values[3];
    __pyx_v_score = values[4];
    __pyx_v_strand = values[5];
    __pyx_v_otherfields = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 245, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval___init__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), __pyx_v_chrom, __pyx_v_start, __pyx_v_end, __pyx_v_name, __pyx_v_score, __pyx_v_strand, __pyx_v_otherfields);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval___init__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_chrom, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyObject *__pyx_v_name, PyObject *__pyx_v_score, PyObject *__pyx_v_strand, PyObject *__pyx_v_otherfields) {
  PyObject *__pyx_v_fields = NULL;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  CHRPOS __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  std::vector<std::string>  __pyx_t_15;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_otherfields);

  /* "pybedtools/cbedtools.pyx":246
 *     """
 *     def __init__(self, chrom, start, end, name=".", score=".", strand=".", otherfields=None):
 *         if otherfields is None:             # <<<<<<<<<<<<<<
 *             otherfields = []
 *         self._bed = new BED()
 */
  __pyx_t_1 = (__pyx_v_otherfields == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":247
 *     def __init__(self, chrom, start, end, name=".", score=".", strand=".", otherfields=None):
 *         if otherfields is None:
 *             otherfields = []             # <<<<<<<<<<<<<<
 *         self._bed = new BED()
 * 
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_otherfields, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pybedtools/cbedtools.pyx":246
 *     """
 *     def __init__(self, chrom, start, end, name=".", score=".", strand=".", otherfields=None):
 *         if otherfields is None:             # <<<<<<<<<<<<<<
 *             otherfields = []
 *         self._bed = new BED()
 */
  }

  /* "pybedtools/cbedtools.pyx":248
 *         if otherfields is None:
 *             otherfields = []
 *         self._bed = new BED()             # <<<<<<<<<<<<<<
 * 
 *         self._bed.chrom = _cppstr(chrom)
 */
  __pyx_v_self->_bed = new BED();

  /* "pybedtools/cbedtools.pyx":250
 *         self._bed = new BED()
 * 
 *         self._bed.chrom = _cppstr(chrom)             # <<<<<<<<<<<<<<
 *         self._bed.start = start
 *         self._bed.end = end
 */
  __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_chrom); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->_bed->chrom = __pyx_t_4;

  /* "pybedtools/cbedtools.pyx":251
 * 
 *         self._bed.chrom = _cppstr(chrom)
 *         self._bed.start = start             # <<<<<<<<<<<<<<
 *         self._bed.end = end
 *         self._bed.name = _cppstr(name)
 */
  __pyx_t_5 = __Pyx_PyInt_As_CHRPOS(__pyx_v_start); if (unlikely((__pyx_t_5 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 251, __pyx_L1_error)
  __pyx_v_self->_bed->start = __pyx_t_5;

  /* "pybedtools/cbedtools.pyx":252
 *         self._bed.chrom = _cppstr(chrom)
 *         self._bed.start = start
 *         self._bed.end = end             # <<<<<<<<<<<<<<
 *         self._bed.name = _cppstr(name)
 *         self._bed.score = _cppstr(score)
 */
  __pyx_t_5 = __Pyx_PyInt_As_CHRPOS(__pyx_v_end); if (unlikely((__pyx_t_5 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_v_self->_bed->end = __pyx_t_5;

  /* "pybedtools/cbedtools.pyx":253
 *         self._bed.start = start
 *         self._bed.end = end
 *         self._bed.name = _cppstr(name)             # <<<<<<<<<<<<<<
 *         self._bed.score = _cppstr(score)
 *         self._bed.strand = _cppstr(strand)
 */
  __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->_bed->name = __pyx_t_4;

  /* "pybedtools/cbedtools.pyx":254
 *         self._bed.end = end
 *         self._bed.name = _cppstr(name)
 *         self._bed.score = _cppstr(score)             # <<<<<<<<<<<<<<
 *         self._bed.strand = _cppstr(strand)
 *         fields = [_cppstr(chrom), _cppstr(str(start)), _cppstr(str(end)), _cppstr(name), _cppstr(score), _cppstr(strand)]
 */
  __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_score); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->_bed->score = __pyx_t_4;

  /* "pybedtools/cbedtools.pyx":255
 *         self._bed.name = _cppstr(name)
 *         self._bed.score = _cppstr(score)
 *         self._bed.strand = _cppstr(strand)             # <<<<<<<<<<<<<<
 *         fields = [_cppstr(chrom), _cppstr(str(start)), _cppstr(str(end)), _cppstr(name), _cppstr(score), _cppstr(strand)]
 *         fields.extend([_cppstr(i) for i in otherfields])
 */
  __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_strand); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->_bed->strand = __pyx_t_4;

  /* "pybedtools/cbedtools.pyx":256
 *         self._bed.score = _cppstr(score)
 *         self._bed.strand = _cppstr(strand)
 *         fields = [_cppstr(chrom), _cppstr(str(start)), _cppstr(str(end)), _cppstr(name), _cppstr(score), _cppstr(strand)]             # <<<<<<<<<<<<<<
 *         fields.extend([_cppstr(i) for i in otherfields])
 *         self._bed.fields = fields
 */
  __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_chrom); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_start);
  __Pyx_GIVEREF(__pyx_v_start);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_start);
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_end);
  __Pyx_GIVEREF(__pyx_v_end);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_end);
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_score); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_strand); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyList_New(6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_11, 3, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_11, 4, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_11, 5, __pyx_t_10);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_v_fields = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "pybedtools/cbedtools.pyx":257
 *         self._bed.strand = _cppstr(strand)
 *         fields = [_cppstr(chrom), _cppstr(str(start)), _cppstr(str(end)), _cppstr(name), _cppstr(score), _cppstr(strand)]
 *         fields.extend([_cppstr(i) for i in otherfields])             # <<<<<<<<<<<<<<
 *         self._bed.fields = fields
 *         self._attrs = None
 */
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  if (likely(PyList_CheckExact(__pyx_v_otherfields)) || PyTuple_CheckExact(__pyx_v_otherfields)) {
    __pyx_t_10 = __pyx_v_otherfields; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_otherfields); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 257, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_13(__pyx_t_10);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 257, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_14 = __Pyx_PyList_Extend(__pyx_v_fields, __pyx_t_11); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "pybedtools/cbedtools.pyx":258
 *         fields = [_cppstr(chrom), _cppstr(str(start)), _cppstr(str(end)), _cppstr(name), _cppstr(score), _cppstr(strand)]
 *         fields.extend([_cppstr(i) for i in otherfields])
 *         self._bed.fields = fields             # <<<<<<<<<<<<<<
 *         self._attrs = None
 * 
 */
  __pyx_t_15 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_fields); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_v_self->_bed->fields = __pyx_t_15;

  /* "pybedtools/cbedtools.pyx":259
 *         fields.extend([_cppstr(i) for i in otherfields])
 *         self._bed.fields = fields
 *         self._attrs = None             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_attrs);
  __Pyx_DECREF(__pyx_v_self->_attrs);
  __pyx_v_self->_attrs = Py_None;

  /* "pybedtools/cbedtools.pyx":245
 * 
 *     """
 *     def __init__(self, chrom, start, end, name=".", score=".", strand=".", otherfields=None):             # <<<<<<<<<<<<<<
 *         if otherfields is None:
 *             otherfields = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_otherfields);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":261
 *         self._attrs = None
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return create_interval_from_list(self.fields)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_2__copy__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_2__copy__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "pybedtools/cbedtools.pyx":262
 * 
 *     def __copy__(self):
 *         return create_interval_from_list(self.fields)             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 262, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_10pybedtools_9cbedtools_create_interval_from_list(((PyObject*)__pyx_t_1), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":261
 *         self._attrs = None
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return create_interval_from_list(self.fields)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":264
 *         return create_interval_from_list(self.fields)
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash("\t".join(self.fields))
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_10pybedtools_9cbedtools_8Interval_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_10pybedtools_9cbedtools_8Interval_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_4__hash__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_10pybedtools_9cbedtools_8Interval_4__hash__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_hash_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pybedtools/cbedtools.pyx":265
 * 
 *     def __hash__(self):
 *         return hash("\t".join(self.fields))             # <<<<<<<<<<<<<<
 * 
 *     property chrom:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__13, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Hash(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":264
 *         return create_interval_from_list(self.fields)
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash("\t".join(self.fields))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":269
 *     property chrom:
 *         """ the chromosome of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.chrom)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5chrom_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5chrom_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5chrom___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5chrom___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":270
 *         """ the chromosome of the feature"""
 *         def __get__(self):
 *             return _pystr(self._bed.chrom)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, chrom):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_bed->chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":269
 *     property chrom:
 *         """ the chromosome of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.chrom)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.chrom.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":272
 *             return _pystr(self._bed.chrom)
 * 
 *         def __set__(self, chrom):             # <<<<<<<<<<<<<<
 *             chrom = _cppstr(chrom)
 *             self._bed.chrom = chrom
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_5chrom_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_chrom); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_5chrom_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_chrom) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5chrom_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_chrom));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_5chrom_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_chrom) {
  PyObject *__pyx_v_idx = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_chrom);

  /* "pybedtools/cbedtools.pyx":273
 * 
 *         def __set__(self, chrom):
 *             chrom = _cppstr(chrom)             # <<<<<<<<<<<<<<
 *             self._bed.chrom = chrom
 *             idx = LOOKUPS[self.file_type]["chrom"]
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_chrom, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":274
 *         def __set__(self, chrom):
 *             chrom = _cppstr(chrom)
 *             self._bed.chrom = chrom             # <<<<<<<<<<<<<<
 *             idx = LOOKUPS[self.file_type]["chrom"]
 *             self._bed.fields[idx] = _cppstr(chrom)
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_chrom); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_v_self->_bed->chrom = __pyx_t_2;

  /* "pybedtools/cbedtools.pyx":275
 *             chrom = _cppstr(chrom)
 *             self._bed.chrom = chrom
 *             idx = LOOKUPS[self.file_type]["chrom"]             # <<<<<<<<<<<<<<
 *             self._bed.fields[idx] = _cppstr(chrom)
 * 
 */
  if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 275, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":276
 *             self._bed.chrom = chrom
 *             idx = LOOKUPS[self.file_type]["chrom"]
 *             self._bed.fields[idx] = _cppstr(chrom)             # <<<<<<<<<<<<<<
 * 
 *     # < 0 | <= 1 | == 2 | != 3 |  > 4 | >= 5
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_idx); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  (__pyx_v_self->_bed->fields[__pyx_t_4]) = __pyx_t_2;

  /* "pybedtools/cbedtools.pyx":272
 *             return _pystr(self._bed.chrom)
 * 
 *         def __set__(self, chrom):             # <<<<<<<<<<<<<<
 *             chrom = _cppstr(chrom)
 *             self._bed.chrom = chrom
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.chrom.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_chrom);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":279
 * 
 *     # < 0 | <= 1 | == 2 | != 3 |  > 4 | >= 5
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         if (self.chrom != other.chrom) or (self.strand != other.strand):
 *             if op == 3: return True
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_6__richcmp__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":284
 *             return False
 * 
 *         def cmp(x, y):             # <<<<<<<<<<<<<<
 *             if x < y:
 *                 return -1
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_11__richcmp___1cmp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10pybedtools_9cbedtools_8Interval_11__richcmp___1cmp = {"cmp", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_8Interval_11__richcmp___1cmp, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_11__richcmp___1cmp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cmp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cmp", 1, 2, 2, 1); __PYX_ERR(0, 284, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cmp") < 0)) __PYX_ERR(0, 284, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cmp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 284, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__richcmp__.cmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_11__richcmp___cmp(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_11__richcmp___cmp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("cmp", 0);

  /* "pybedtools/cbedtools.pyx":285
 * 
 *         def cmp(x, y):
 *             if x < y:             # <<<<<<<<<<<<<<
 *                 return -1
 *             if x == y:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_x, __pyx_v_y, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":286
 *         def cmp(x, y):
 *             if x < y:
 *                 return -1             # <<<<<<<<<<<<<<
 *             if x == y:
 *                 return 0
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_r = __pyx_int_neg_1;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":285
 * 
 *         def cmp(x, y):
 *             if x < y:             # <<<<<<<<<<<<<<
 *                 return -1
 *             if x == y:
 */
  }

  /* "pybedtools/cbedtools.pyx":287
 *             if x < y:
 *                 return -1
 *             if x == y:             # <<<<<<<<<<<<<<
 *                 return 0
 *             if x > y:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_x, __pyx_v_y, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":288
 *                 return -1
 *             if x == y:
 *                 return 0             # <<<<<<<<<<<<<<
 *             if x > y:
 *                 return 1
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":287
 *             if x < y:
 *                 return -1
 *             if x == y:             # <<<<<<<<<<<<<<
 *                 return 0
 *             if x > y:
 */
  }

  /* "pybedtools/cbedtools.pyx":289
 *             if x == y:
 *                 return 0
 *             if x > y:             # <<<<<<<<<<<<<<
 *                 return 1
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_x, __pyx_v_y, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":290
 *                 return 0
 *             if x > y:
 *                 return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_1);
    __pyx_r = __pyx_int_1;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":289
 *             if x == y:
 *                 return 0
 *             if x > y:             # <<<<<<<<<<<<<<
 *                 return 1
 * 
 */
  }

  /* "pybedtools/cbedtools.pyx":284
 *             return False
 * 
 *         def cmp(x, y):             # <<<<<<<<<<<<<<
 *             if x < y:
 *                 return -1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__richcmp__.cmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":279
 * 
 *     # < 0 | <= 1 | == 2 | != 3 |  > 4 | >= 5
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         if (self.chrom != other.chrom) or (self.strand != other.strand):
 *             if op == 3: return True
 */

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_6__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_cmp = 0;
  PyObject *__pyx_v_profile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pybedtools/cbedtools.pyx":280
 *     # < 0 | <= 1 | == 2 | != 3 |  > 4 | >= 5
 *     def __richcmp__(self, other, int op):
 *         if (self.chrom != other.chrom) or (self.strand != other.strand):             # <<<<<<<<<<<<<<
 *             if op == 3: return True
 *             return False
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_chrom); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_chrom); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_strand); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_strand); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pybedtools/cbedtools.pyx":281
 *     def __richcmp__(self, other, int op):
 *         if (self.chrom != other.chrom) or (self.strand != other.strand):
 *             if op == 3: return True             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_1 = ((__pyx_v_op == 3) != 0);
    if (__pyx_t_1) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;
    }

    /* "pybedtools/cbedtools.pyx":282
 *         if (self.chrom != other.chrom) or (self.strand != other.strand):
 *             if op == 3: return True
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         def cmp(x, y):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":280
 *     # < 0 | <= 1 | == 2 | != 3 |  > 4 | >= 5
 *     def __richcmp__(self, other, int op):
 *         if (self.chrom != other.chrom) or (self.strand != other.strand):             # <<<<<<<<<<<<<<
 *             if op == 3: return True
 *             return False
 */
  }

  /* "pybedtools/cbedtools.pyx":284
 *             return False
 * 
 *         def cmp(x, y):             # <<<<<<<<<<<<<<
 *             if x < y:
 *                 return -1
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10pybedtools_9cbedtools_8Interval_11__richcmp___1cmp, 0, __pyx_n_s_richcmp___locals_cmp, NULL, __pyx_n_s_pybedtools_cbedtools, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_cmp = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":294
 * 
 *         # check all 4 so that we can handle nesting and partial overlaps.
 *         profile = (cmp(self.start, other.start),             # <<<<<<<<<<<<<<
 *                    cmp(self.stop, other.stop),
 *                    cmp(self.start, other.stop),
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_pf_10pybedtools_9cbedtools_8Interval_11__richcmp___cmp(__pyx_v_cmp, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":295
 *         # check all 4 so that we can handle nesting and partial overlaps.
 *         profile = (cmp(self.start, other.start),
 *                    cmp(self.stop, other.stop),             # <<<<<<<<<<<<<<
 *                    cmp(self.start, other.stop),
 *                    cmp(self.stop, other.start))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __pyx_pf_10pybedtools_9cbedtools_8Interval_11__richcmp___cmp(__pyx_v_cmp, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":296
 *         profile = (cmp(self.start, other.start),
 *                    cmp(self.stop, other.stop),
 *                    cmp(self.start, other.stop),             # <<<<<<<<<<<<<<
 *                    cmp(self.stop, other.start))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __pyx_pf_10pybedtools_9cbedtools_8Interval_11__richcmp___cmp(__pyx_v_cmp, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":297
 *                    cmp(self.stop, other.stop),
 *                    cmp(self.start, other.stop),
 *                    cmp(self.stop, other.start))             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __pyx_pf_10pybedtools_9cbedtools_8Interval_11__richcmp___cmp(__pyx_v_cmp, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":294
 * 
 *         # check all 4 so that we can handle nesting and partial overlaps.
 *         profile = (cmp(self.start, other.start),             # <<<<<<<<<<<<<<
 *                    cmp(self.stop, other.stop),
 *                    cmp(self.start, other.stop),
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_v_profile = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":299
 *                    cmp(self.stop, other.start))
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if PROFILES_TRUE[profile] == tuple():
 *                 raise NotImplementedError('Features are nested -- comparison undefined')
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    /*try:*/ {

      /* "pybedtools/cbedtools.pyx":300
 * 
 *         try:
 *             if PROFILES_TRUE[profile] == tuple():             # <<<<<<<<<<<<<<
 *                 raise NotImplementedError('Features are nested -- comparison undefined')
 * 
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PROFILES_TRUE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PyObject_GetItem(__pyx_t_2, __pyx_v_profile); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 300, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyTuple_Type)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 300, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 300, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_1) {

        /* "pybedtools/cbedtools.pyx":301
 *         try:
 *             if PROFILES_TRUE[profile] == tuple():
 *                 raise NotImplementedError('Features are nested -- comparison undefined')             # <<<<<<<<<<<<<<
 * 
 *             if op != 3:
 */
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 301, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 301, __pyx_L7_error)

        /* "pybedtools/cbedtools.pyx":300
 * 
 *         try:
 *             if PROFILES_TRUE[profile] == tuple():             # <<<<<<<<<<<<<<
 *                 raise NotImplementedError('Features are nested -- comparison undefined')
 * 
 */
      }

      /* "pybedtools/cbedtools.pyx":303
 *                 raise NotImplementedError('Features are nested -- comparison undefined')
 * 
 *             if op != 3:             # <<<<<<<<<<<<<<
 *                 if op in PROFILES_TRUE[profile]:
 *                     return True
 */
      __pyx_t_1 = ((__pyx_v_op != 3) != 0);
      if (__pyx_t_1) {

        /* "pybedtools/cbedtools.pyx":304
 * 
 *             if op != 3:
 *                 if op in PROFILES_TRUE[profile]:             # <<<<<<<<<<<<<<
 *                     return True
 *                 return False
 */
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_op); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 304, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PROFILES_TRUE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = PyObject_GetItem(__pyx_t_2, __pyx_v_profile); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_7, __pyx_t_8, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 304, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_5 = (__pyx_t_1 != 0);
        if (__pyx_t_5) {

          /* "pybedtools/cbedtools.pyx":305
 *             if op != 3:
 *                 if op in PROFILES_TRUE[profile]:
 *                     return True             # <<<<<<<<<<<<<<
 *                 return False
 *             else:
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_True);
          __pyx_r = Py_True;
          goto __pyx_L11_try_return;

          /* "pybedtools/cbedtools.pyx":304
 * 
 *             if op != 3:
 *                 if op in PROFILES_TRUE[profile]:             # <<<<<<<<<<<<<<
 *                     return True
 *                 return False
 */
        }

        /* "pybedtools/cbedtools.pyx":306
 *                 if op in PROFILES_TRUE[profile]:
 *                     return True
 *                 return False             # <<<<<<<<<<<<<<
 *             else:
 *                 if 2 in PROFILES_TRUE[profile]:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L11_try_return;

        /* "pybedtools/cbedtools.pyx":303
 *                 raise NotImplementedError('Features are nested -- comparison undefined')
 * 
 *             if op != 3:             # <<<<<<<<<<<<<<
 *                 if op in PROFILES_TRUE[profile]:
 *                     return True
 */
      }

      /* "pybedtools/cbedtools.pyx":308
 *                 return False
 *             else:
 *                 if 2 in PROFILES_TRUE[profile]:             # <<<<<<<<<<<<<<
 *                     return False
 *                 return True
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_PROFILES_TRUE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 308, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyObject_GetItem(__pyx_t_8, __pyx_v_profile); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 308, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_int_2, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 308, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_1 = (__pyx_t_5 != 0);
        if (__pyx_t_1) {

          /* "pybedtools/cbedtools.pyx":309
 *             else:
 *                 if 2 in PROFILES_TRUE[profile]:
 *                     return False             # <<<<<<<<<<<<<<
 *                 return True
 *         except KeyError:
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_False);
          __pyx_r = Py_False;
          goto __pyx_L11_try_return;

          /* "pybedtools/cbedtools.pyx":308
 *                 return False
 *             else:
 *                 if 2 in PROFILES_TRUE[profile]:             # <<<<<<<<<<<<<<
 *                     return False
 *                 return True
 */
        }

        /* "pybedtools/cbedtools.pyx":310
 *                 if 2 in PROFILES_TRUE[profile]:
 *                     return False
 *                 return True             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             raise ValueError('Currently unsupported comparison -- please '
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L11_try_return;
      }

      /* "pybedtools/cbedtools.pyx":299
 *                    cmp(self.stop, other.start))
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if PROFILES_TRUE[profile] == tuple():
 *                 raise NotImplementedError('Features are nested -- comparison undefined')
 */
    }
    __pyx_L7_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":311
 *                     return False
 *                 return True
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             raise ValueError('Currently unsupported comparison -- please '
 *                              'submit a bug report')
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_2) < 0) __PYX_ERR(0, 311, __pyx_L9_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_2);

      /* "pybedtools/cbedtools.pyx":312
 *                 return True
 *         except KeyError:
 *             raise ValueError('Currently unsupported comparison -- please '             # <<<<<<<<<<<<<<
 *                              'submit a bug report')
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L9_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 312, __pyx_L9_except_error)
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "pybedtools/cbedtools.pyx":299
 *                    cmp(self.stop, other.start))
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if PROFILES_TRUE[profile] == tuple():
 *                 raise NotImplementedError('Features are nested -- comparison undefined')
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L1_error;
    __pyx_L11_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L0;
  }

  /* "pybedtools/cbedtools.pyx":279
 * 
 *     # < 0 | <= 1 | == 2 | != 3 |  > 4 | >= 5
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         if (self.chrom != other.chrom) or (self.strand != other.strand):
 *             if op == 3: return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cmp);
  __Pyx_XDECREF(__pyx_v_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":317
 *     property start:
 *         """The 0-based start of the feature."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bed.start
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5start_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5start___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5start___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":318
 *         """The 0-based start of the feature."""
 *         def __get__(self):
 *             return self._bed.start             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int start):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_CHRPOS(__pyx_v_self->_bed->start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":317
 *     property start:
 *         """The 0-based start of the feature."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bed.start
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":320
 *             return self._bed.start
 * 
 *         def __set__(self, int start):             # <<<<<<<<<<<<<<
 *             self._bed.start = start
 *             idx = LOOKUPS[self.file_type]["start"]
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_5start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_start); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_5start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_start) {
  int __pyx_v_start;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_start); {
    __pyx_v_start = __Pyx_PyInt_As_int(__pyx_arg_start); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5start_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((int)__pyx_v_start));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_5start_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, int __pyx_v_start) {
  PyObject *__pyx_v_idx = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  std::string __pyx_t_4;
  size_t __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pybedtools/cbedtools.pyx":321
 * 
 *         def __set__(self, int start):
 *             self._bed.start = start             # <<<<<<<<<<<<<<
 *             idx = LOOKUPS[self.file_type]["start"]
 * 
 */
  __pyx_v_self->_bed->start = __pyx_v_start;

  /* "pybedtools/cbedtools.pyx":322
 *         def __set__(self, int start):
 *             self._bed.start = start
 *             idx = LOOKUPS[self.file_type]["start"]             # <<<<<<<<<<<<<<
 * 
 *             # Non-BED files should have 1-based coords in fields
 */
  if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 322, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":325
 * 
 *             # Non-BED files should have 1-based coords in fields
 *             if self.file_type != 'bed':             # <<<<<<<<<<<<<<
 *                 start += 1
 *             self._bed.fields[idx] = _cppstr(str(start))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_bed, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "pybedtools/cbedtools.pyx":326
 *             # Non-BED files should have 1-based coords in fields
 *             if self.file_type != 'bed':
 *                 start += 1             # <<<<<<<<<<<<<<
 *             self._bed.fields[idx] = _cppstr(str(start))
 * 
 */
    __pyx_v_start = (__pyx_v_start + 1);

    /* "pybedtools/cbedtools.pyx":325
 * 
 *             # Non-BED files should have 1-based coords in fields
 *             if self.file_type != 'bed':             # <<<<<<<<<<<<<<
 *                 start += 1
 *             self._bed.fields[idx] = _cppstr(str(start))
 */
  }

  /* "pybedtools/cbedtools.pyx":327
 *             if self.file_type != 'bed':
 *                 start += 1
 *             self._bed.fields[idx] = _cppstr(str(start))             # <<<<<<<<<<<<<<
 * 
 *     property end:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_idx); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  (__pyx_v_self->_bed->fields[__pyx_t_5]) = __pyx_t_4;

  /* "pybedtools/cbedtools.pyx":320
 *             return self._bed.start
 * 
 *         def __set__(self, int start):             # <<<<<<<<<<<<<<
 *             self._bed.start = start
 *             idx = LOOKUPS[self.file_type]["start"]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":331
 *     property end:
 *         """The end of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bed.end
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_3end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_3end_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_3end___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_3end___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":332
 *         """The end of the feature"""
 *         def __get__(self):
 *             return self._bed.end             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int end):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_CHRPOS(__pyx_v_self->_bed->end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":331
 *     property end:
 *         """The end of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bed.end
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":334
 *             return self._bed.end
 * 
 *         def __set__(self, int end):             # <<<<<<<<<<<<<<
 *             self._bed.end = end
 *             idx = LOOKUPS[self.file_type]["stop"]
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_3end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_end); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_3end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_end) {
  int __pyx_v_end;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_end); {
    __pyx_v_end = __Pyx_PyInt_As_int(__pyx_arg_end); if (unlikely((__pyx_v_end == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 334, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.end.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_3end_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((int)__pyx_v_end));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_3end_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, int __pyx_v_end) {
  PyObject *__pyx_v_idx = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pybedtools/cbedtools.pyx":335
 * 
 *         def __set__(self, int end):
 *             self._bed.end = end             # <<<<<<<<<<<<<<
 *             idx = LOOKUPS[self.file_type]["stop"]
 *             self._bed.fields[idx] = _cppstr(str(end))
 */
  __pyx_v_self->_bed->end = __pyx_v_end;

  /* "pybedtools/cbedtools.pyx":336
 *         def __set__(self, int end):
 *             self._bed.end = end
 *             idx = LOOKUPS[self.file_type]["stop"]             # <<<<<<<<<<<<<<
 *             self._bed.fields[idx] = _cppstr(str(end))
 * 
 */
  if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 336, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_stop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":337
 *             self._bed.end = end
 *             idx = LOOKUPS[self.file_type]["stop"]
 *             self._bed.fields[idx] = _cppstr(str(end))             # <<<<<<<<<<<<<<
 * 
 *     property stop:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_idx); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
  (__pyx_v_self->_bed->fields[__pyx_t_4]) = __pyx_t_3;

  /* "pybedtools/cbedtools.pyx":334
 *             return self._bed.end
 * 
 *         def __set__(self, int end):             # <<<<<<<<<<<<<<
 *             self._bed.end = end
 *             idx = LOOKUPS[self.file_type]["stop"]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.end.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":341
 *     property stop:
 *         """ the end of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bed.end
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_4stop_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_4stop_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_4stop___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_4stop___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":342
 *         """ the end of the feature"""
 *         def __get__(self):
 *             return self._bed.end             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int end):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_CHRPOS(__pyx_v_self->_bed->end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":341
 *     property stop:
 *         """ the end of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bed.end
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.stop.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":344
 *             return self._bed.end
 * 
 *         def __set__(self, int end):             # <<<<<<<<<<<<<<
 *             idx = LOOKUPS[self.file_type]["stop"]
 *             self._bed.fields[idx] = _cppstr(str(end))
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_4stop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_end); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_4stop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_end) {
  int __pyx_v_end;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_end); {
    __pyx_v_end = __Pyx_PyInt_As_int(__pyx_arg_end); if (unlikely((__pyx_v_end == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.stop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_4stop_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((int)__pyx_v_end));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_4stop_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, int __pyx_v_end) {
  PyObject *__pyx_v_idx = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pybedtools/cbedtools.pyx":345
 * 
 *         def __set__(self, int end):
 *             idx = LOOKUPS[self.file_type]["stop"]             # <<<<<<<<<<<<<<
 *             self._bed.fields[idx] = _cppstr(str(end))
 *             self._bed.end = end
 */
  if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 345, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_stop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":346
 *         def __set__(self, int end):
 *             idx = LOOKUPS[self.file_type]["stop"]
 *             self._bed.fields[idx] = _cppstr(str(end))             # <<<<<<<<<<<<<<
 *             self._bed.end = end
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_idx); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
  (__pyx_v_self->_bed->fields[__pyx_t_4]) = __pyx_t_3;

  /* "pybedtools/cbedtools.pyx":347
 *             idx = LOOKUPS[self.file_type]["stop"]
 *             self._bed.fields[idx] = _cppstr(str(end))
 *             self._bed.end = end             # <<<<<<<<<<<<<<
 * 
 *     property strand:
 */
  __pyx_v_self->_bed->end = __pyx_v_end;

  /* "pybedtools/cbedtools.pyx":344
 *             return self._bed.end
 * 
 *         def __set__(self, int end):             # <<<<<<<<<<<<<<
 *             idx = LOOKUPS[self.file_type]["stop"]
 *             self._bed.fields[idx] = _cppstr(str(end))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.stop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":351
 *     property strand:
 *         """ the strand of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.strand)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_6strand_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_6strand_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_6strand___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_6strand___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":352
 *         """ the strand of the feature"""
 *         def __get__(self):
 *             return _pystr(self._bed.strand)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, strand):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_bed->strand); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":351
 *     property strand:
 *         """ the strand of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.strand)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.strand.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":354
 *             return _pystr(self._bed.strand)
 * 
 *         def __set__(self, strand):             # <<<<<<<<<<<<<<
 *             idx = LOOKUPS[self.file_type]["strand"]
 *             self._bed.fields[idx] = _cppstr(strand)
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_6strand_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_strand); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_6strand_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_strand) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_6strand_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_strand));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_6strand_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_strand) {
  PyObject *__pyx_v_idx = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pybedtools/cbedtools.pyx":355
 * 
 *         def __set__(self, strand):
 *             idx = LOOKUPS[self.file_type]["strand"]             # <<<<<<<<<<<<<<
 *             self._bed.fields[idx] = _cppstr(strand)
 *             self._bed.strand = _cppstr(strand)
 */
  if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 355, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_strand); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":356
 *         def __set__(self, strand):
 *             idx = LOOKUPS[self.file_type]["strand"]
 *             self._bed.fields[idx] = _cppstr(strand)             # <<<<<<<<<<<<<<
 *             self._bed.strand = _cppstr(strand)
 * 
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_strand); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_idx); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
  (__pyx_v_self->_bed->fields[__pyx_t_4]) = __pyx_t_3;

  /* "pybedtools/cbedtools.pyx":357
 *             idx = LOOKUPS[self.file_type]["strand"]
 *             self._bed.fields[idx] = _cppstr(strand)
 *             self._bed.strand = _cppstr(strand)             # <<<<<<<<<<<<<<
 * 
 *     property length:
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_strand); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_bed->strand = __pyx_t_3;

  /* "pybedtools/cbedtools.pyx":354
 *             return _pystr(self._bed.strand)
 * 
 *         def __set__(self, strand):             # <<<<<<<<<<<<<<
 *             idx = LOOKUPS[self.file_type]["strand"]
 *             self._bed.fields[idx] = _cppstr(strand)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.strand.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":361
 *     property length:
 *         """ the length of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bed.end - self._bed.start
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_6length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_6length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_6length___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_6length___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":362
 *         """ the length of the feature"""
 *         def __get__(self):
 *             return self._bed.end - self._bed.start             # <<<<<<<<<<<<<<
 * 
 *     cpdef deparse_attrs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_CHRPOS((__pyx_v_self->_bed->end - __pyx_v_self->_bed->start)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":361
 *     property length:
 *         """ the length of the feature"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bed.end - self._bed.start
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":364
 *             return self._bed.end - self._bed.start
 * 
 *     cpdef deparse_attrs(self):             # <<<<<<<<<<<<<<
 * 
 *         if self._attrs is None: return
 */

static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_9deparse_attrs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_10pybedtools_9cbedtools_8Interval_deparse_attrs(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  std::string __pyx_t_7;
  __Pyx_RefNannySetupContext("deparse_attrs", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deparse_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_8Interval_9deparse_attrs)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pybedtools/cbedtools.pyx":366
 *     cpdef deparse_attrs(self):
 * 
 *         if self._attrs is None: return             # <<<<<<<<<<<<<<
 * 
 *         if self.file_type != "gff":
 */
  __pyx_t_5 = (__pyx_v_self->_attrs == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "pybedtools/cbedtools.pyx":368
 *         if self._attrs is None: return
 * 
 *         if self.file_type != "gff":             # <<<<<<<<<<<<<<
 *             raise ValueError('Interval.attrs was not None, but this was a non-GFF Interval')
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_gff, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "pybedtools/cbedtools.pyx":369
 * 
 *         if self.file_type != "gff":
 *             raise ValueError('Interval.attrs was not None, but this was a non-GFF Interval')             # <<<<<<<<<<<<<<
 * 
 *         s = self._attrs.__str__()
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 369, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":368
 *         if self._attrs is None: return
 * 
 *         if self.file_type != "gff":             # <<<<<<<<<<<<<<
 *             raise ValueError('Interval.attrs was not None, but this was a non-GFF Interval')
 * 
 */
  }

  /* "pybedtools/cbedtools.pyx":371
 *             raise ValueError('Interval.attrs was not None, but this was a non-GFF Interval')
 * 
 *         s = self._attrs.__str__()             # <<<<<<<<<<<<<<
 *         self._bed.fields[8] = _cppstr(s)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_attrs, __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":372
 * 
 *         s = self._attrs.__str__()
 *         self._bed.fields[8] = _cppstr(s)             # <<<<<<<<<<<<<<
 * 
 *     property fields:
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_self->_bed->fields[8]) = __pyx_t_7;

  /* "pybedtools/cbedtools.pyx":364
 *             return self._bed.end - self._bed.start
 * 
 *     cpdef deparse_attrs(self):             # <<<<<<<<<<<<<<
 * 
 *         if self._attrs is None: return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.deparse_attrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_9deparse_attrs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_9deparse_attrs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deparse_attrs (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_8deparse_attrs(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_8deparse_attrs(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("deparse_attrs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools_8Interval_deparse_attrs(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.deparse_attrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":375
 * 
 *     property fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.deparse_attrs()
 *             items = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_6fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_6fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_6fields___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_6fields___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_v_items = NULL;
  std::string __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::iterator __pyx_t_2;
  std::vector<std::string>  *__pyx_t_3;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":376
 *     property fields:
 *         def __get__(self):
 *             self.deparse_attrs()             # <<<<<<<<<<<<<<
 *             items = []
 *             for i in self._bed.fields:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10pybedtools_9cbedtools_Interval *)__pyx_v_self->__pyx_vtab)->deparse_attrs(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":377
 *         def __get__(self):
 *             self.deparse_attrs()
 *             items = []             # <<<<<<<<<<<<<<
 *             for i in self._bed.fields:
 *                 if isinstance(i, int):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":378
 *             self.deparse_attrs()
 *             items = []
 *             for i in self._bed.fields:             # <<<<<<<<<<<<<<
 *                 if isinstance(i, int):
 *                     items.append(i)
 */
  __pyx_t_3 = &__pyx_v_self->_bed->fields;
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_i = __pyx_t_4;

    /* "pybedtools/cbedtools.pyx":379
 *             items = []
 *             for i in self._bed.fields:
 *                 if isinstance(i, int):             # <<<<<<<<<<<<<<
 *                     items.append(i)
 *                 else:
 */
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyInt_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pybedtools/cbedtools.pyx":380
 *             for i in self._bed.fields:
 *                 if isinstance(i, int):
 *                     items.append(i)             # <<<<<<<<<<<<<<
 *                 else:
 *                     items.append(_pystr(i))
 */
      __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_items, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pybedtools/cbedtools.pyx":379
 *             items = []
 *             for i in self._bed.fields:
 *                 if isinstance(i, int):             # <<<<<<<<<<<<<<
 *                     items.append(i)
 *                 else:
 */
      goto __pyx_L5;
    }

    /* "pybedtools/cbedtools.pyx":382
 *                     items.append(i)
 *                 else:
 *                     items.append(_pystr(i))             # <<<<<<<<<<<<<<
 *             return items
 * 
 */
    /*else*/ {
      __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_items, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "pybedtools/cbedtools.pyx":378
 *             self.deparse_attrs()
 *             items = []
 *             for i in self._bed.fields:             # <<<<<<<<<<<<<<
 *                 if isinstance(i, int):
 *                     items.append(i)
 */
  }

  /* "pybedtools/cbedtools.pyx":383
 *                 else:
 *                     items.append(_pystr(i))
 *             return items             # <<<<<<<<<<<<<<
 * 
 *     property attrs:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_items);
  __pyx_r = __pyx_v_items;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":375
 * 
 *     property fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.deparse_attrs()
 *             items = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_items);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":386
 * 
 *     property attrs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._attrs is None:
 *                 ft = _pystr(self._bed.file_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5attrs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5attrs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5attrs___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5attrs___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":387
 *     property attrs:
 *         def __get__(self):
 *             if self._attrs is None:             # <<<<<<<<<<<<<<
 *                 ft = _pystr(self._bed.file_type)
 *                 if ft == 'gff':
 */
  __pyx_t_1 = (__pyx_v_self->_attrs == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":388
 *         def __get__(self):
 *             if self._attrs is None:
 *                 ft = _pystr(self._bed.file_type)             # <<<<<<<<<<<<<<
 *                 if ft == 'gff':
 *                     self._attrs = Attributes(_pystr(self._bed.fields[8]))
 */
    __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_bed->file_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_ft = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pybedtools/cbedtools.pyx":389
 *             if self._attrs is None:
 *                 ft = _pystr(self._bed.file_type)
 *                 if ft == 'gff':             # <<<<<<<<<<<<<<
 *                     self._attrs = Attributes(_pystr(self._bed.fields[8]))
 *                 else:
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ft, __pyx_n_s_gff, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 389, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "pybedtools/cbedtools.pyx":390
 *                 ft = _pystr(self._bed.file_type)
 *                 if ft == 'gff':
 *                     self._attrs = Attributes(_pystr(self._bed.fields[8]))             # <<<<<<<<<<<<<<
 *                 else:
 *                     self._attrs = Attributes("")
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Attributes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__pystr((__pyx_v_self->_bed->fields[8])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_attrs);
      __Pyx_DECREF(__pyx_v_self->_attrs);
      __pyx_v_self->_attrs = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "pybedtools/cbedtools.pyx":389
 *             if self._attrs is None:
 *                 ft = _pystr(self._bed.file_type)
 *                 if ft == 'gff':             # <<<<<<<<<<<<<<
 *                     self._attrs = Attributes(_pystr(self._bed.fields[8]))
 *                 else:
 */
      goto __pyx_L4;
    }

    /* "pybedtools/cbedtools.pyx":392
 *                     self._attrs = Attributes(_pystr(self._bed.fields[8]))
 *                 else:
 *                     self._attrs = Attributes("")             # <<<<<<<<<<<<<<
 *             return self._attrs
 * 
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Attributes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_v_self->_attrs);
      __Pyx_DECREF(__pyx_v_self->_attrs);
      __pyx_v_self->_attrs = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __pyx_L4:;

    /* "pybedtools/cbedtools.pyx":387
 *     property attrs:
 *         def __get__(self):
 *             if self._attrs is None:             # <<<<<<<<<<<<<<
 *                 ft = _pystr(self._bed.file_type)
 *                 if ft == 'gff':
 */
  }

  /* "pybedtools/cbedtools.pyx":393
 *                 else:
 *                     self._attrs = Attributes("")
 *             return self._attrs             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, attrs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_attrs);
  __pyx_r = __pyx_v_self->_attrs;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":386
 * 
 *     property attrs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._attrs is None:
 *                 ft = _pystr(self._bed.file_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.attrs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":395
 *             return self._attrs
 * 
 *         def __set__(self, attrs):             # <<<<<<<<<<<<<<
 *             self._attrs = attrs
 * 
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_5attrs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_attrs); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_5attrs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_attrs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5attrs_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_attrs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_5attrs_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_attrs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pybedtools/cbedtools.pyx":396
 * 
 *         def __set__(self, attrs):
 *             self._attrs = attrs             # <<<<<<<<<<<<<<
 * 
 *     # TODO: make this more robust.
 */
  __Pyx_INCREF(__pyx_v_attrs);
  __Pyx_GIVEREF(__pyx_v_attrs);
  __Pyx_GOTREF(__pyx_v_self->_attrs);
  __Pyx_DECREF(__pyx_v_self->_attrs);
  __pyx_v_self->_attrs = __pyx_v_attrs;

  /* "pybedtools/cbedtools.pyx":395
 *             return self._attrs
 * 
 *         def __set__(self, attrs):             # <<<<<<<<<<<<<<
 *             self._attrs = attrs
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":400
 *     # TODO: make this more robust.
 *     @property
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return int(self.fields[-1])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5count___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5count___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":401
 *     @property
 *     def count(self):
 *         return int(self.fields[-1])             # <<<<<<<<<<<<<<
 * 
 *     property name:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":400
 *     # TODO: make this more robust.
 *     @property
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return int(self.fields[-1])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":411
 * 
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef string ftype = self._bed.file_type
 *             value = None
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_4name___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_4name___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  std::string __pyx_v_ftype;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":412
 *         """
 *         def __get__(self):
 *             cdef string ftype = self._bed.file_type             # <<<<<<<<<<<<<<
 *             value = None
 *             if ftype == <string>"gff":
 */
  __pyx_t_1 = __pyx_v_self->_bed->file_type;
  __pyx_v_ftype = __pyx_t_1;

  /* "pybedtools/cbedtools.pyx":413
 *         def __get__(self):
 *             cdef string ftype = self._bed.file_type
 *             value = None             # <<<<<<<<<<<<<<
 *             if ftype == <string>"gff":
 *                 """
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value = Py_None;

  /* "pybedtools/cbedtools.pyx":414
 *             cdef string ftype = self._bed.file_type
 *             value = None
 *             if ftype == <string>"gff":             # <<<<<<<<<<<<<<
 *                 """
 *                 # TODO. allow setting a name_key in the BedTool constructor?
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_gff); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_v_ftype == ((std::string)__pyx_t_1)) != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":420
 *                     return attrs[self.name_key]
 *                 """
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \             # <<<<<<<<<<<<<<
 *                             "gene_id", "Parent"):
 *                     if key in self.attrs:
 */
    __pyx_t_3 = __pyx_tuple__20; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_4 >= 6) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 420, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":422
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \
 *                             "gene_id", "Parent"):
 *                     if key in self.attrs:             # <<<<<<<<<<<<<<
 *                         value = self.attrs[key]
 *                         break
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_attrs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 422, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = (__pyx_t_2 != 0);
      if (__pyx_t_6) {

        /* "pybedtools/cbedtools.pyx":423
 *                             "gene_id", "Parent"):
 *                     if key in self.attrs:
 *                         value = self.attrs[key]             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_attrs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 423, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PyObject_GetItem(__pyx_t_5, __pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 423, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "pybedtools/cbedtools.pyx":424
 *                     if key in self.attrs:
 *                         value = self.attrs[key]
 *                         break             # <<<<<<<<<<<<<<
 * 
 *             elif ftype == <string>"vcf":
 */
        goto __pyx_L5_break;

        /* "pybedtools/cbedtools.pyx":422
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \
 *                             "gene_id", "Parent"):
 *                     if key in self.attrs:             # <<<<<<<<<<<<<<
 *                         value = self.attrs[key]
 *                         break
 */
      }

      /* "pybedtools/cbedtools.pyx":420
 *                     return attrs[self.name_key]
 *                 """
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \             # <<<<<<<<<<<<<<
 *                             "gene_id", "Parent"):
 *                     if key in self.attrs:
 */
    }
    __pyx_L5_break:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pybedtools/cbedtools.pyx":414
 *             cdef string ftype = self._bed.file_type
 *             value = None
 *             if ftype == <string>"gff":             # <<<<<<<<<<<<<<
 *                 """
 *                 # TODO. allow setting a name_key in the BedTool constructor?
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":426
 *                         break
 * 
 *             elif ftype == <string>"vcf":             # <<<<<<<<<<<<<<
 *                 s = self.fields[2]
 *                 if s in ("", "."):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_vcf); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_v_ftype == ((std::string)__pyx_t_1)) != 0);
  if (__pyx_t_6) {

    /* "pybedtools/cbedtools.pyx":427
 * 
 *             elif ftype == <string>"vcf":
 *                 s = self.fields[2]             # <<<<<<<<<<<<<<
 *                 if s in ("", "."):
 *                     value = "%s:%i" % (self.chrom, self.start)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fields); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_3, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_s = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":428
 *             elif ftype == <string>"vcf":
 *                 s = self.fields[2]
 *                 if s in ("", "."):             # <<<<<<<<<<<<<<
 *                     value = "%s:%i" % (self.chrom, self.start)
 *                 else:
 */
    __Pyx_INCREF(__pyx_v_s);
    __pyx_t_7 = __pyx_v_s;
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_7, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 428, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_6 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_7, __pyx_kp_s__12, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 428, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_2;
    __pyx_L8_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (__pyx_t_2) {

      /* "pybedtools/cbedtools.pyx":429
 *                 s = self.fields[2]
 *                 if s in ("", "."):
 *                     value = "%s:%i" % (self.chrom, self.start)             # <<<<<<<<<<<<<<
 *                 else:
 *                     value = _pystr(s)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chrom); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __pyx_t_7 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_i, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pybedtools/cbedtools.pyx":428
 *             elif ftype == <string>"vcf":
 *                 s = self.fields[2]
 *                 if s in ("", "."):             # <<<<<<<<<<<<<<
 *                     value = "%s:%i" % (self.chrom, self.start)
 *                 else:
 */
      goto __pyx_L7;
    }

    /* "pybedtools/cbedtools.pyx":431
 *                     value = "%s:%i" % (self.chrom, self.start)
 *                 else:
 *                     value = _pystr(s)             # <<<<<<<<<<<<<<
 *             elif ftype == <string>"bed":
 *                 value = _pystr(self._bed.name)
 */
    /*else*/ {
      __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L1_error)
      __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_3);
      __pyx_t_3 = 0;
    }
    __pyx_L7:;

    /* "pybedtools/cbedtools.pyx":426
 *                         break
 * 
 *             elif ftype == <string>"vcf":             # <<<<<<<<<<<<<<
 *                 s = self.fields[2]
 *                 if s in ("", "."):
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":432
 *                 else:
 *                     value = _pystr(s)
 *             elif ftype == <string>"bed":             # <<<<<<<<<<<<<<
 *                 value = _pystr(self._bed.name)
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_bed); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 432, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_v_ftype == ((std::string)__pyx_t_1)) != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":433
 *                     value = _pystr(s)
 *             elif ftype == <string>"bed":
 *                 value = _pystr(self._bed.name)             # <<<<<<<<<<<<<<
 * 
 *             return value
 */
    __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_bed->name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pybedtools/cbedtools.pyx":432
 *                 else:
 *                     value = _pystr(s)
 *             elif ftype == <string>"bed":             # <<<<<<<<<<<<<<
 *                 value = _pystr(self._bed.name)
 * 
 */
  }
  __pyx_L3:;

  /* "pybedtools/cbedtools.pyx":435
 *                 value = _pystr(self._bed.name)
 * 
 *             return value             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_value);
  __pyx_r = __pyx_v_value;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":411
 * 
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef string ftype = self._bed.file_type
 *             value = None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":437
 *             return value
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef string ftype = self._bed.file_type
 * 
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_4name_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_4name_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value) {
  std::string __pyx_v_ftype;
  PyObject *__pyx_v_key = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pybedtools/cbedtools.pyx":438
 * 
 *         def __set__(self, value):
 *             cdef string ftype = self._bed.file_type             # <<<<<<<<<<<<<<
 * 
 *             if ftype == <string>"gff":
 */
  __pyx_t_1 = __pyx_v_self->_bed->file_type;
  __pyx_v_ftype = __pyx_t_1;

  /* "pybedtools/cbedtools.pyx":440
 *             cdef string ftype = self._bed.file_type
 * 
 *             if ftype == <string>"gff":             # <<<<<<<<<<<<<<
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \
 *                             "gene_id", "Parent"):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_gff); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 440, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_v_ftype == ((std::string)__pyx_t_1)) != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":441
 * 
 *             if ftype == <string>"gff":
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \             # <<<<<<<<<<<<<<
 *                             "gene_id", "Parent"):
 *                     if not key in self.attrs:
 */
    __pyx_t_3 = __pyx_tuple__21; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_4 >= 6) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 441, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":443
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \
 *                             "gene_id", "Parent"):
 *                     if not key in self.attrs:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_attrs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_5, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = (__pyx_t_2 != 0);
      if (__pyx_t_6) {

        /* "pybedtools/cbedtools.pyx":444
 *                             "gene_id", "Parent"):
 *                     if not key in self.attrs:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     # If it's incoming from Python it's unicode, so store that directly
 */
        goto __pyx_L4_continue;

        /* "pybedtools/cbedtools.pyx":443
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \
 *                             "gene_id", "Parent"):
 *                     if not key in self.attrs:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
      }

      /* "pybedtools/cbedtools.pyx":449
 *                     # in the attributes (since an Attribute object works on
 *                     # unicode)...
 *                     self.attrs[key] = value             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_attrs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_v_key, __pyx_v_value) < 0)) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":450
 *                     # unicode)...
 *                     self.attrs[key] = value
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             # Otherwise use _cppstr() because we're storing it in _bed.fields.
 */
      goto __pyx_L5_break;

      /* "pybedtools/cbedtools.pyx":441
 * 
 *             if ftype == <string>"gff":
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \             # <<<<<<<<<<<<<<
 *                             "gene_id", "Parent"):
 *                     if not key in self.attrs:
 */
      __pyx_L4_continue:;
    }
    __pyx_L5_break:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pybedtools/cbedtools.pyx":440
 *             cdef string ftype = self._bed.file_type
 * 
 *             if ftype == <string>"gff":             # <<<<<<<<<<<<<<
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \
 *                             "gene_id", "Parent"):
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":453
 * 
 *             # Otherwise use _cppstr() because we're storing it in _bed.fields.
 *             elif ftype == <string>"vcf":             # <<<<<<<<<<<<<<
 *                 self._bed.fields[2] = _cppstr(value)
 *             else:
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_vcf); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_v_ftype == ((std::string)__pyx_t_1)) != 0);
  if (__pyx_t_6) {

    /* "pybedtools/cbedtools.pyx":454
 *             # Otherwise use _cppstr() because we're storing it in _bed.fields.
 *             elif ftype == <string>"vcf":
 *                 self._bed.fields[2] = _cppstr(value)             # <<<<<<<<<<<<<<
 *             else:
 *                 self._bed.name = _cppstr(value)
 */
    __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_self->_bed->fields[2]) = __pyx_t_1;

    /* "pybedtools/cbedtools.pyx":453
 * 
 *             # Otherwise use _cppstr() because we're storing it in _bed.fields.
 *             elif ftype == <string>"vcf":             # <<<<<<<<<<<<<<
 *                 self._bed.fields[2] = _cppstr(value)
 *             else:
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":456
 *                 self._bed.fields[2] = _cppstr(value)
 *             else:
 *                 self._bed.name = _cppstr(value)             # <<<<<<<<<<<<<<
 *                 self._bed.fields[3] = _cppstr(value)
 * 
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->_bed->name = __pyx_t_1;

    /* "pybedtools/cbedtools.pyx":457
 *             else:
 *                 self._bed.name = _cppstr(value)
 *                 self._bed.fields[3] = _cppstr(value)             # <<<<<<<<<<<<<<
 * 
 *     property score:
 */
    __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_self->_bed->fields[3]) = __pyx_t_1;
  }
  __pyx_L3:;

  /* "pybedtools/cbedtools.pyx":437
 *             return value
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef string ftype = self._bed.file_type
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":460
 * 
 *     property score:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.score)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5score___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5score___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":461
 *     property score:
 *         def __get__(self):
 *             return _pystr(self._bed.score)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_bed->score); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":460
 * 
 *     property score:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.score)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":463
 *             return _pystr(self._bed.score)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             value = _cppstr(value)
 *             self._bed.score = value
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_5score_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_5score_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5score_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_5score_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_idx = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);

  /* "pybedtools/cbedtools.pyx":464
 * 
 *         def __set__(self, value):
 *             value = _cppstr(value)             # <<<<<<<<<<<<<<
 *             self._bed.score = value
 *             idx = LOOKUPS[self.file_type]["score"]
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":465
 *         def __set__(self, value):
 *             value = _cppstr(value)
 *             self._bed.score = value             # <<<<<<<<<<<<<<
 *             idx = LOOKUPS[self.file_type]["score"]
 *             self._bed.fields[idx] = value
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L1_error)
  __pyx_v_self->_bed->score = __pyx_t_2;

  /* "pybedtools/cbedtools.pyx":466
 *             value = _cppstr(value)
 *             self._bed.score = value
 *             idx = LOOKUPS[self.file_type]["score"]             # <<<<<<<<<<<<<<
 *             self._bed.fields[idx] = value
 * 
 */
  if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 466, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_score); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":467
 *             self._bed.score = value
 *             idx = LOOKUPS[self.file_type]["score"]
 *             self._bed.fields[idx] = value             # <<<<<<<<<<<<<<
 * 
 *     property file_type:
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_idx); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
  (__pyx_v_self->_bed->fields[__pyx_t_4]) = __pyx_t_2;

  /* "pybedtools/cbedtools.pyx":463
 *             return _pystr(self._bed.score)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             value = _cppstr(value)
 *             self._bed.score = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.score.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":471
 *     property file_type:
 *         "bed/vcf/gff"
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.file_type)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_9file_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_9file_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_9file_type___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_9file_type___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":472
 *         "bed/vcf/gff"
 *         def __get__(self):
 *             return _pystr(self._bed.file_type)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_bed->file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":471
 *     property file_type:
 *         "bed/vcf/gff"
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.file_type)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.file_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":474
 *             return _pystr(self._bed.file_type)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._bed.file_type = _cppstr(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_9file_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_9file_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_9file_type_2__set__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_9file_type_2__set__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pybedtools/cbedtools.pyx":475
 * 
 *         def __set__(self, value):
 *             self._bed.file_type = _cppstr(value)             # <<<<<<<<<<<<<<
 * 
 *     # TODO: maybe bed.overlap_start or bed.overlap.start ??
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_bed->file_type = __pyx_t_2;

  /* "pybedtools/cbedtools.pyx":474
 *             return _pystr(self._bed.file_type)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._bed.file_type = _cppstr(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.file_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":479
 *     # TODO: maybe bed.overlap_start or bed.overlap.start ??
 *     @property
 *     def o_start(self):             # <<<<<<<<<<<<<<
 *         return self._bed.o_start
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_7o_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_7o_start_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_7o_start___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_7o_start___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":480
 *     @property
 *     def o_start(self):
 *         return self._bed.o_start             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_CHRPOS(__pyx_v_self->_bed->o_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":479
 *     # TODO: maybe bed.overlap_start or bed.overlap.start ??
 *     @property
 *     def o_start(self):             # <<<<<<<<<<<<<<
 *         return self._bed.o_start
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.o_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":483
 * 
 *     @property
 *     def o_end(self):             # <<<<<<<<<<<<<<
 *         return self._bed.o_end
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5o_end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5o_end_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5o_end___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5o_end___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":484
 *     @property
 *     def o_end(self):
 *         return self._bed.o_end             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_CHRPOS(__pyx_v_self->_bed->o_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":483
 * 
 *     @property
 *     def o_end(self):             # <<<<<<<<<<<<<<
 *         return self._bed.o_end
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.o_end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":487
 * 
 *     @property
 *     def o_amt(self):             # <<<<<<<<<<<<<<
 *         return self._bed.o_end - self._bed.o_start
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5o_amt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_5o_amt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_5o_amt___get__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_5o_amt___get__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":488
 *     @property
 *     def o_amt(self):
 *         return self._bed.o_end - self._bed.o_start             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_CHRPOS((__pyx_v_self->_bed->o_end - __pyx_v_self->_bed->o_start)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":487
 * 
 *     @property
 *     def o_amt(self):             # <<<<<<<<<<<<<<
 *         return self._bed.o_end - self._bed.o_start
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.o_amt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":490
 *         return self._bed.o_end - self._bed.o_start
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Interval objects always print with a newline to mimic a line in a
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_11__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10pybedtools_9cbedtools_8Interval_10__str__[] = "\n        Interval objects always print with a newline to mimic a line in a\n        BED/GFF/VCF file\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_10pybedtools_9cbedtools_8Interval_10__str__;
#endif
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_11__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_10__str__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_10__str__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_v_items = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pybedtools/cbedtools.pyx":495
 *         BED/GFF/VCF file
 *         """
 *         items = []             # <<<<<<<<<<<<<<
 *         for i in self.fields:
 *             if isinstance(i, int):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":496
 *         """
 *         items = []
 *         for i in self.fields:             # <<<<<<<<<<<<<<
 *             if isinstance(i, int):
 *                 i = str(i)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 496, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 496, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 496, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pybedtools/cbedtools.pyx":497
 *         items = []
 *         for i in self.fields:
 *             if isinstance(i, int):             # <<<<<<<<<<<<<<
 *                 i = str(i)
 *             items.append(i)
 */
    __pyx_t_5 = PyInt_Check(__pyx_v_i); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pybedtools/cbedtools.pyx":498
 *         for i in self.fields:
 *             if isinstance(i, int):
 *                 i = str(i)             # <<<<<<<<<<<<<<
 *             items.append(i)
 * 
 */
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i);
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "pybedtools/cbedtools.pyx":497
 *         items = []
 *         for i in self.fields:
 *             if isinstance(i, int):             # <<<<<<<<<<<<<<
 *                 i = str(i)
 *             items.append(i)
 */
    }

    /* "pybedtools/cbedtools.pyx":499
 *             if isinstance(i, int):
 *                 i = str(i)
 *             items.append(i)             # <<<<<<<<<<<<<<
 * 
 *         return '\t'.join(items) + '\n'
 */
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_items, __pyx_v_i); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 499, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":496
 *         """
 *         items = []
 *         for i in self.fields:             # <<<<<<<<<<<<<<
 *             if isinstance(i, int):
 *                 i = str(i)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":501
 *             items.append(i)
 * 
 *         return '\t'.join(items) + '\n'             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__13, __pyx_v_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__22); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":490
 *         return self._bed.o_end - self._bed.o_start
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Interval objects always print with a newline to mimic a line in a
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_items);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":503
 *         return '\t'.join(items) + '\n'
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Interval(%s:%i-%i)" % (self.chrom, self.start, self.end)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_13__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_13__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_12__repr__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_12__repr__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pybedtools/cbedtools.pyx":504
 * 
 *     def __repr__(self):
 *         return "Interval(%s:%i-%i)" % (self.chrom, self.start, self.end)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_end); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Interval_s_i_i, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":503
 *         return '\t'.join(items) + '\n'
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Interval(%s:%i-%i)" % (self.chrom, self.start, self.end)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":506
 *         return "Interval(%s:%i-%i)" % (self.chrom, self.start, self.end)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._bed
 * 
 */

/* Python wrapper */
static void __pyx_pw_10pybedtools_9cbedtools_8Interval_15__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10pybedtools_9cbedtools_8Interval_15__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10pybedtools_9cbedtools_8Interval_14__dealloc__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10pybedtools_9cbedtools_8Interval_14__dealloc__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pybedtools/cbedtools.pyx":507
 * 
 *     def __dealloc__(self):
 *         del self._bed             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  delete __pyx_v_self->_bed;

  /* "pybedtools/cbedtools.pyx":506
 *         return "Interval(%s:%i-%i)" % (self.chrom, self.start, self.end)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._bed
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pybedtools/cbedtools.pyx":509
 *         del self._bed
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._bed.end - self._bed.start
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_10pybedtools_9cbedtools_8Interval_17__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_10pybedtools_9cbedtools_8Interval_17__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_16__len__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_10pybedtools_9cbedtools_8Interval_16__len__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pybedtools/cbedtools.pyx":510
 * 
 *     def __len__(self):
 *         return self._bed.end - self._bed.start             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, object key):
 */
  __pyx_r = (__pyx_v_self->_bed->end - __pyx_v_self->_bed->start);
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":509
 *         del self._bed
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._bed.end - self._bed.start
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":512
 *         return self._bed.end - self._bed.start
 * 
 *     def __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         ftype = _pystr(self._bed.file_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_19__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_19__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_18__getitem__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_18__getitem__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_v_i;
  PyObject *__pyx_v_ftype = NULL;
  PyObject *__pyx_v_nfields = NULL;
  PyObject *__pyx_v_indices = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  __Pyx_FakeReference<std::string> __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  __Pyx_FakeReference<std::string> __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "pybedtools/cbedtools.pyx":514
 *     def __getitem__(self, object key):
 *         cdef int i
 *         ftype = _pystr(self._bed.file_type)             # <<<<<<<<<<<<<<
 * 
 *         self.deparse_attrs()
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_bed->file_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ftype = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":516
 *         ftype = _pystr(self._bed.file_type)
 * 
 *         self.deparse_attrs()             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(key, (int, long)):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10pybedtools_9cbedtools_Interval *)__pyx_v_self->__pyx_vtab)->deparse_attrs(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":518
 *         self.deparse_attrs()
 * 
 *         if isinstance(key, (int, long)):             # <<<<<<<<<<<<<<
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_key); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyLong_Check(__pyx_v_key); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pybedtools/cbedtools.pyx":519
 * 
 *         if isinstance(key, (int, long)):
 *             nfields = self._bed.fields.size()             # <<<<<<<<<<<<<<
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_bed->fields.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_nfields = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pybedtools/cbedtools.pyx":520
 *         if isinstance(key, (int, long)):
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:             # <<<<<<<<<<<<<<
 *                 raise IndexError('field index out of range')
 *             elif key < 0:
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_key, __pyx_v_nfields, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "pybedtools/cbedtools.pyx":521
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')             # <<<<<<<<<<<<<<
 *             elif key < 0:
 *                 key = nfields + key
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 521, __pyx_L1_error)

      /* "pybedtools/cbedtools.pyx":520
 *         if isinstance(key, (int, long)):
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:             # <<<<<<<<<<<<<<
 *                 raise IndexError('field index out of range')
 *             elif key < 0:
 */
    }

    /* "pybedtools/cbedtools.pyx":522
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')
 *             elif key < 0:             # <<<<<<<<<<<<<<
 *                 key = nfields + key
 *             return _pystr(self._bed.fields.at(key))
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_key, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "pybedtools/cbedtools.pyx":523
 *                 raise IndexError('field index out of range')
 *             elif key < 0:
 *                 key = nfields + key             # <<<<<<<<<<<<<<
 *             return _pystr(self._bed.fields.at(key))
 *         elif isinstance(key, slice):
 */
      __pyx_t_1 = PyNumber_Add(__pyx_v_nfields, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pybedtools/cbedtools.pyx":522
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')
 *             elif key < 0:             # <<<<<<<<<<<<<<
 *                 key = nfields + key
 *             return _pystr(self._bed.fields.at(key))
 */
    }

    /* "pybedtools/cbedtools.pyx":524
 *             elif key < 0:
 *                 key = nfields + key
 *             return _pystr(self._bed.fields.at(key))             # <<<<<<<<<<<<<<
 *         elif isinstance(key, slice):
 *             indices = key.indices(self._bed.fields.size())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_key); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    try {
      __pyx_t_6 = __pyx_v_self->_bed->fields.at(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 524, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":518
 *         self.deparse_attrs()
 * 
 *         if isinstance(key, (int, long)):             # <<<<<<<<<<<<<<
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:
 */
  }

  /* "pybedtools/cbedtools.pyx":525
 *                 key = nfields + key
 *             return _pystr(self._bed.fields.at(key))
 *         elif isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             indices = key.indices(self._bed.fields.size())
 *             return [_pystr(self._bed.fields.at(i)) for i in range(*indices)]
 */
  __pyx_t_3 = PySlice_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":526
 *             return _pystr(self._bed.fields.at(key))
 *         elif isinstance(key, slice):
 *             indices = key.indices(self._bed.fields.size())             # <<<<<<<<<<<<<<
 *             return [_pystr(self._bed.fields.at(i)) for i in range(*indices)]
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_indices); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_bed->fields.size()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_indices = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pybedtools/cbedtools.pyx":527
 *         elif isinstance(key, slice):
 *             indices = key.indices(self._bed.fields.size())
 *             return [_pystr(self._bed.fields.at(i)) for i in range(*indices)]             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(key, str):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PySequence_Tuple(__pyx_v_indices); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
      __pyx_t_7 = __pyx_t_10; __Pyx_INCREF(__pyx_t_7); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 527, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_10); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 527, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_10); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 527, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_12(__pyx_t_7);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 527, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_i = __pyx_t_13;
      try {
        __pyx_t_14 = __pyx_v_self->_bed->fields.at(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 527, __pyx_L1_error)
      }
      __pyx_t_10 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_t_14); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":525
 *                 key = nfields + key
 *             return _pystr(self._bed.fields.at(key))
 *         elif isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             indices = key.indices(self._bed.fields.size())
 *             return [_pystr(self._bed.fields.at(i)) for i in range(*indices)]
 */
  }

  /* "pybedtools/cbedtools.pyx":529
 *             return [_pystr(self._bed.fields.at(i)) for i in range(*indices)]
 * 
 *         elif isinstance(key, str):             # <<<<<<<<<<<<<<
 *             if ftype == "gff":
 *                 try:
 */
  __pyx_t_2 = PyString_Check(__pyx_v_key); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pybedtools/cbedtools.pyx":530
 * 
 *         elif isinstance(key, str):
 *             if ftype == "gff":             # <<<<<<<<<<<<<<
 *                 try:
 *                     return self.attrs[key]
 */
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_ftype, __pyx_n_s_gff, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 530, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "pybedtools/cbedtools.pyx":531
 *         elif isinstance(key, str):
 *             if ftype == "gff":
 *                 try:             # <<<<<<<<<<<<<<
 *                     return self.attrs[key]
 *                 except KeyError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        __Pyx_XGOTREF(__pyx_t_17);
        /*try:*/ {

          /* "pybedtools/cbedtools.pyx":532
 *             if ftype == "gff":
 *                 try:
 *                     return self.attrs[key]             # <<<<<<<<<<<<<<
 *                 except KeyError:
 *                     pass
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = PyObject_GetItem(__pyx_t_1, __pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 532, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_7;
          __pyx_t_7 = 0;
          goto __pyx_L14_try_return;

          /* "pybedtools/cbedtools.pyx":531
 *         elif isinstance(key, str):
 *             if ftype == "gff":
 *                 try:             # <<<<<<<<<<<<<<
 *                     return self.attrs[key]
 *                 except KeyError:
 */
        }
        __pyx_L10_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "pybedtools/cbedtools.pyx":533
 *                 try:
 *                     return self.attrs[key]
 *                 except KeyError:             # <<<<<<<<<<<<<<
 *                     pass
 *             # We don't have to convert using _pystr() because the __get__
 */
        __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
        if (__pyx_t_13) {
          __Pyx_ErrRestore(0,0,0);
          goto __pyx_L11_exception_handled;
        }
        goto __pyx_L12_except_error;
        __pyx_L12_except_error:;

        /* "pybedtools/cbedtools.pyx":531
 *         elif isinstance(key, str):
 *             if ftype == "gff":
 *                 try:             # <<<<<<<<<<<<<<
 *                     return self.attrs[key]
 *                 except KeyError:
 */
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
        goto __pyx_L1_error;
        __pyx_L14_try_return:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
        goto __pyx_L0;
        __pyx_L11_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      }

      /* "pybedtools/cbedtools.pyx":530
 * 
 *         elif isinstance(key, str):
 *             if ftype == "gff":             # <<<<<<<<<<<<<<
 *                 try:
 *                     return self.attrs[key]
 */
    }

    /* "pybedtools/cbedtools.pyx":537
 *             # We don't have to convert using _pystr() because the __get__
 *             # methods do that already.
 *             return getattr(self, key)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, object key, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __Pyx_GetAttr(((PyObject *)__pyx_v_self), __pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":529
 *             return [_pystr(self._bed.fields.at(i)) for i in range(*indices)]
 * 
 *         elif isinstance(key, str):             # <<<<<<<<<<<<<<
 *             if ftype == "gff":
 *                 try:
 */
  }

  /* "pybedtools/cbedtools.pyx":512
 *         return self._bed.end - self._bed.start
 * 
 *     def __getitem__(self, object key):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         ftype = _pystr(self._bed.file_type)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ftype);
  __Pyx_XDECREF(__pyx_v_nfields);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":539
 *             return getattr(self, key)
 * 
 *     def __setitem__(self, object key, object value):             # <<<<<<<<<<<<<<
 *         if isinstance(key, (int, long)):
 *             nfields = self._bed.fields.size()
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_21__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_21__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_20__setitem__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_20__setitem__(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_nfields = NULL;
  PyObject *__pyx_v_ft = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "pybedtools/cbedtools.pyx":540
 * 
 *     def __setitem__(self, object key, object value):
 *         if isinstance(key, (int, long)):             # <<<<<<<<<<<<<<
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_key); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":541
 *     def __setitem__(self, object key, object value):
 *         if isinstance(key, (int, long)):
 *             nfields = self._bed.fields.size()             # <<<<<<<<<<<<<<
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')
 */
    __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_bed->fields.size()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_nfields = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pybedtools/cbedtools.pyx":542
 *         if isinstance(key, (int, long)):
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:             # <<<<<<<<<<<<<<
 *                 raise IndexError('field index out of range')
 *             elif key < 0:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_key, __pyx_v_nfields, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "pybedtools/cbedtools.pyx":543
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')             # <<<<<<<<<<<<<<
 *             elif key < 0:
 *                 key = nfields + key
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 543, __pyx_L1_error)

      /* "pybedtools/cbedtools.pyx":542
 *         if isinstance(key, (int, long)):
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:             # <<<<<<<<<<<<<<
 *                 raise IndexError('field index out of range')
 *             elif key < 0:
 */
    }

    /* "pybedtools/cbedtools.pyx":544
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')
 *             elif key < 0:             # <<<<<<<<<<<<<<
 *                 key = nfields + key
 *             self._bed.fields[key] = _cppstr(value)
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_key, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "pybedtools/cbedtools.pyx":545
 *                 raise IndexError('field index out of range')
 *             elif key < 0:
 *                 key = nfields + key             # <<<<<<<<<<<<<<
 *             self._bed.fields[key] = _cppstr(value)
 * 
 */
      __pyx_t_4 = PyNumber_Add(__pyx_v_nfields, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pybedtools/cbedtools.pyx":544
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')
 *             elif key < 0:             # <<<<<<<<<<<<<<
 *                 key = nfields + key
 *             self._bed.fields[key] = _cppstr(value)
 */
    }

    /* "pybedtools/cbedtools.pyx":546
 *             elif key < 0:
 *                 key = nfields + key
 *             self._bed.fields[key] = _cppstr(value)             # <<<<<<<<<<<<<<
 * 
 *             ft = _pystr(self._bed.file_type)
 */
    __pyx_t_4 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_key); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L1_error)
    (__pyx_v_self->_bed->fields[__pyx_t_6]) = __pyx_t_5;

    /* "pybedtools/cbedtools.pyx":548
 *             self._bed.fields[key] = _cppstr(value)
 * 
 *             ft = _pystr(self._bed.file_type)             # <<<<<<<<<<<<<<
 *             if key in LOOKUPS[ft]:
 *                 setattr(self, LOOKUPS[ft][key], value)
 */
    __pyx_t_4 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_bed->file_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_ft = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pybedtools/cbedtools.pyx":549
 * 
 *             ft = _pystr(self._bed.file_type)
 *             if key in LOOKUPS[ft]:             # <<<<<<<<<<<<<<
 *                 setattr(self, LOOKUPS[ft][key], value)
 * 
 */
    if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 549, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, __pyx_v_ft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pybedtools/cbedtools.pyx":550
 *             ft = _pystr(self._bed.file_type)
 *             if key in LOOKUPS[ft]:
 *                 setattr(self, LOOKUPS[ft][key], value)             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(key, (basestring)):
 */
      if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 550, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, __pyx_v_ft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_4, __pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_t_7, __pyx_v_value); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pybedtools/cbedtools.pyx":549
 * 
 *             ft = _pystr(self._bed.file_type)
 *             if key in LOOKUPS[ft]:             # <<<<<<<<<<<<<<
 *                 setattr(self, LOOKUPS[ft][key], value)
 * 
 */
    }

    /* "pybedtools/cbedtools.pyx":540
 * 
 *     def __setitem__(self, object key, object value):
 *         if isinstance(key, (int, long)):             # <<<<<<<<<<<<<<
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":552
 *                 setattr(self, LOOKUPS[ft][key], value)
 * 
 *         elif isinstance(key, (basestring)):             # <<<<<<<<<<<<<<
 *             setattr(self, key, value)
 * 
 */
  __pyx_t_1 = __Pyx_PyBaseString_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":553
 * 
 *         elif isinstance(key, (basestring)):
 *             setattr(self, key, value)             # <<<<<<<<<<<<<<
 * 
 *     cpdef append(self, object value):
 */
    __pyx_t_8 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 553, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":552
 *                 setattr(self, LOOKUPS[ft][key], value)
 * 
 *         elif isinstance(key, (basestring)):             # <<<<<<<<<<<<<<
 *             setattr(self, key, value)
 * 
 */
  }
  __pyx_L3:;

  /* "pybedtools/cbedtools.pyx":539
 *             return getattr(self, key)
 * 
 *     def __setitem__(self, object key, object value):             # <<<<<<<<<<<<<<
 *         if isinstance(key, (int, long)):
 *             nfields = self._bed.fields.size()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nfields);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":555
 *             setattr(self, key, value)
 * 
 *     cpdef append(self, object value):             # <<<<<<<<<<<<<<
 *         self._bed.fields.push_back(_cppstr(value))
 * 
 */

static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_23append(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_10pybedtools_9cbedtools_8Interval_append(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  __Pyx_RefNannySetupContext("append", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_8Interval_23append)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_value);
        __Pyx_GIVEREF(__pyx_v_value);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_value);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pybedtools/cbedtools.pyx":556
 * 
 *     cpdef append(self, object value):
 *         self._bed.fields.push_back(_cppstr(value))             # <<<<<<<<<<<<<<
 * 
 *     def __nonzero__(self):
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->_bed->fields.push_back(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 556, __pyx_L1_error)
  }

  /* "pybedtools/cbedtools.pyx":555
 *             setattr(self, key, value)
 * 
 *     cpdef append(self, object value):             # <<<<<<<<<<<<<<
 *         self._bed.fields.push_back(_cppstr(value))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_23append(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_8Interval_23append(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_22append(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_8Interval_22append(struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("append", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools_8Interval_append(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.Interval.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":558
 *         self._bed.fields.push_back(_cppstr(value))
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_25__nonzero__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_25__nonzero__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_24__nonzero__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_24__nonzero__(CYTHON_UNUSED struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__", 0);

  /* "pybedtools/cbedtools.pyx":559
 * 
 *     def __nonzero__(self):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def __nonzero__(self):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":558
 *         self._bed.fields.push_back(_cppstr(value))
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":561
 *         return True
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_27__nonzero__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_8Interval_27__nonzero__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_8Interval_26__nonzero__(((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_8Interval_26__nonzero__(CYTHON_UNUSED struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__", 0);

  /* "pybedtools/cbedtools.pyx":562
 * 
 *     def __nonzero__(self):
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":561
 *         return True
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":565
 * 
 * 
 * cdef Interval create_interval(BED b):             # <<<<<<<<<<<<<<
 *     cdef Interval pyb = Interval.__new__(Interval)
 *     pyb._bed = new BED(b.chrom, b.start, b.end, b.name,
 */

static struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_f_10pybedtools_9cbedtools_create_interval(BED __pyx_v_b) {
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_pyb = 0;
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string>  __pyx_t_2;
  __Pyx_RefNannySetupContext("create_interval", 0);

  /* "pybedtools/cbedtools.pyx":566
 * 
 * cdef Interval create_interval(BED b):
 *     cdef Interval pyb = Interval.__new__(Interval)             # <<<<<<<<<<<<<<
 *     pyb._bed = new BED(b.chrom, b.start, b.end, b.name,
 *                        b.score, b.strand, b.fields,
 */
  __pyx_t_1 = __pyx_tp_new_10pybedtools_9cbedtools_Interval(((PyTypeObject *)__pyx_ptype_10pybedtools_9cbedtools_Interval), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10pybedtools_9cbedtools_Interval)))) __PYX_ERR(0, 566, __pyx_L1_error)
  __pyx_v_pyb = ((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":567
 * cdef Interval create_interval(BED b):
 *     cdef Interval pyb = Interval.__new__(Interval)
 *     pyb._bed = new BED(b.chrom, b.start, b.end, b.name,             # <<<<<<<<<<<<<<
 *                        b.score, b.strand, b.fields,
 *                        b.o_start, b.o_end, b.bedType, b.file_type, b.status)
 */
  __pyx_v_pyb->_bed = new BED(__pyx_v_b.chrom, __pyx_v_b.start, __pyx_v_b.end, __pyx_v_b.name, __pyx_v_b.score, __pyx_v_b.strand, __pyx_v_b.fields, __pyx_v_b.o_start, __pyx_v_b.o_end, __pyx_v_b.bedType, __pyx_v_b.file_type, __pyx_v_b.status);

  /* "pybedtools/cbedtools.pyx":570
 *                        b.score, b.strand, b.fields,
 *                        b.o_start, b.o_end, b.bedType, b.file_type, b.status)
 *     pyb._bed.fields = b.fields             # <<<<<<<<<<<<<<
 *     return pyb
 * 
 */
  __pyx_t_2 = __pyx_v_b.fields;
  __pyx_v_pyb->_bed->fields = __pyx_t_2;

  /* "pybedtools/cbedtools.pyx":571
 *                        b.o_start, b.o_end, b.bedType, b.file_type, b.status)
 *     pyb._bed.fields = b.fields
 *     return pyb             # <<<<<<<<<<<<<<
 * 
 * # TODO: optimization: Previously we had (fields[1] + fields[2]).isdigit() when
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_pyb));
  __pyx_r = __pyx_v_pyb;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":565
 * 
 * 
 * cdef Interval create_interval(BED b):             # <<<<<<<<<<<<<<
 *     cdef Interval pyb = Interval.__new__(Interval)
 *     pyb._bed = new BED(b.chrom, b.start, b.end, b.name,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.create_interval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyb);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":576
 * # checking in create_interval_from_list for filetype heuruistics. Is there
 * # a performance hit by checking instances?
 * cdef isdigit(s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, integer_types):
 *         return True
 */

static PyObject *__pyx_f_10pybedtools_9cbedtools_isdigit(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("isdigit", 0);

  /* "pybedtools/cbedtools.pyx":577
 * # a performance hit by checking instances?
 * cdef isdigit(s):
 *     if isinstance(s, integer_types):             # <<<<<<<<<<<<<<
 *         return True
 *     return s.isdigit()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_integer_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_s, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pybedtools/cbedtools.pyx":578
 * cdef isdigit(s):
 *     if isinstance(s, integer_types):
 *         return True             # <<<<<<<<<<<<<<
 *     return s.isdigit()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":577
 * # a performance hit by checking instances?
 * cdef isdigit(s):
 *     if isinstance(s, integer_types):             # <<<<<<<<<<<<<<
 *         return True
 *     return s.isdigit()
 */
  }

  /* "pybedtools/cbedtools.pyx":579
 *     if isinstance(s, integer_types):
 *         return True
 *     return s.isdigit()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_isdigit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":576
 * # checking in create_interval_from_list for filetype heuruistics. Is there
 * # a performance hit by checking instances?
 * cdef isdigit(s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, integer_types):
 *         return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pybedtools.cbedtools.isdigit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":582
 * 
 * 
 * cpdef Interval create_interval_from_list(list fields):             # <<<<<<<<<<<<<<
 *     """
 *     Create an Interval object from a list of strings.
 */

static PyObject *__pyx_pw_10pybedtools_9cbedtools_1create_interval_from_list(PyObject *__pyx_self, PyObject *__pyx_v_fields); /*proto*/
static struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_f_10pybedtools_9cbedtools_create_interval_from_list(PyObject *__pyx_v_fields, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_pyb = 0;
  PyObject *__pyx_v_orig_fields = NULL;
  PyObject *__pyx_v_chrom = NULL;
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_stop = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_score = NULL;
  PyObject *__pyx_v_strand = NULL;
  PyObject *__pyx_v_other_fields = NULL;
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  std::string __pyx_t_8;
  CHRPOS __pyx_t_9;
  CHRPOS __pyx_t_10;
  std::string __pyx_t_11;
  std::string __pyx_t_12;
  std::string __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("create_interval_from_list", 0);

  /* "pybedtools/cbedtools.pyx":607
 * 
 *     """
 *     cdef Interval pyb = Interval.__new__(Interval)             # <<<<<<<<<<<<<<
 *     orig_fields = fields[:]
 *     # BED -- though a VCF will be detected as BED if its 2nd field, id, is a
 */
  __pyx_t_1 = __pyx_tp_new_10pybedtools_9cbedtools_Interval(((PyTypeObject *)__pyx_ptype_10pybedtools_9cbedtools_Interval), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10pybedtools_9cbedtools_Interval)))) __PYX_ERR(0, 607, __pyx_L1_error)
  __pyx_v_pyb = ((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":608
 *     """
 *     cdef Interval pyb = Interval.__new__(Interval)
 *     orig_fields = fields[:]             # <<<<<<<<<<<<<<
 *     # BED -- though a VCF will be detected as BED if its 2nd field, id, is a
 *     # digit
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 608, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_v_fields, 0, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_orig_fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":614
 *     # SAM
 *     if (
 *         (len(fields) >= 11)             # <<<<<<<<<<<<<<
 *         and isdigit(fields[1])
 *         and isdigit(fields[3])
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 614, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_fields); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 >= 11) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pybedtools/cbedtools.pyx":615
 *     if (
 *         (len(fields) >= 11)
 *         and isdigit(fields[1])             # <<<<<<<<<<<<<<
 *         and isdigit(fields[3])
 *         and (fields[5] not in ['.', '+', '-'])
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 615, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools_isdigit(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pybedtools/cbedtools.pyx":616
 *         (len(fields) >= 11)
 *         and isdigit(fields[1])
 *         and isdigit(fields[3])             # <<<<<<<<<<<<<<
 *         and (fields[5] not in ['.', '+', '-'])
 *     ):
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 616, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools_isdigit(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pybedtools/cbedtools.pyx":617
 *         and isdigit(fields[1])
 *         and isdigit(fields[3])
 *         and (fields[5] not in ['.', '+', '-'])             # <<<<<<<<<<<<<<
 *     ):
 *         # TODO: what should the stop position be?  Here, it's just the start
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 617, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_fields, 5, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__12, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 617, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__25, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 617, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__26, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 617, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_6;
  __pyx_L8_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;

  /* "pybedtools/cbedtools.pyx":613
 * 
 *     # SAM
 *     if (             # <<<<<<<<<<<<<<
 *         (len(fields) >= 11)
 *         and isdigit(fields[1])
 */
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":622
 *         # plus the length of the sequence, but perhaps this should eventually
 *         # do CIGAR string parsing.
 *         if int(fields[1]) & 0x04:             # <<<<<<<<<<<<<<
 *             # handle unmapped reads
 *             chrom = _cppstr("*")
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 622, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_4, 0x04, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "pybedtools/cbedtools.pyx":624
 *         if int(fields[1]) & 0x04:
 *             # handle unmapped reads
 *             chrom = _cppstr("*")             # <<<<<<<<<<<<<<
 *             start = 0
 *             stop = 0
 */
      __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_kp_s__27); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_chrom = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "pybedtools/cbedtools.pyx":625
 *             # handle unmapped reads
 *             chrom = _cppstr("*")
 *             start = 0             # <<<<<<<<<<<<<<
 *             stop = 0
 *         else:
 */
      __Pyx_INCREF(__pyx_int_0);
      __pyx_v_start = __pyx_int_0;

      /* "pybedtools/cbedtools.pyx":626
 *             chrom = _cppstr("*")
 *             start = 0
 *             stop = 0             # <<<<<<<<<<<<<<
 *         else:
 *             chrom = _cppstr(fields[2])
 */
      __Pyx_INCREF(__pyx_int_0);
      __pyx_v_stop = __pyx_int_0;

      /* "pybedtools/cbedtools.pyx":622
 *         # plus the length of the sequence, but perhaps this should eventually
 *         # do CIGAR string parsing.
 *         if int(fields[1]) & 0x04:             # <<<<<<<<<<<<<<
 *             # handle unmapped reads
 *             chrom = _cppstr("*")
 */
      goto __pyx_L11;
    }

    /* "pybedtools/cbedtools.pyx":628
 *             stop = 0
 *         else:
 *             chrom = _cppstr(fields[2])             # <<<<<<<<<<<<<<
 *             start = int(fields[3]) - 1
 *             stop = int(fields[3]) + len(fields[9]) - 1
 */
    /*else*/ {
      if (unlikely(__pyx_v_fields == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 628, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_fields, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_chrom = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":629
 *         else:
 *             chrom = _cppstr(fields[2])
 *             start = int(fields[3]) - 1             # <<<<<<<<<<<<<<
 *             stop = int(fields[3]) + len(fields[9]) - 1
 *         name = _cppstr(fields[0])
 */
      if (unlikely(__pyx_v_fields == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 629, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_start = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":630
 *             chrom = _cppstr(fields[2])
 *             start = int(fields[3]) - 1
 *             stop = int(fields[3]) + len(fields[9]) - 1             # <<<<<<<<<<<<<<
 *         name = _cppstr(fields[0])
 *         score = _cppstr(fields[1])
 */
      if (unlikely(__pyx_v_fields == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 630, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__pyx_v_fields == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 630, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 9, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_stop = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __pyx_L11:;

    /* "pybedtools/cbedtools.pyx":631
 *             start = int(fields[3]) - 1
 *             stop = int(fields[3]) + len(fields[9]) - 1
 *         name = _cppstr(fields[0])             # <<<<<<<<<<<<<<
 *         score = _cppstr(fields[1])
 *         if int(fields[1]) & 0x10:
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 631, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_name = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":632
 *             stop = int(fields[3]) + len(fields[9]) - 1
 *         name = _cppstr(fields[0])
 *         score = _cppstr(fields[1])             # <<<<<<<<<<<<<<
 *         if int(fields[1]) & 0x10:
 *             strand = _cppstr('-')
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 632, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_score = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":633
 *         name = _cppstr(fields[0])
 *         score = _cppstr(fields[1])
 *         if int(fields[1]) & 0x10:             # <<<<<<<<<<<<<<
 *             strand = _cppstr('-')
 *         else:
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 633, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_16, 0x10, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "pybedtools/cbedtools.pyx":634
 *         score = _cppstr(fields[1])
 *         if int(fields[1]) & 0x10:
 *             strand = _cppstr('-')             # <<<<<<<<<<<<<<
 *         else:
 *             strand = _cppstr('+')
 */
      __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_kp_s__26); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_v_strand = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":633
 *         name = _cppstr(fields[0])
 *         score = _cppstr(fields[1])
 *         if int(fields[1]) & 0x10:             # <<<<<<<<<<<<<<
 *             strand = _cppstr('-')
 *         else:
 */
      goto __pyx_L12;
    }

    /* "pybedtools/cbedtools.pyx":636
 *             strand = _cppstr('-')
 *         else:
 *             strand = _cppstr('+')             # <<<<<<<<<<<<<<
 * 
 *         # Fields is in SAM format
 */
    /*else*/ {
      __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_kp_s__25); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_v_strand = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __pyx_L12:;

    /* "pybedtools/cbedtools.pyx":639
 * 
 *         # Fields is in SAM format
 *         fields[3] = str(start + 1)             # <<<<<<<<<<<<<<
 * 
 *         pyb._bed = new BED(
 */
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_start, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 639, __pyx_L1_error)
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_v_fields, 3, __pyx_t_5, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":642
 * 
 *         pyb._bed = new BED(
 *             chrom,             # <<<<<<<<<<<<<<
 *             start,
 *             stop,
 */
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_chrom); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 642, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":643
 *         pyb._bed = new BED(
 *             chrom,
 *             start,             # <<<<<<<<<<<<<<
 *             stop,
 *             strand,
 */
    __pyx_t_9 = __Pyx_PyInt_As_CHRPOS(__pyx_v_start); if (unlikely((__pyx_t_9 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":644
 *             chrom,
 *             start,
 *             stop,             # <<<<<<<<<<<<<<
 *             strand,
 *             name,
 */
    __pyx_t_10 = __Pyx_PyInt_As_CHRPOS(__pyx_v_stop); if (unlikely((__pyx_t_10 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 644, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":645
 *             start,
 *             stop,
 *             strand,             # <<<<<<<<<<<<<<
 *             name,
 *             score,
 */
    __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_strand); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":646
 *             stop,
 *             strand,
 *             name,             # <<<<<<<<<<<<<<
 *             score,
 *             list_to_vector(fields))
 */
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":647
 *             strand,
 *             name,
 *             score,             # <<<<<<<<<<<<<<
 *             list_to_vector(fields))
 *         pyb.file_type = _cppstr('sam')
 */
    __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_score); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":641
 *         fields[3] = str(start + 1)
 * 
 *         pyb._bed = new BED(             # <<<<<<<<<<<<<<
 *             chrom,
 *             start,
 */
    __pyx_v_pyb->_bed = new BED(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_f_10pybedtools_9cbedtools_list_to_vector(__pyx_v_fields));

    /* "pybedtools/cbedtools.pyx":649
 *             score,
 *             list_to_vector(fields))
 *         pyb.file_type = _cppstr('sam')             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_n_s_sam); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_pyb), __pyx_n_s_file_type, __pyx_t_5) < 0) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":613
 * 
 *     # SAM
 *     if (             # <<<<<<<<<<<<<<
 *         (len(fields) >= 11)
 *         and isdigit(fields[1])
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":652
 * 
 * 
 *     elif isdigit(fields[1]) and isdigit(fields[2]):             # <<<<<<<<<<<<<<
 *         # if it's too short, just add some empty fields.
 *         if len(fields) < 7:
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 652, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools_isdigit(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L13_bool_binop_done;
  }
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 652, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools_isdigit(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":654
 *     elif isdigit(fields[1]) and isdigit(fields[2]):
 *         # if it's too short, just add some empty fields.
 *         if len(fields) < 7:             # <<<<<<<<<<<<<<
 *             fields.extend([".".encode('UTF-8')] * (6 - len(fields)))
 *             other_fields = []
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 654, __pyx_L1_error)
    }
    __pyx_t_3 = PyList_GET_SIZE(__pyx_v_fields); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 654, __pyx_L1_error)
    __pyx_t_2 = ((__pyx_t_3 < 7) != 0);
    if (__pyx_t_2) {

      /* "pybedtools/cbedtools.pyx":655
 *         # if it's too short, just add some empty fields.
 *         if len(fields) < 7:
 *             fields.extend([".".encode('UTF-8')] * (6 - len(fields)))             # <<<<<<<<<<<<<<
 *             other_fields = []
 *         else:
 */
      if (unlikely(__pyx_v_fields == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "extend");
        __PYX_ERR(0, 655, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__12, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__pyx_v_fields == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 655, __pyx_L1_error)
      }
      __pyx_t_3 = PyList_GET_SIZE(__pyx_v_fields); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 655, __pyx_L1_error)
      __pyx_t_5 = PyList_New(1 * (((6 - __pyx_t_3)<0) ? 0:(6 - __pyx_t_3))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      { Py_ssize_t __pyx_temp;
        for (__pyx_temp=0; __pyx_temp < (6 - __pyx_t_3); __pyx_temp++) {
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyList_SET_ITEM(__pyx_t_5, __pyx_temp, __pyx_t_7);
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_14 = __Pyx_PyList_Extend(__pyx_v_fields, __pyx_t_5); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":656
 *         if len(fields) < 7:
 *             fields.extend([".".encode('UTF-8')] * (6 - len(fields)))
 *             other_fields = []             # <<<<<<<<<<<<<<
 *         else:
 *             other_fields = fields[6:]
 */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_v_other_fields = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":654
 *     elif isdigit(fields[1]) and isdigit(fields[2]):
 *         # if it's too short, just add some empty fields.
 *         if len(fields) < 7:             # <<<<<<<<<<<<<<
 *             fields.extend([".".encode('UTF-8')] * (6 - len(fields)))
 *             other_fields = []
 */
      goto __pyx_L15;
    }

    /* "pybedtools/cbedtools.pyx":658
 *             other_fields = []
 *         else:
 *             other_fields = fields[6:]             # <<<<<<<<<<<<<<
 * 
 *         pyb._bed = new BED(
 */
    /*else*/ {
      if (unlikely(__pyx_v_fields == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 658, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyList_GetSlice(__pyx_v_fields, 6, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_v_other_fields = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;
    }
    __pyx_L15:;

    /* "pybedtools/cbedtools.pyx":661
 * 
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),             # <<<<<<<<<<<<<<
 *             int(fields[1]),
 *             int(fields[2]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 661, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":662
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),
 *             int(fields[1]),             # <<<<<<<<<<<<<<
 *             int(fields[2]),
 *             _cppstr(fields[3]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 662, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_CHRPOS(__pyx_t_5); if (unlikely((__pyx_t_10 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":663
 *             _cppstr(fields[0]),
 *             int(fields[1]),
 *             int(fields[2]),             # <<<<<<<<<<<<<<
 *             _cppstr(fields[3]),
 *             _cppstr(fields[4]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 663, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_CHRPOS(__pyx_t_7); if (unlikely((__pyx_t_9 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":664
 *             int(fields[1]),
 *             int(fields[2]),
 *             _cppstr(fields[3]),             # <<<<<<<<<<<<<<
 *             _cppstr(fields[4]),
 *             _cppstr(fields[5]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 664, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":665
 *             int(fields[2]),
 *             _cppstr(fields[3]),
 *             _cppstr(fields[4]),             # <<<<<<<<<<<<<<
 *             _cppstr(fields[5]),
 *             list_to_vector(other_fields))
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 665, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 4, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":666
 *             _cppstr(fields[3]),
 *             _cppstr(fields[4]),
 *             _cppstr(fields[5]),             # <<<<<<<<<<<<<<
 *             list_to_vector(other_fields))
 *         pyb.file_type = _cppstr('bed')
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 666, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 5, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":660
 *             other_fields = fields[6:]
 * 
 *         pyb._bed = new BED(             # <<<<<<<<<<<<<<
 *             _cppstr(fields[0]),
 *             int(fields[1]),
 */
    __pyx_v_pyb->_bed = new BED(__pyx_t_13, __pyx_t_10, __pyx_t_9, __pyx_t_12, __pyx_t_11, __pyx_t_8, __pyx_f_10pybedtools_9cbedtools_list_to_vector(__pyx_v_other_fields));

    /* "pybedtools/cbedtools.pyx":668
 *             _cppstr(fields[5]),
 *             list_to_vector(other_fields))
 *         pyb.file_type = _cppstr('bed')             # <<<<<<<<<<<<<<
 * 
 *     # VCF
 */
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_n_s_bed); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_pyb), __pyx_n_s_file_type, __pyx_t_5) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":652
 * 
 * 
 *     elif isdigit(fields[1]) and isdigit(fields[2]):             # <<<<<<<<<<<<<<
 *         # if it's too short, just add some empty fields.
 *         if len(fields) < 7:
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":671
 * 
 *     # VCF
 *     elif isdigit(fields[1]) and not isdigit(fields[3]) and len(fields) >= 8:             # <<<<<<<<<<<<<<
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 671, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools_isdigit(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L16_bool_binop_done;
  }
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 671, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools_isdigit(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = ((!__pyx_t_6) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L16_bool_binop_done;
  }
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 671, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_fields); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 671, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 >= 8) != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":673
 *     elif isdigit(fields[1]) and not isdigit(fields[3]) and len(fields) >= 8:
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),             # <<<<<<<<<<<<<<
 *             int(fields[1]),
 *             int(fields[1]) + 1,
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 673, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":674
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),
 *             int(fields[1]),             # <<<<<<<<<<<<<<
 *             int(fields[1]) + 1,
 *             _cppstr(fields[2]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 674, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_CHRPOS(__pyx_t_5); if (unlikely((__pyx_t_9 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":675
 *             _cppstr(fields[0]),
 *             int(fields[1]),
 *             int(fields[1]) + 1,             # <<<<<<<<<<<<<<
 *             _cppstr(fields[2]),
 *             _cppstr(fields[5]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 675, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_CHRPOS(__pyx_t_5); if (unlikely((__pyx_t_10 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":676
 *             int(fields[1]),
 *             int(fields[1]) + 1,
 *             _cppstr(fields[2]),             # <<<<<<<<<<<<<<
 *             _cppstr(fields[5]),
 *             _cppstr('.'),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 676, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":677
 *             int(fields[1]) + 1,
 *             _cppstr(fields[2]),
 *             _cppstr(fields[5]),             # <<<<<<<<<<<<<<
 *             _cppstr('.'),
 *             list_to_vector(fields))
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 677, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 5, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":678
 *             _cppstr(fields[2]),
 *             _cppstr(fields[5]),
 *             _cppstr('.'),             # <<<<<<<<<<<<<<
 *             list_to_vector(fields))
 *         pyb.file_type = b'vcf'
 */
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_kp_s__12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":672
 *     # VCF
 *     elif isdigit(fields[1]) and not isdigit(fields[3]) and len(fields) >= 8:
 *         pyb._bed = new BED(             # <<<<<<<<<<<<<<
 *             _cppstr(fields[0]),
 *             int(fields[1]),
 */
    __pyx_v_pyb->_bed = new BED(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_f_10pybedtools_9cbedtools_list_to_vector(__pyx_v_fields));

    /* "pybedtools/cbedtools.pyx":680
 *             _cppstr('.'),
 *             list_to_vector(fields))
 *         pyb.file_type = b'vcf'             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_pyb), __pyx_n_s_file_type, __pyx_n_b_vcf) < 0) __PYX_ERR(0, 680, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":671
 * 
 *     # VCF
 *     elif isdigit(fields[1]) and not isdigit(fields[3]) and len(fields) >= 8:             # <<<<<<<<<<<<<<
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":684
 * 
 *     # GFF
 *     elif len(fields) >= 9 and isdigit(fields[3]) and isdigit(fields[4]):             # <<<<<<<<<<<<<<
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 684, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_fields); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 >= 9) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L19_bool_binop_done;
  }
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 684, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools_isdigit(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L19_bool_binop_done;
  }
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 684, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 4, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools_isdigit(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_4;
  __pyx_L19_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":686
 *     elif len(fields) >= 9 and isdigit(fields[3]) and isdigit(fields[4]):
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),             # <<<<<<<<<<<<<<
 *             int(fields[3])-1, int(fields[4]),
 *             _cppstr(fields[2]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 686, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":687
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),
 *             int(fields[3])-1, int(fields[4]),             # <<<<<<<<<<<<<<
 *             _cppstr(fields[2]),
 *             _cppstr(fields[5]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 687, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_CHRPOS(__pyx_t_7); if (unlikely((__pyx_t_10 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 687, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 4, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_CHRPOS(__pyx_t_5); if (unlikely((__pyx_t_9 == (CHRPOS)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":688
 *             _cppstr(fields[0]),
 *             int(fields[3])-1, int(fields[4]),
 *             _cppstr(fields[2]),             # <<<<<<<<<<<<<<
 *             _cppstr(fields[5]),
 *             _cppstr(fields[6]),
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 688, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":689
 *             int(fields[3])-1, int(fields[4]),
 *             _cppstr(fields[2]),
 *             _cppstr(fields[5]),             # <<<<<<<<<<<<<<
 *             _cppstr(fields[6]),
 *             list_to_vector(fields[7:]))
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 689, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fields, 5, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pybedtools/cbedtools.pyx":690
 *             _cppstr(fields[2]),
 *             _cppstr(fields[5]),
 *             _cppstr(fields[6]),             # <<<<<<<<<<<<<<
 *             list_to_vector(fields[7:]))
 *         pyb.file_type = _cppstr('gff')
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 690, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_fields, 6, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":691
 *             _cppstr(fields[5]),
 *             _cppstr(fields[6]),
 *             list_to_vector(fields[7:]))             # <<<<<<<<<<<<<<
 *         pyb.file_type = _cppstr('gff')
 *     else:
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 691, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyList_GetSlice(__pyx_v_fields, 7, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "pybedtools/cbedtools.pyx":685
 *     # GFF
 *     elif len(fields) >= 9 and isdigit(fields[3]) and isdigit(fields[4]):
 *         pyb._bed = new BED(             # <<<<<<<<<<<<<<
 *             _cppstr(fields[0]),
 *             int(fields[3])-1, int(fields[4]),
 */
    __pyx_v_pyb->_bed = new BED(__pyx_t_13, __pyx_t_10, __pyx_t_9, __pyx_t_12, __pyx_t_11, __pyx_t_8, __pyx_f_10pybedtools_9cbedtools_list_to_vector(((PyObject*)__pyx_t_7)));
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":692
 *             _cppstr(fields[6]),
 *             list_to_vector(fields[7:]))
 *         pyb.file_type = _cppstr('gff')             # <<<<<<<<<<<<<<
 *     else:
 *         raise MalformedBedLineError('Unable to detect format from %s' % fields)
 */
    __pyx_t_7 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_n_s_gff); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_pyb), __pyx_n_s_file_type, __pyx_t_7) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pybedtools/cbedtools.pyx":684
 * 
 *     # GFF
 *     elif len(fields) >= 9 and isdigit(fields[3]) and isdigit(fields[4]):             # <<<<<<<<<<<<<<
 *         pyb._bed = new BED(
 *             _cppstr(fields[0]),
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":694
 *         pyb.file_type = _cppstr('gff')
 *     else:
 *         raise MalformedBedLineError('Unable to detect format from %s' % fields)             # <<<<<<<<<<<<<<
 * 
 *     if pyb.start > pyb.end:
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_MalformedBedLineError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Unable_to_detect_format_from_s, __pyx_v_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_15) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 694, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else {
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_16, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 694, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pybedtools/cbedtools.pyx":696
 *         raise MalformedBedLineError('Unable to detect format from %s' % fields)
 * 
 *     if pyb.start > pyb.end:             # <<<<<<<<<<<<<<
 *         raise MalformedBedLineError("Start is greater than stop")
 *     pyb._bed.fields = list_to_vector(orig_fields)
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pyb), __pyx_n_s_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pyb), __pyx_n_s_end); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = PyObject_RichCompare(__pyx_t_7, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (__pyx_t_2) {

    /* "pybedtools/cbedtools.pyx":697
 * 
 *     if pyb.start > pyb.end:
 *         raise MalformedBedLineError("Start is greater than stop")             # <<<<<<<<<<<<<<
 *     pyb._bed.fields = list_to_vector(orig_fields)
 *     return pyb
 */
    __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_MalformedBedLineError); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 697, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":696
 *         raise MalformedBedLineError('Unable to detect format from %s' % fields)
 * 
 *     if pyb.start > pyb.end:             # <<<<<<<<<<<<<<
 *         raise MalformedBedLineError("Start is greater than stop")
 *     pyb._bed.fields = list_to_vector(orig_fields)
 */
  }

  /* "pybedtools/cbedtools.pyx":698
 *     if pyb.start > pyb.end:
 *         raise MalformedBedLineError("Start is greater than stop")
 *     pyb._bed.fields = list_to_vector(orig_fields)             # <<<<<<<<<<<<<<
 *     return pyb
 * 
 */
  __pyx_v_pyb->_bed->fields = __pyx_f_10pybedtools_9cbedtools_list_to_vector(__pyx_v_orig_fields);

  /* "pybedtools/cbedtools.pyx":699
 *         raise MalformedBedLineError("Start is greater than stop")
 *     pyb._bed.fields = list_to_vector(orig_fields)
 *     return pyb             # <<<<<<<<<<<<<<
 * 
 * cdef vector[string] list_to_vector(list li):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_pyb));
  __pyx_r = __pyx_v_pyb;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":582
 * 
 * 
 * cpdef Interval create_interval_from_list(list fields):             # <<<<<<<<<<<<<<
 *     """
 *     Create an Interval object from a list of strings.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("pybedtools.cbedtools.create_interval_from_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyb);
  __Pyx_XDECREF(__pyx_v_orig_fields);
  __Pyx_XDECREF(__pyx_v_chrom);
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_stop);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_score);
  __Pyx_XDECREF(__pyx_v_strand);
  __Pyx_XDECREF(__pyx_v_other_fields);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_1create_interval_from_list(PyObject *__pyx_self, PyObject *__pyx_v_fields); /*proto*/
static char __pyx_doc_10pybedtools_9cbedtools_create_interval_from_list[] = "\n    Create an Interval object from a list of strings.\n\n    Constructor::\n\n        create_interval_from_list(fields)\n\n    Given the list of strings, `fields`, automatically detects the format (BED,\n    GFF, VCF, SAM) and creates a new Interval object.\n\n    `fields` is a list with an arbitrary number of items (it can be quite long,\n    say after a -wao intersection of a BED12 and a GFF), however, the first\n    fields must conform to one of the supported formats.  For example, if you\n    want the resulting Interval to be considered a GFF feature, then the first\n    9 fields must conform to the GFF format.  Similarly, if you want the\n    resulting Interval to be considered a BED feature, then the first three\n    fields must be chrom, start, stop.\n\n    Example usage:\n\n        >>> # Creates a BED3 feature\n        >>> feature = create_interval_from_list(['chr1', '1', '100'])\n\n    ";
static PyObject *__pyx_pw_10pybedtools_9cbedtools_1create_interval_from_list(PyObject *__pyx_self, PyObject *__pyx_v_fields) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_interval_from_list (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyList_Type), 1, "fields", 1))) __PYX_ERR(0, 582, __pyx_L1_error)
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_create_interval_from_list(__pyx_self, ((PyObject*)__pyx_v_fields));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_create_interval_from_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("create_interval_from_list", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10pybedtools_9cbedtools_create_interval_from_list(__pyx_v_fields, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.create_interval_from_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":701
 *     return pyb
 * 
 * cdef vector[string] list_to_vector(list li):             # <<<<<<<<<<<<<<
 *     cdef vector[string] s
 *     cdef int i
 */

static std::vector<std::string>  __pyx_f_10pybedtools_9cbedtools_list_to_vector(PyObject *__pyx_v_li) {
  std::vector<std::string>  __pyx_v_s;
  int __pyx_v_i;
  PyObject *__pyx_v__s = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("list_to_vector", 0);

  /* "pybedtools/cbedtools.pyx":704
 *     cdef vector[string] s
 *     cdef int i
 *     for i in range(len(li)):             # <<<<<<<<<<<<<<
 *         _s = li[i]
 *         s.push_back(_cppstr(_s))
 */
  if (unlikely(__pyx_v_li == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 704, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_li); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 704, __pyx_L1_error)
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "pybedtools/cbedtools.pyx":705
 *     cdef int i
 *     for i in range(len(li)):
 *         _s = li[i]             # <<<<<<<<<<<<<<
 *         s.push_back(_cppstr(_s))
 *     return s
 */
    if (unlikely(__pyx_v_li == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 705, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_li, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v__s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pybedtools/cbedtools.pyx":706
 *     for i in range(len(li)):
 *         _s = li[i]
 *         s.push_back(_cppstr(_s))             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __pyx_t_3 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v__s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_s.push_back(__pyx_t_4);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 706, __pyx_L1_error)
    }
  }

  /* "pybedtools/cbedtools.pyx":707
 *         _s = li[i]
 *         s.push_back(_cppstr(_s))
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef list string_vec2list(vector[string] sv):
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":701
 *     return pyb
 * 
 * cdef vector[string] list_to_vector(list li):             # <<<<<<<<<<<<<<
 *     cdef vector[string] s
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pybedtools.cbedtools.list_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":709
 *     return s
 * 
 * cdef list string_vec2list(vector[string] sv):             # <<<<<<<<<<<<<<
 *     cdef size_t size = sv.size(), i
 *     return [_pystr(sv.at(i)) for i in range(size)]
 */

static PyObject *__pyx_f_10pybedtools_9cbedtools_string_vec2list(std::vector<std::string>  __pyx_v_sv) {
  size_t __pyx_v_size;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_FakeReference<std::string> __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("string_vec2list", 0);

  /* "pybedtools/cbedtools.pyx":710
 * 
 * cdef list string_vec2list(vector[string] sv):
 *     cdef size_t size = sv.size(), i             # <<<<<<<<<<<<<<
 *     return [_pystr(sv.at(i)) for i in range(size)]
 * 
 */
  __pyx_v_size = __pyx_v_sv.size();

  /* "pybedtools/cbedtools.pyx":711
 * cdef list string_vec2list(vector[string] sv):
 *     cdef size_t size = sv.size(), i
 *     return [_pystr(sv.at(i)) for i in range(size)]             # <<<<<<<<<<<<<<
 * 
 * cdef list bed_vec2list(vector[BED] bv):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_size;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    try {
      __pyx_t_4 = __pyx_v_sv.at(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 711, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":709
 *     return s
 * 
 * cdef list string_vec2list(vector[string] sv):             # <<<<<<<<<<<<<<
 *     cdef size_t size = sv.size(), i
 *     return [_pystr(sv.at(i)) for i in range(size)]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pybedtools.cbedtools.string_vec2list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":713
 *     return [_pystr(sv.at(i)) for i in range(size)]
 * 
 * cdef list bed_vec2list(vector[BED] bv):             # <<<<<<<<<<<<<<
 *     cdef size_t size = bv.size(), i
 *     cdef list l = []
 */

static PyObject *__pyx_f_10pybedtools_9cbedtools_bed_vec2list(std::vector<BED>  __pyx_v_bv) {
  size_t __pyx_v_size;
  size_t __pyx_v_i;
  PyObject *__pyx_v_l = 0;
  BED __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_FakeReference<BED> __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("bed_vec2list", 0);

  /* "pybedtools/cbedtools.pyx":714
 * 
 * cdef list bed_vec2list(vector[BED] bv):
 *     cdef size_t size = bv.size(), i             # <<<<<<<<<<<<<<
 *     cdef list l = []
 *     cdef BED b
 */
  __pyx_v_size = __pyx_v_bv.size();

  /* "pybedtools/cbedtools.pyx":715
 * cdef list bed_vec2list(vector[BED] bv):
 *     cdef size_t size = bv.size(), i
 *     cdef list l = []             # <<<<<<<<<<<<<<
 *     cdef BED b
 *     for i in range(size):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":717
 *     cdef list l = []
 *     cdef BED b
 *     for i in range(size):             # <<<<<<<<<<<<<<
 *         b = bv.at(i)
 *         l.append(create_interval(b))
 */
  __pyx_t_2 = __pyx_v_size;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pybedtools/cbedtools.pyx":718
 *     cdef BED b
 *     for i in range(size):
 *         b = bv.at(i)             # <<<<<<<<<<<<<<
 *         l.append(create_interval(b))
 *     return l
 */
    try {
      __pyx_t_4 = __pyx_v_bv.at(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 718, __pyx_L1_error)
    }
    __pyx_v_b = __pyx_t_4;

    /* "pybedtools/cbedtools.pyx":719
 *     for i in range(size):
 *         b = bv.at(i)
 *         l.append(create_interval(b))             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_10pybedtools_9cbedtools_create_interval(__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_l, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pybedtools/cbedtools.pyx":720
 *         b = bv.at(i)
 *         l.append(create_interval(b))
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":713
 *     return [_pystr(sv.at(i)) for i in range(size)]
 * 
 * cdef list bed_vec2list(vector[BED] bv):             # <<<<<<<<<<<<<<
 *     cdef size_t size = bv.size(), i
 *     cdef list l = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.bed_vec2list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":723
 * 
 * 
 * def overlap(int s1, int s2, int e1, int e2):             # <<<<<<<<<<<<<<
 *     return min(e1, e2) - max(s1, s2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_3overlap(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10pybedtools_9cbedtools_3overlap = {"overlap", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_3overlap, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10pybedtools_9cbedtools_3overlap(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_s1;
  int __pyx_v_s2;
  int __pyx_v_e1;
  int __pyx_v_e2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_e1,&__pyx_n_s_e2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlap", 1, 4, 4, 1); __PYX_ERR(0, 723, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlap", 1, 4, 4, 2); __PYX_ERR(0, 723, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlap", 1, 4, 4, 3); __PYX_ERR(0, 723, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlap") < 0)) __PYX_ERR(0, 723, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_s1 = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_s1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
    __pyx_v_s2 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_s2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
    __pyx_v_e1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_e1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
    __pyx_v_e2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_e2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlap", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 723, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.overlap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_2overlap(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_e1, __pyx_v_e2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_2overlap(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_s1, int __pyx_v_s2, int __pyx_v_e1, int __pyx_v_e2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("overlap", 0);

  /* "pybedtools/cbedtools.pyx":724
 * 
 * def overlap(int s1, int s2, int e1, int e2):
 *     return min(e1, e2) - max(s1, s2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_e2;
  __pyx_t_2 = __pyx_v_e1;
  if (((__pyx_t_1 < __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_t_1 = __pyx_v_s2;
  __pyx_t_2 = __pyx_v_s1;
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_4 = __pyx_t_1;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_t_3 - __pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":723
 * 
 * 
 * def overlap(int s1, int s2, int e1, int e2):             # <<<<<<<<<<<<<<
 *     return min(e1, e2) - max(s1, s2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pybedtools.cbedtools.overlap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":730
 *     cdef object stream
 *     cdef int _itemtype
 *     def __init__(self, stream):             # <<<<<<<<<<<<<<
 *         self.stream = stream
 * 
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_stream = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stream,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stream)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 730, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_stream = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 730, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_16IntervalIterator___init__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *)__pyx_v_self), __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_16IntervalIterator___init__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *__pyx_v_self, PyObject *__pyx_v_stream) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pybedtools/cbedtools.pyx":731
 *     cdef int _itemtype
 *     def __init__(self, stream):
 *         self.stream = stream             # <<<<<<<<<<<<<<
 * 
 *         # For speed, check int rather than call isinstance().
 */
  __Pyx_INCREF(__pyx_v_stream);
  __Pyx_GIVEREF(__pyx_v_stream);
  __Pyx_GOTREF(__pyx_v_self->stream);
  __Pyx_DECREF(__pyx_v_self->stream);
  __pyx_v_self->stream = __pyx_v_stream;

  /* "pybedtools/cbedtools.pyx":738
 *         # Also assumes that all items in the iterable `stream` are the same
 *         # type...this seems like a reasonable assumption.
 *         self._itemtype = -1             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->_itemtype = -1;

  /* "pybedtools/cbedtools.pyx":730
 *     cdef object stream
 *     cdef int _itemtype
 *     def __init__(self, stream):             # <<<<<<<<<<<<<<
 *         self.stream = stream
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":740
 *         self._itemtype = -1
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_16IntervalIterator_2__iter__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_16IntervalIterator_2__iter__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pybedtools/cbedtools.pyx":741
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":740
 *         self._itemtype = -1
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":743
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_16IntervalIterator_4__next__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_16IntervalIterator_4__next__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *__pyx_v_self) {
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_fields = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "pybedtools/cbedtools.pyx":744
 * 
 *     def __next__(self):
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 line = next(self.stream)
 */
  while (1) {

    /* "pybedtools/cbedtools.pyx":745
 *     def __next__(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 line = next(self.stream)
 *                 if self._itemtype < 0:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "pybedtools/cbedtools.pyx":746
 *         while True:
 *             try:
 *                 line = next(self.stream)             # <<<<<<<<<<<<<<
 *                 if self._itemtype < 0:
 *                     if isinstance(line, Interval):
 */
        __pyx_t_4 = __pyx_v_self->stream;
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyIter_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 746, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "pybedtools/cbedtools.pyx":747
 *             try:
 *                 line = next(self.stream)
 *                 if self._itemtype < 0:             # <<<<<<<<<<<<<<
 *                     if isinstance(line, Interval):
 *                         self._itemtype = 2
 */
        __pyx_t_6 = ((__pyx_v_self->_itemtype < 0) != 0);
        if (__pyx_t_6) {

          /* "pybedtools/cbedtools.pyx":748
 *                 line = next(self.stream)
 *                 if self._itemtype < 0:
 *                     if isinstance(line, Interval):             # <<<<<<<<<<<<<<
 *                         self._itemtype = 2
 *                     elif isinstance(line, basestring):
 */
          __pyx_t_6 = __Pyx_TypeCheck(__pyx_v_line, __pyx_ptype_10pybedtools_9cbedtools_Interval); 
          __pyx_t_7 = (__pyx_t_6 != 0);
          if (__pyx_t_7) {

            /* "pybedtools/cbedtools.pyx":749
 *                 if self._itemtype < 0:
 *                     if isinstance(line, Interval):
 *                         self._itemtype = 2             # <<<<<<<<<<<<<<
 *                     elif isinstance(line, basestring):
 *                         self._itemtype = 1
 */
            __pyx_v_self->_itemtype = 2;

            /* "pybedtools/cbedtools.pyx":748
 *                 line = next(self.stream)
 *                 if self._itemtype < 0:
 *                     if isinstance(line, Interval):             # <<<<<<<<<<<<<<
 *                         self._itemtype = 2
 *                     elif isinstance(line, basestring):
 */
            goto __pyx_L14;
          }

          /* "pybedtools/cbedtools.pyx":750
 *                     if isinstance(line, Interval):
 *                         self._itemtype = 2
 *                     elif isinstance(line, basestring):             # <<<<<<<<<<<<<<
 *                         self._itemtype = 1
 *                     else:
 */
          __pyx_t_7 = __Pyx_PyBaseString_Check(__pyx_v_line); 
          __pyx_t_6 = (__pyx_t_7 != 0);
          if (__pyx_t_6) {

            /* "pybedtools/cbedtools.pyx":751
 *                         self._itemtype = 2
 *                     elif isinstance(line, basestring):
 *                         self._itemtype = 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         self._itemtype = 0
 */
            __pyx_v_self->_itemtype = 1;

            /* "pybedtools/cbedtools.pyx":750
 *                     if isinstance(line, Interval):
 *                         self._itemtype = 2
 *                     elif isinstance(line, basestring):             # <<<<<<<<<<<<<<
 *                         self._itemtype = 1
 *                     else:
 */
            goto __pyx_L14;
          }

          /* "pybedtools/cbedtools.pyx":753
 *                         self._itemtype = 1
 *                     else:
 *                         self._itemtype = 0             # <<<<<<<<<<<<<<
 * 
 *             # If you only trap StopIteration, for some reason even after
 */
          /*else*/ {
            __pyx_v_self->_itemtype = 0;
          }
          __pyx_L14:;

          /* "pybedtools/cbedtools.pyx":747
 *             try:
 *                 line = next(self.stream)
 *                 if self._itemtype < 0:             # <<<<<<<<<<<<<<
 *                     if isinstance(line, Interval):
 *                         self._itemtype = 2
 */
        }

        /* "pybedtools/cbedtools.pyx":745
 *     def __next__(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 line = next(self.stream)
 *                 if self._itemtype < 0:
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":760
 *             # raises a ValueError, which we catch again . . . and again raise
 *             # another StopIteration.  Not sure why it works, but it does.
 *             except (StopIteration, ValueError):             # <<<<<<<<<<<<<<
 *                 try:
 *                     self.stream.close()
 */
      __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_8) {
        __Pyx_AddTraceback("pybedtools.cbedtools.IntervalIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_9) < 0) __PYX_ERR(0, 760, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_9);

        /* "pybedtools/cbedtools.pyx":761
 *             # another StopIteration.  Not sure why it works, but it does.
 *             except (StopIteration, ValueError):
 *                 try:             # <<<<<<<<<<<<<<
 *                     self.stream.close()
 *                 except AttributeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_12);
          /*try:*/ {

            /* "pybedtools/cbedtools.pyx":762
 *             except (StopIteration, ValueError):
 *                 try:
 *                     self.stream.close()             # <<<<<<<<<<<<<<
 *                 except AttributeError:
 *                     pass
 */
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->stream, __pyx_n_s_close); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 762, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_14))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_14, function);
              }
            }
            if (__pyx_t_15) {
              __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 762, __pyx_L17_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else {
              __pyx_t_13 = __Pyx_PyObject_CallNoArg(__pyx_t_14); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 762, __pyx_L17_error)
            }
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "pybedtools/cbedtools.pyx":761
 *             # another StopIteration.  Not sure why it works, but it does.
 *             except (StopIteration, ValueError):
 *                 try:             # <<<<<<<<<<<<<<
 *                     self.stream.close()
 *                 except AttributeError:
 */
          }
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L24_try_end;
          __pyx_L17_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "pybedtools/cbedtools.pyx":763
 *                 try:
 *                     self.stream.close()
 *                 except AttributeError:             # <<<<<<<<<<<<<<
 *                     pass
 *                 raise StopIteration
 */
          __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
          if (__pyx_t_8) {
            __Pyx_ErrRestore(0,0,0);
            goto __pyx_L18_exception_handled;
          }
          goto __pyx_L19_except_error;
          __pyx_L19_except_error:;

          /* "pybedtools/cbedtools.pyx":761
 *             # another StopIteration.  Not sure why it works, but it does.
 *             except (StopIteration, ValueError):
 *                 try:             # <<<<<<<<<<<<<<
 *                     self.stream.close()
 *                 except AttributeError:
 */
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L7_except_error;
          __pyx_L18_exception_handled:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          __pyx_L24_try_end:;
        }

        /* "pybedtools/cbedtools.pyx":765
 *                 except AttributeError:
 *                     pass
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        __PYX_ERR(0, 765, __pyx_L7_except_error)
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "pybedtools/cbedtools.pyx":745
 *     def __next__(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 line = next(self.stream)
 *                 if self._itemtype < 0:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L12_try_end:;
    }

    /* "pybedtools/cbedtools.pyx":768
 *                 break
 * 
 *             if self._itemtype == 1:             # <<<<<<<<<<<<<<
 *                 if line.startswith(('@', '#', 'track', 'browser')):
 *                     continue
 */
    __pyx_t_6 = ((__pyx_v_self->_itemtype == 1) != 0);
    if (__pyx_t_6) {

      /* "pybedtools/cbedtools.pyx":769
 * 
 *             if self._itemtype == 1:
 *                 if line.startswith(('@', '#', 'track', 'browser')):             # <<<<<<<<<<<<<<
 *                     continue
 *             break
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_startswith); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {

        /* "pybedtools/cbedtools.pyx":770
 *             if self._itemtype == 1:
 *                 if line.startswith(('@', '#', 'track', 'browser')):
 *                     continue             # <<<<<<<<<<<<<<
 *             break
 * 
 */
        goto __pyx_L3_continue;

        /* "pybedtools/cbedtools.pyx":769
 * 
 *             if self._itemtype == 1:
 *                 if line.startswith(('@', '#', 'track', 'browser')):             # <<<<<<<<<<<<<<
 *                     continue
 *             break
 */
      }

      /* "pybedtools/cbedtools.pyx":768
 *                 break
 * 
 *             if self._itemtype == 1:             # <<<<<<<<<<<<<<
 *                 if line.startswith(('@', '#', 'track', 'browser')):
 *                     continue
 */
    }

    /* "pybedtools/cbedtools.pyx":771
 *                 if line.startswith(('@', '#', 'track', 'browser')):
 *                     continue
 *             break             # <<<<<<<<<<<<<<
 * 
 *         # Iterable of Interval objects
 */
    goto __pyx_L4_break;
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;

  /* "pybedtools/cbedtools.pyx":774
 * 
 *         # Iterable of Interval objects
 *         if self._itemtype == 2:             # <<<<<<<<<<<<<<
 *             return line
 * 
 */
  switch (__pyx_v_self->_itemtype) {
    case 2:

    /* "pybedtools/cbedtools.pyx":775
 *         # Iterable of Interval objects
 *         if self._itemtype == 2:
 *             return line             # <<<<<<<<<<<<<<
 * 
 *         # Iterable of strings, in which case we need to split
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(!__pyx_v_line)) { __Pyx_RaiseUnboundLocalError("line"); __PYX_ERR(0, 775, __pyx_L1_error) }
    __Pyx_INCREF(__pyx_v_line);
    __pyx_r = __pyx_v_line;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":774
 * 
 *         # Iterable of Interval objects
 *         if self._itemtype == 2:             # <<<<<<<<<<<<<<
 *             return line
 * 
 */
    break;

    /* "pybedtools/cbedtools.pyx":778
 * 
 *         # Iterable of strings, in which case we need to split
 *         elif self._itemtype == 1:             # <<<<<<<<<<<<<<
 *             fields = line.rstrip('\r\n').split('\t')
 * 
 */
    case 1:

    /* "pybedtools/cbedtools.pyx":779
 *         # Iterable of strings, in which case we need to split
 *         elif self._itemtype == 1:
 *             fields = line.rstrip('\r\n').split('\t')             # <<<<<<<<<<<<<<
 * 
 *         # Otherwise assume list/tuple/iterable of fields
 */
    if (unlikely(!__pyx_v_line)) { __Pyx_RaiseUnboundLocalError("line"); __PYX_ERR(0, 779, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_fields = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pybedtools/cbedtools.pyx":778
 * 
 *         # Iterable of strings, in which case we need to split
 *         elif self._itemtype == 1:             # <<<<<<<<<<<<<<
 *             fields = line.rstrip('\r\n').split('\t')
 * 
 */
    break;
    default:

    /* "pybedtools/cbedtools.pyx":783
 *         # Otherwise assume list/tuple/iterable of fields
 *         else:
 *             fields = list(line)             # <<<<<<<<<<<<<<
 * 
 *         # TODO: optimization: create_interval_from_list should have a version
 */
    if (unlikely(!__pyx_v_line)) { __Pyx_RaiseUnboundLocalError("line"); __PYX_ERR(0, 783, __pyx_L1_error) }
    __pyx_t_9 = PySequence_List(__pyx_v_line); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_v_fields = __pyx_t_9;
    __pyx_t_9 = 0;
    break;
  }

  /* "pybedtools/cbedtools.pyx":787
 *         # TODO: optimization: create_interval_from_list should have a version
 *         # that accepts C++ string instances
 *         return create_interval_from_list(fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_fields))||((__pyx_v_fields) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_fields)->tp_name), 0))) __PYX_ERR(0, 787, __pyx_L1_error)
  __pyx_t_9 = ((PyObject *)__pyx_f_10pybedtools_9cbedtools_create_interval_from_list(((PyObject*)__pyx_v_fields), 0)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":743
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":803
 * 
 *     """
 *     def __init__(self, intervalFile):             # <<<<<<<<<<<<<<
 *         self.intervalFile_ptr = new BedFile(_cppstr(intervalFile))
 *         self._loaded = 0
 */

/* Python wrapper */
static int __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_intervalFile = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_intervalFile,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_intervalFile)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 803, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_intervalFile = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 803, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile___init__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self), __pyx_v_intervalFile);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10pybedtools_9cbedtools_12IntervalFile___init__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, PyObject *__pyx_v_intervalFile) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pybedtools/cbedtools.pyx":804
 *     """
 *     def __init__(self, intervalFile):
 *         self.intervalFile_ptr = new BedFile(_cppstr(intervalFile))             # <<<<<<<<<<<<<<
 *         self._loaded = 0
 *         self._open = 0
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_intervalFile); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->intervalFile_ptr = new BedFile(__pyx_t_2);

  /* "pybedtools/cbedtools.pyx":805
 *     def __init__(self, intervalFile):
 *         self.intervalFile_ptr = new BedFile(_cppstr(intervalFile))
 *         self._loaded = 0             # <<<<<<<<<<<<<<
 *         self._open = 0
 *         self._fn = _cppstr(intervalFile)
 */
  __pyx_v_self->_loaded = 0;

  /* "pybedtools/cbedtools.pyx":806
 *         self.intervalFile_ptr = new BedFile(_cppstr(intervalFile))
 *         self._loaded = 0
 *         self._open = 0             # <<<<<<<<<<<<<<
 *         self._fn = _cppstr(intervalFile)
 * 
 */
  __pyx_v_self->_open = 0;

  /* "pybedtools/cbedtools.pyx":807
 *         self._loaded = 0
 *         self._open = 0
 *         self._fn = _cppstr(intervalFile)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__cppstr(__pyx_v_intervalFile); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_fn = __pyx_t_2;

  /* "pybedtools/cbedtools.pyx":803
 * 
 *     """
 *     def __init__(self, intervalFile):             # <<<<<<<<<<<<<<
 *         self.intervalFile_ptr = new BedFile(_cppstr(intervalFile))
 *         self._loaded = 0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":809
 *         self._fn = _cppstr(intervalFile)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.intervalFile_ptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_2__dealloc__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_2__dealloc__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pybedtools/cbedtools.pyx":810
 * 
 *     def __dealloc__(self):
 *         del self.intervalFile_ptr             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  delete __pyx_v_self->intervalFile_ptr;

  /* "pybedtools/cbedtools.pyx":809
 *         self._fn = _cppstr(intervalFile)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.intervalFile_ptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pybedtools/cbedtools.pyx":812
 *         del self.intervalFile_ptr
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_4__iter__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_4__iter__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pybedtools/cbedtools.pyx":813
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":812
 *         del self.intervalFile_ptr
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":815
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self._open:
 *             result = self.intervalFile_ptr.Open()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_7__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_7__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_6__next__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_6__next__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self) {
  int __pyx_v_result;
  BED __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "pybedtools/cbedtools.pyx":816
 * 
 *     def __next__(self):
 *         if not self._open:             # <<<<<<<<<<<<<<
 *             result = self.intervalFile_ptr.Open()
 *             if result == -1:
 */
  __pyx_t_1 = ((!(__pyx_v_self->_open != 0)) != 0);
  if (__pyx_t_1) {

    /* "pybedtools/cbedtools.pyx":817
 *     def __next__(self):
 *         if not self._open:
 *             result = self.intervalFile_ptr.Open()             # <<<<<<<<<<<<<<
 *             if result == -1:
 *                 raise BedToolsFileError("Error opening file")
 */
    __pyx_v_result = __pyx_v_self->intervalFile_ptr->Open();

    /* "pybedtools/cbedtools.pyx":818
 *         if not self._open:
 *             result = self.intervalFile_ptr.Open()
 *             if result == -1:             # <<<<<<<<<<<<<<
 *                 raise BedToolsFileError("Error opening file")
 *             self._open = 1
 */
    __pyx_t_1 = ((__pyx_v_result == -1L) != 0);
    if (__pyx_t_1) {

      /* "pybedtools/cbedtools.pyx":819
 *             result = self.intervalFile_ptr.Open()
 *             if result == -1:
 *                 raise BedToolsFileError("Error opening file")             # <<<<<<<<<<<<<<
 *             self._open = 1
 *         cdef BED b = self.intervalFile_ptr.GetNextBed()
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BedToolsFileError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 819, __pyx_L1_error)

      /* "pybedtools/cbedtools.pyx":818
 *         if not self._open:
 *             result = self.intervalFile_ptr.Open()
 *             if result == -1:             # <<<<<<<<<<<<<<
 *                 raise BedToolsFileError("Error opening file")
 *             self._open = 1
 */
    }

    /* "pybedtools/cbedtools.pyx":820
 *             if result == -1:
 *                 raise BedToolsFileError("Error opening file")
 *             self._open = 1             # <<<<<<<<<<<<<<
 *         cdef BED b = self.intervalFile_ptr.GetNextBed()
 *         if b.status == BED_VALID:
 */
    __pyx_v_self->_open = 1;

    /* "pybedtools/cbedtools.pyx":816
 * 
 *     def __next__(self):
 *         if not self._open:             # <<<<<<<<<<<<<<
 *             result = self.intervalFile_ptr.Open()
 *             if result == -1:
 */
  }

  /* "pybedtools/cbedtools.pyx":821
 *                 raise BedToolsFileError("Error opening file")
 *             self._open = 1
 *         cdef BED b = self.intervalFile_ptr.GetNextBed()             # <<<<<<<<<<<<<<
 *         if b.status == BED_VALID:
 *             return create_interval(b)
 */
  __pyx_v_b = __pyx_v_self->intervalFile_ptr->GetNextBed();

  /* "pybedtools/cbedtools.pyx":822
 *             self._open = 1
 *         cdef BED b = self.intervalFile_ptr.GetNextBed()
 *         if b.status == BED_VALID:             # <<<<<<<<<<<<<<
 *             return create_interval(b)
 *         elif b.status == BED_INVALID:
 */
  switch (__pyx_v_b.status) {
    case BED_VALID:

    /* "pybedtools/cbedtools.pyx":823
 *         cdef BED b = self.intervalFile_ptr.GetNextBed()
 *         if b.status == BED_VALID:
 *             return create_interval(b)             # <<<<<<<<<<<<<<
 *         elif b.status == BED_INVALID:
 *             self.intervalFile_ptr.Close()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_f_10pybedtools_9cbedtools_create_interval(__pyx_v_b)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":822
 *             self._open = 1
 *         cdef BED b = self.intervalFile_ptr.GetNextBed()
 *         if b.status == BED_VALID:             # <<<<<<<<<<<<<<
 *             return create_interval(b)
 *         elif b.status == BED_INVALID:
 */
    break;

    /* "pybedtools/cbedtools.pyx":824
 *         if b.status == BED_VALID:
 *             return create_interval(b)
 *         elif b.status == BED_INVALID:             # <<<<<<<<<<<<<<
 *             self.intervalFile_ptr.Close()
 *             raise StopIteration
 */
    case BED_INVALID:

    /* "pybedtools/cbedtools.pyx":825
 *             return create_interval(b)
 *         elif b.status == BED_INVALID:
 *             self.intervalFile_ptr.Close()             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         elif b.status == BED_MALFORMED:
 */
    __pyx_v_self->intervalFile_ptr->Close();

    /* "pybedtools/cbedtools.pyx":826
 *         elif b.status == BED_INVALID:
 *             self.intervalFile_ptr.Close()
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         elif b.status == BED_MALFORMED:
 *             raise MalformedBedLineError("malformed line: %s" % string_vec2list(b.fields))
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 826, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":824
 *         if b.status == BED_VALID:
 *             return create_interval(b)
 *         elif b.status == BED_INVALID:             # <<<<<<<<<<<<<<
 *             self.intervalFile_ptr.Close()
 *             raise StopIteration
 */
    break;

    /* "pybedtools/cbedtools.pyx":827
 *             self.intervalFile_ptr.Close()
 *             raise StopIteration
 *         elif b.status == BED_MALFORMED:             # <<<<<<<<<<<<<<
 *             raise MalformedBedLineError("malformed line: %s" % string_vec2list(b.fields))
 *         else:
 */
    case BED_MALFORMED:

    /* "pybedtools/cbedtools.pyx":828
 *             raise StopIteration
 *         elif b.status == BED_MALFORMED:
 *             raise MalformedBedLineError("malformed line: %s" % string_vec2list(b.fields))             # <<<<<<<<<<<<<<
 *         else:
 *             return next(self)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MalformedBedLineError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_f_10pybedtools_9cbedtools_string_vec2list(__pyx_v_b.fields); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_malformed_line_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 828, __pyx_L1_error)

    /* "pybedtools/cbedtools.pyx":827
 *             self.intervalFile_ptr.Close()
 *             raise StopIteration
 *         elif b.status == BED_MALFORMED:             # <<<<<<<<<<<<<<
 *             raise MalformedBedLineError("malformed line: %s" % string_vec2list(b.fields))
 *         else:
 */
    break;
    default:

    /* "pybedtools/cbedtools.pyx":830
 *             raise MalformedBedLineError("malformed line: %s" % string_vec2list(b.fields))
 *         else:
 *             return next(self)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyIter_Next(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    break;
  }

  /* "pybedtools/cbedtools.pyx":815
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self._open:
 *             result = self.intervalFile_ptr.Open()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":833
 * 
 *     @property
 *     def fn(self):             # <<<<<<<<<<<<<<
 *         return _pystr(self._fn)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_2fn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_2fn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_2fn___get__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_2fn___get__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":834
 *     @property
 *     def fn(self):
 *         return _pystr(self._fn)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->_fn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":833
 * 
 *     @property
 *     def fn(self):             # <<<<<<<<<<<<<<
 *         return _pystr(self._fn)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.fn.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":837
 * 
 *     @property
 *     def file_type(self):             # <<<<<<<<<<<<<<
 *         if not self.intervalFile_ptr._typeIsKnown:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_9file_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_9file_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_9file_type___get__(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_9file_type___get__(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_file_type = NULL;
  PyObject *__pyx_v_fn = NULL;
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pybedtools/cbedtools.pyx":838
 *     @property
 *     def file_type(self):
 *         if not self.intervalFile_ptr._typeIsKnown:             # <<<<<<<<<<<<<<
 *             try:
 *                 a = six.advance_iterator(iter(self))
 */
  __pyx_t_1 = ((!(__pyx_v_self->intervalFile_ptr->_typeIsKnown != 0)) != 0);
  if (__pyx_t_1) {

    /* "pybedtools/cbedtools.pyx":839
 *     def file_type(self):
 *         if not self.intervalFile_ptr._typeIsKnown:
 *             try:             # <<<<<<<<<<<<<<
 *                 a = six.advance_iterator(iter(self))
 *                 file_type = _pystr(self.intervalFile_ptr.file_type)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "pybedtools/cbedtools.pyx":840
 *         if not self.intervalFile_ptr._typeIsKnown:
 *             try:
 *                 a = six.advance_iterator(iter(self))             # <<<<<<<<<<<<<<
 *                 file_type = _pystr(self.intervalFile_ptr.file_type)
 *                 self.intervalFile_ptr.Close()
 */
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_six); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_advance_iterator); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 840, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        if (!__pyx_t_8) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 840, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_a = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "pybedtools/cbedtools.pyx":841
 *             try:
 *                 a = six.advance_iterator(iter(self))
 *                 file_type = _pystr(self.intervalFile_ptr.file_type)             # <<<<<<<<<<<<<<
 *                 self.intervalFile_ptr.Close()
 *                 return file_type
 */
        __pyx_t_5 = __pyx_f_10pybedtools_9cbedtools__pystr(__pyx_v_self->intervalFile_ptr->file_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 841, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_v_file_type = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "pybedtools/cbedtools.pyx":842
 *                 a = six.advance_iterator(iter(self))
 *                 file_type = _pystr(self.intervalFile_ptr.file_type)
 *                 self.intervalFile_ptr.Close()             # <<<<<<<<<<<<<<
 *                 return file_type
 *             except MalformedBedLineError:
 */
        __pyx_v_self->intervalFile_ptr->Close();

        /* "pybedtools/cbedtools.pyx":843
 *                 file_type = _pystr(self.intervalFile_ptr.file_type)
 *                 self.intervalFile_ptr.Close()
 *                 return file_type             # <<<<<<<<<<<<<<
 *             except MalformedBedLineError:
 *                 # If it's a SAM, raise a meaningful exception.  If not, fail.
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_file_type);
        __pyx_r = __pyx_v_file_type;
        goto __pyx_L8_try_return;

        /* "pybedtools/cbedtools.pyx":839
 *     def file_type(self):
 *         if not self.intervalFile_ptr._typeIsKnown:
 *             try:             # <<<<<<<<<<<<<<
 *                 a = six.advance_iterator(iter(self))
 *                 file_type = _pystr(self.intervalFile_ptr.file_type)
 */
      }
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":844
 *                 self.intervalFile_ptr.Close()
 *                 return file_type
 *             except MalformedBedLineError:             # <<<<<<<<<<<<<<
 *                 # If it's a SAM, raise a meaningful exception.  If not, fail.
 *                 with open(self.fn) as fn:
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_MalformedBedLineError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_10) {
        __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.file_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_7, &__pyx_t_9) < 0) __PYX_ERR(0, 844, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_9);

        /* "pybedtools/cbedtools.pyx":846
 *             except MalformedBedLineError:
 *                 # If it's a SAM, raise a meaningful exception.  If not, fail.
 *                 with open(self.fn) as fn:             # <<<<<<<<<<<<<<
 *                     interval = create_interval_from_list(fn.readline().strip().split())
 *                 if interval.file_type == 'sam':
 */
        /*with:*/ {
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fn); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 846, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 846, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 846, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_11 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 846, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_enter); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 846, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          if (__pyx_t_13) {
            __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 846, __pyx_L14_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else {
            __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 846, __pyx_L14_error)
          }
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __pyx_t_8;
          __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          /*try:*/ {
            {
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
              __Pyx_XGOTREF(__pyx_t_14);
              __Pyx_XGOTREF(__pyx_t_15);
              __Pyx_XGOTREF(__pyx_t_16);
              /*try:*/ {
                __pyx_v_fn = __pyx_t_12;
                __pyx_t_12 = 0;

                /* "pybedtools/cbedtools.pyx":847
 *                 # If it's a SAM, raise a meaningful exception.  If not, fail.
 *                 with open(self.fn) as fn:
 *                     interval = create_interval_from_list(fn.readline().strip().split())             # <<<<<<<<<<<<<<
 *                 if interval.file_type == 'sam':
 *                     raise ValueError('IntervalFile objects do not yet natively support SAM. '
 */
                __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_fn, __pyx_n_s_readline); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 847, __pyx_L20_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_17 = NULL;
                if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_13))) {
                  __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_13);
                  if (likely(__pyx_t_17)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                    __Pyx_INCREF(__pyx_t_17);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_13, function);
                  }
                }
                if (__pyx_t_17) {
                  __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 847, __pyx_L20_error)
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                } else {
                  __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_13); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 847, __pyx_L20_error)
                }
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_strip); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 847, __pyx_L20_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_8 = NULL;
                if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_13))) {
                  __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_13);
                  if (likely(__pyx_t_8)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                    __Pyx_INCREF(__pyx_t_8);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_13, function);
                  }
                }
                if (__pyx_t_8) {
                  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 847, __pyx_L20_error)
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                } else {
                  __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 847, __pyx_L20_error)
                }
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 847, __pyx_L20_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __pyx_t_6 = NULL;
                if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_13))) {
                  __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_13);
                  if (likely(__pyx_t_6)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                    __Pyx_INCREF(__pyx_t_6);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_13, function);
                  }
                }
                if (__pyx_t_6) {
                  __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 847, __pyx_L20_error)
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                } else {
                  __pyx_t_12 = __Pyx_PyObject_CallNoArg(__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 847, __pyx_L20_error)
                }
                __Pyx_GOTREF(__pyx_t_12);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                if (!(likely(PyList_CheckExact(__pyx_t_12))||((__pyx_t_12) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_12)->tp_name), 0))) __PYX_ERR(0, 847, __pyx_L20_error)
                __pyx_t_13 = ((PyObject *)__pyx_f_10pybedtools_9cbedtools_create_interval_from_list(((PyObject*)__pyx_t_12), 0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 847, __pyx_L20_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                __pyx_v_interval = ((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)__pyx_t_13);
                __pyx_t_13 = 0;

                /* "pybedtools/cbedtools.pyx":846
 *             except MalformedBedLineError:
 *                 # If it's a SAM, raise a meaningful exception.  If not, fail.
 *                 with open(self.fn) as fn:             # <<<<<<<<<<<<<<
 *                     interval = create_interval_from_list(fn.readline().strip().split())
 *                 if interval.file_type == 'sam':
 */
              }
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              goto __pyx_L27_try_end;
              __pyx_L20_error:;
              __Pyx_PyThreadState_assign
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              /*except:*/ {
                __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.file_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_12, &__pyx_t_6) < 0) __PYX_ERR(0, 846, __pyx_L22_except_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_GOTREF(__pyx_t_12);
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_8 = PyTuple_Pack(3, __pyx_t_13, __pyx_t_12, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 846, __pyx_L22_except_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_8, NULL);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 846, __pyx_L22_except_error)
                __Pyx_GOTREF(__pyx_t_18);
                __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_18);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                if (__pyx_t_1 < 0) __PYX_ERR(0, 846, __pyx_L22_except_error)
                __pyx_t_19 = ((!(__pyx_t_1 != 0)) != 0);
                if (__pyx_t_19) {
                  __Pyx_GIVEREF(__pyx_t_13);
                  __Pyx_GIVEREF(__pyx_t_12);
                  __Pyx_XGIVEREF(__pyx_t_6);
                  __Pyx_ErrRestoreWithState(__pyx_t_13, __pyx_t_12, __pyx_t_6);
                  __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_6 = 0; 
                  __PYX_ERR(0, 846, __pyx_L22_except_error)
                }
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                goto __pyx_L21_exception_handled;
              }
              __pyx_L22_except_error:;
              __Pyx_PyThreadState_assign
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
              goto __pyx_L6_except_error;
              __pyx_L21_exception_handled:;
              __Pyx_PyThreadState_assign
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
              __pyx_L27_try_end:;
            }
          }
          /*finally:*/ {
            /*normal exit:*/{
              if (__pyx_t_11) {
                __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__38, NULL);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 846, __pyx_L6_except_error)
                __Pyx_GOTREF(__pyx_t_16);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              }
              goto __pyx_L19;
            }
            __pyx_L19:;
          }
          goto __pyx_L31;
          __pyx_L14_error:;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L6_except_error;
          __pyx_L31:;
        }

        /* "pybedtools/cbedtools.pyx":848
 *                 with open(self.fn) as fn:
 *                     interval = create_interval_from_list(fn.readline().strip().split())
 *                 if interval.file_type == 'sam':             # <<<<<<<<<<<<<<
 *                     raise ValueError('IntervalFile objects do not yet natively support SAM. '
 *                                      'Please convert to BED/GFF/VCF first if you want to '
 */
        if (unlikely(!__pyx_v_interval)) { __Pyx_RaiseUnboundLocalError("interval"); __PYX_ERR(0, 848, __pyx_L6_except_error) }
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_interval), __pyx_n_s_file_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 848, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_t_6, __pyx_n_s_sam, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 848, __pyx_L6_except_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__pyx_t_19) {

          /* "pybedtools/cbedtools.pyx":849
 *                     interval = create_interval_from_list(fn.readline().strip().split())
 *                 if interval.file_type == 'sam':
 *                     raise ValueError('IntervalFile objects do not yet natively support SAM. '             # <<<<<<<<<<<<<<
 *                                      'Please convert to BED/GFF/VCF first if you want to '
 *                                      'use the low-level API of IntervalFile')
 */
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 849, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_Raise(__pyx_t_6, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __PYX_ERR(0, 849, __pyx_L6_except_error)

          /* "pybedtools/cbedtools.pyx":848
 *                 with open(self.fn) as fn:
 *                     interval = create_interval_from_list(fn.readline().strip().split())
 *                 if interval.file_type == 'sam':             # <<<<<<<<<<<<<<
 *                     raise ValueError('IntervalFile objects do not yet natively support SAM. '
 *                                      'Please convert to BED/GFF/VCF first if you want to '
 */
        }

        /* "pybedtools/cbedtools.pyx":853
 *                                      'use the low-level API of IntervalFile')
 *                 else:
 *                     raise             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __Pyx_GIVEREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_7, __pyx_t_9);
          __pyx_t_5 = 0; __pyx_t_7 = 0; __pyx_t_9 = 0; 
          __PYX_ERR(0, 853, __pyx_L6_except_error)
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "pybedtools/cbedtools.pyx":839
 *     def file_type(self):
 *         if not self.intervalFile_ptr._typeIsKnown:
 *             try:             # <<<<<<<<<<<<<<
 *                 a = six.advance_iterator(iter(self))
 *                 file_type = _pystr(self.intervalFile_ptr.file_type)
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L0;
    }

    /* "pybedtools/cbedtools.pyx":838
 *     @property
 *     def file_type(self):
 *         if not self.intervalFile_ptr._typeIsKnown:             # <<<<<<<<<<<<<<
 *             try:
 *                 a = six.advance_iterator(iter(self))
 */
  }

  /* "pybedtools/cbedtools.pyx":837
 * 
 *     @property
 *     def file_type(self):             # <<<<<<<<<<<<<<
 *         if not self.intervalFile_ptr._typeIsKnown:
 *             try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.file_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_file_type);
  __Pyx_XDECREF(__pyx_v_fn);
  __Pyx_XDECREF((PyObject *)__pyx_v_interval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":856
 * 
 * 
 *     def loadIntoMap(self):             # <<<<<<<<<<<<<<
 *         """
 *         Prepares file for checking intersections.  Used by other methods like all_hits()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_9loadIntoMap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_8loadIntoMap[] = "\n        Prepares file for checking intersections.  Used by other methods like all_hits()\n        ";
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_9loadIntoMap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadIntoMap (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_8loadIntoMap(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_8loadIntoMap(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("loadIntoMap", 0);

  /* "pybedtools/cbedtools.pyx":860
 *         Prepares file for checking intersections.  Used by other methods like all_hits()
 *         """
 *         if self._loaded:             # <<<<<<<<<<<<<<
 *             return
 *         self.intervalFile_ptr.loadBedFileIntoMap()
 */
  __pyx_t_1 = (__pyx_v_self->_loaded != 0);
  if (__pyx_t_1) {

    /* "pybedtools/cbedtools.pyx":861
 *         """
 *         if self._loaded:
 *             return             # <<<<<<<<<<<<<<
 *         self.intervalFile_ptr.loadBedFileIntoMap()
 *         self._loaded = 1
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":860
 *         Prepares file for checking intersections.  Used by other methods like all_hits()
 *         """
 *         if self._loaded:             # <<<<<<<<<<<<<<
 *             return
 *         self.intervalFile_ptr.loadBedFileIntoMap()
 */
  }

  /* "pybedtools/cbedtools.pyx":862
 *         if self._loaded:
 *             return
 *         self.intervalFile_ptr.loadBedFileIntoMap()             # <<<<<<<<<<<<<<
 *         self._loaded = 1
 * 
 */
  __pyx_v_self->intervalFile_ptr->loadBedFileIntoMap();

  /* "pybedtools/cbedtools.pyx":863
 *             return
 *         self.intervalFile_ptr.loadBedFileIntoMap()
 *         self._loaded = 1             # <<<<<<<<<<<<<<
 * 
 *     def rewind(self):
 */
  __pyx_v_self->_loaded = 1;

  /* "pybedtools/cbedtools.pyx":856
 * 
 * 
 *     def loadIntoMap(self):             # <<<<<<<<<<<<<<
 *         """
 *         Prepares file for checking intersections.  Used by other methods like all_hits()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":865
 *         self._loaded = 1
 * 
 *     def rewind(self):             # <<<<<<<<<<<<<<
 *         """
 *         Jump to the beginning of the file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_11rewind(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_10rewind[] = "\n        Jump to the beginning of the file.\n        ";
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_11rewind(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rewind (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_10rewind(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_10rewind(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("rewind", 0);

  /* "pybedtools/cbedtools.pyx":869
 *         Jump to the beginning of the file.
 *         """
 *         if not self._open:             # <<<<<<<<<<<<<<
 *             self.intervalFile_ptr.Open()
 *             self._open = 1
 */
  __pyx_t_1 = ((!(__pyx_v_self->_open != 0)) != 0);
  if (__pyx_t_1) {

    /* "pybedtools/cbedtools.pyx":870
 *         """
 *         if not self._open:
 *             self.intervalFile_ptr.Open()             # <<<<<<<<<<<<<<
 *             self._open = 1
 *         self.intervalFile_ptr.Rewind()
 */
    __pyx_v_self->intervalFile_ptr->Open();

    /* "pybedtools/cbedtools.pyx":871
 *         if not self._open:
 *             self.intervalFile_ptr.Open()
 *             self._open = 1             # <<<<<<<<<<<<<<
 *         self.intervalFile_ptr.Rewind()
 * 
 */
    __pyx_v_self->_open = 1;

    /* "pybedtools/cbedtools.pyx":869
 *         Jump to the beginning of the file.
 *         """
 *         if not self._open:             # <<<<<<<<<<<<<<
 *             self.intervalFile_ptr.Open()
 *             self._open = 1
 */
  }

  /* "pybedtools/cbedtools.pyx":872
 *             self.intervalFile_ptr.Open()
 *             self._open = 1
 *         self.intervalFile_ptr.Rewind()             # <<<<<<<<<<<<<<
 * 
 *     def seek(self, offset):
 */
  __pyx_v_self->intervalFile_ptr->Rewind();

  /* "pybedtools/cbedtools.pyx":865
 *         self._loaded = 1
 * 
 *     def rewind(self):             # <<<<<<<<<<<<<<
 *         """
 *         Jump to the beginning of the file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":874
 *         self.intervalFile_ptr.Rewind()
 * 
 *     def seek(self, offset):             # <<<<<<<<<<<<<<
 *         """
 *         Jump to a specific byte offset in the file
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_13seek(PyObject *__pyx_v_self, PyObject *__pyx_v_offset); /*proto*/
static char __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_12seek[] = "\n        Jump to a specific byte offset in the file\n        ";
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_13seek(PyObject *__pyx_v_self, PyObject *__pyx_v_offset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_12seek(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self), ((PyObject *)__pyx_v_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_12seek(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, PyObject *__pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  unsigned long __pyx_t_2;
  __Pyx_RefNannySetupContext("seek", 0);

  /* "pybedtools/cbedtools.pyx":878
 *         Jump to a specific byte offset in the file
 *         """
 *         if not self._open:             # <<<<<<<<<<<<<<
 *             self.intervalFile_ptr.Open()
 *             self._open = 1
 */
  __pyx_t_1 = ((!(__pyx_v_self->_open != 0)) != 0);
  if (__pyx_t_1) {

    /* "pybedtools/cbedtools.pyx":879
 *         """
 *         if not self._open:
 *             self.intervalFile_ptr.Open()             # <<<<<<<<<<<<<<
 *             self._open = 1
 *         self.intervalFile_ptr.Seek(offset)
 */
    __pyx_v_self->intervalFile_ptr->Open();

    /* "pybedtools/cbedtools.pyx":880
 *         if not self._open:
 *             self.intervalFile_ptr.Open()
 *             self._open = 1             # <<<<<<<<<<<<<<
 *         self.intervalFile_ptr.Seek(offset)
 * 
 */
    __pyx_v_self->_open = 1;

    /* "pybedtools/cbedtools.pyx":878
 *         Jump to a specific byte offset in the file
 *         """
 *         if not self._open:             # <<<<<<<<<<<<<<
 *             self.intervalFile_ptr.Open()
 *             self._open = 1
 */
  }

  /* "pybedtools/cbedtools.pyx":881
 *             self.intervalFile_ptr.Open()
 *             self._open = 1
 *         self.intervalFile_ptr.Seek(offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_offset); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L1_error)
  __pyx_v_self->intervalFile_ptr->Seek(__pyx_t_2);

  /* "pybedtools/cbedtools.pyx":874
 *         self.intervalFile_ptr.Rewind()
 * 
 *     def seek(self, offset):             # <<<<<<<<<<<<<<
 *         """
 *         Jump to a specific byte offset in the file
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":884
 * 
 * 
 *     def all_hits(self, Interval interval, bool same_strand=False, float overlap=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         :Signature: `IntervalFile.all_hits(interval, same_strand=False, overlap=0.0)`
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_15all_hits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_14all_hits[] = "\n        :Signature: `IntervalFile.all_hits(interval, same_strand=False, overlap=0.0)`\n\n        Search for the Interval `interval` this file and return **all**\n        overlaps as a list.\n\n        `same_strand`, if True, will only consider hits on the same strand as `interval`.\n\n        `overlap` can be used to specify the fraction of overlap between\n        `interval` and each feature in the IntervalFile.\n\n        Example usage:\n\n        >>> fn = pybedtools.example_filename('a.bed')\n\n        >>> # create an Interval to query with\n        >>> i = pybedtools.Interval('chr1', 1, 10000, strand='+')\n\n        >>> # Create an IntervalFile out of a.bed\n        >>> intervalfile = pybedtools.IntervalFile(fn)\n\n        >>> # get stranded hits\n        >>> intervalfile.all_hits(i, same_strand=True)\n        [Interval(chr1:1-100), Interval(chr1:100-200), Interval(chr1:900-950)]\n\n        ";
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_15all_hits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval = 0;
  PyBoolObject *__pyx_v_same_strand = 0;
  float __pyx_v_overlap;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("all_hits (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_interval,&__pyx_n_s_same_strand,&__pyx_n_s_overlap,0};
    PyObject* values[3] = {0,0,0};
    values[1] = (PyObject *)((PyBoolObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interval)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_same_strand);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_overlap);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "all_hits") < 0)) __PYX_ERR(0, 884, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_interval = ((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)values[0]);
    __pyx_v_same_strand = ((PyBoolObject *)values[1]);
    if (values[2]) {
      __pyx_v_overlap = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_overlap == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 884, __pyx_L3_error)
    } else {
      __pyx_v_overlap = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("all_hits", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 884, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.all_hits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_interval), __pyx_ptype_10pybedtools_9cbedtools_Interval, 1, "interval", 0))) __PYX_ERR(0, 884, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_same_strand), __pyx_ptype_7cpython_4bool_bool, 1, "same_strand", 0))) __PYX_ERR(0, 884, __pyx_L1_error)
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_14all_hits(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self), __pyx_v_interval, __pyx_v_same_strand, __pyx_v_overlap);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_14all_hits(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval, PyBoolObject *__pyx_v_same_strand, float __pyx_v_overlap) {
  std::vector<BED>  __pyx_v_vec_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  char const *__pyx_t_14;
  __Pyx_RefNannySetupContext("all_hits", 0);

  /* "pybedtools/cbedtools.pyx":912
 *         """
 *         cdef vector[BED] vec_b
 *         self.loadIntoMap()             # <<<<<<<<<<<<<<
 * 
 *         if same_strand == False:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_loadIntoMap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":914
 *         self.loadIntoMap()
 * 
 *         if same_strand == False:             # <<<<<<<<<<<<<<
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), overlap)
 *             try:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_same_strand), Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pybedtools/cbedtools.pyx":915
 * 
 *         if same_strand == False:
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), overlap)             # <<<<<<<<<<<<<<
 *             try:
 *                 return bed_vec2list(vec_b)
 */
    __pyx_v_vec_b = __pyx_v_self->intervalFile_ptr->FindOverlapsPerBin((*__pyx_v_interval->_bed), __pyx_v_overlap);

    /* "pybedtools/cbedtools.pyx":916
 *         if same_strand == False:
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), overlap)
 *             try:             # <<<<<<<<<<<<<<
 *                 return bed_vec2list(vec_b)
 *             finally:
 */
    /*try:*/ {

      /* "pybedtools/cbedtools.pyx":917
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), overlap)
 *             try:
 *                 return bed_vec2list(vec_b)             # <<<<<<<<<<<<<<
 *             finally:
 *                 pass
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools_bed_vec2list(__pyx_v_vec_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L4_return;
    }

    /* "pybedtools/cbedtools.pyx":919
 *                 return bed_vec2list(vec_b)
 *             finally:
 *                 pass             # <<<<<<<<<<<<<<
 *         else:
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), same_strand, overlap)
 */
    /*finally:*/ {
      /*exception exit:*/{
        __Pyx_PyThreadState_declare
        __pyx_L5_error:;
        __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
        {
        }
        __Pyx_PyThreadState_assign
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        }
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
        __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
        goto __pyx_L1_error;
      }
      __pyx_L4_return: {
        __pyx_t_13 = __pyx_r;
        __pyx_r = 0;
        __pyx_r = __pyx_t_13;
        __pyx_t_13 = 0;
        goto __pyx_L0;
      }
    }

    /* "pybedtools/cbedtools.pyx":914
 *         self.loadIntoMap()
 * 
 *         if same_strand == False:             # <<<<<<<<<<<<<<
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), overlap)
 *             try:
 */
  }

  /* "pybedtools/cbedtools.pyx":921
 *                 pass
 *         else:
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), same_strand, overlap)             # <<<<<<<<<<<<<<
 *             try:
 *                 return bed_vec2list(vec_b)
 */
  /*else*/ {
    __pyx_v_vec_b = __pyx_v_self->intervalFile_ptr->FindOverlapsPerBin((*__pyx_v_interval->_bed), __pyx_v_same_strand, __pyx_v_overlap);

    /* "pybedtools/cbedtools.pyx":922
 *         else:
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), same_strand, overlap)
 *             try:             # <<<<<<<<<<<<<<
 *                 return bed_vec2list(vec_b)
 *             finally:
 */
    /*try:*/ {

      /* "pybedtools/cbedtools.pyx":923
 *             vec_b = self.intervalFile_ptr.FindOverlapsPerBin(deref(interval._bed), same_strand, overlap)
 *             try:
 *                 return bed_vec2list(vec_b)             # <<<<<<<<<<<<<<
 *             finally:
 *                 pass
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __pyx_f_10pybedtools_9cbedtools_bed_vec2list(__pyx_v_vec_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L9_return;
    }

    /* "pybedtools/cbedtools.pyx":925
 *                 return bed_vec2list(vec_b)
 *             finally:
 *                 pass             # <<<<<<<<<<<<<<
 * 
 *     # search() is an alias for all_hits
 */
    /*finally:*/ {
      /*exception exit:*/{
        __Pyx_PyThreadState_declare
        __pyx_L10_error:;
        __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        __pyx_t_6 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
        {
        }
        __Pyx_PyThreadState_assign
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ErrRestore(__pyx_t_13, __pyx_t_12, __pyx_t_11);
        __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0;
        __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_14;
        goto __pyx_L1_error;
      }
      __pyx_L9_return: {
        __pyx_t_8 = __pyx_r;
        __pyx_r = 0;
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L0;
      }
    }
  }

  /* "pybedtools/cbedtools.pyx":884
 * 
 * 
 *     def all_hits(self, Interval interval, bool same_strand=False, float overlap=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         :Signature: `IntervalFile.all_hits(interval, same_strand=False, overlap=0.0)`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.all_hits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":930
 *     search = all_hits
 * 
 *     def any_hits(self, Interval interval, bool same_strand=False, float overlap=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         :Signature: `IntervalFile.any_hits(interval, same_strand=False, overlap=0.0)`
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_17any_hits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_16any_hits[] = "\n        :Signature: `IntervalFile.any_hits(interval, same_strand=False, overlap=0.0)`\n\n        Return 1 if the Interval `interval` had >=1 hit in this IntervalFile, 0 otherwise.\n\n        `same_strand`, if True, will only consider hits on the same strand as `interval`.\n\n        `overlap` can be used to specify the fraction of overlap between\n        `interval` and each feature in the IntervalFile.\n\n        Example usage:\n\n        >>> fn = pybedtools.example_filename('a.bed')\n\n        >>> # create an Interval to query with\n        >>> i = pybedtools.Interval('chr1', 1, 10000, strand='+')\n\n        >>> # Create an IntervalFile out of a.bed\n        >>> intervalfile = pybedtools.IntervalFile(fn)\n\n        >>> # any stranded hits?\n        >>> intervalfile.any_hits(i, same_strand=True)\n        1\n\n        ";
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_17any_hits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval = 0;
  PyBoolObject *__pyx_v_same_strand = 0;
  float __pyx_v_overlap;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("any_hits (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_interval,&__pyx_n_s_same_strand,&__pyx_n_s_overlap,0};
    PyObject* values[3] = {0,0,0};
    values[1] = (PyObject *)((PyBoolObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interval)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_same_strand);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_overlap);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "any_hits") < 0)) __PYX_ERR(0, 930, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_interval = ((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)values[0]);
    __pyx_v_same_strand = ((PyBoolObject *)values[1]);
    if (values[2]) {
      __pyx_v_overlap = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_overlap == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 930, __pyx_L3_error)
    } else {
      __pyx_v_overlap = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("any_hits", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 930, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.any_hits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_interval), __pyx_ptype_10pybedtools_9cbedtools_Interval, 1, "interval", 0))) __PYX_ERR(0, 930, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_same_strand), __pyx_ptype_7cpython_4bool_bool, 1, "same_strand", 0))) __PYX_ERR(0, 930, __pyx_L1_error)
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_16any_hits(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self), __pyx_v_interval, __pyx_v_same_strand, __pyx_v_overlap);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_16any_hits(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval, PyBoolObject *__pyx_v_same_strand, float __pyx_v_overlap) {
  long __pyx_v_found;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("any_hits", 0);

  /* "pybedtools/cbedtools.pyx":956
 * 
 *         """
 *         found = 0             # <<<<<<<<<<<<<<
 *         self.loadIntoMap()
 * 
 */
  __pyx_v_found = 0;

  /* "pybedtools/cbedtools.pyx":957
 *         """
 *         found = 0
 *         self.loadIntoMap()             # <<<<<<<<<<<<<<
 * 
 *         if same_strand == False:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_loadIntoMap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":959
 *         self.loadIntoMap()
 * 
 *         if same_strand == False:             # <<<<<<<<<<<<<<
 *             found = self.intervalFile_ptr.FindAnyOverlapsPerBin(deref(interval._bed), overlap)
 *         else:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_same_strand), Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pybedtools/cbedtools.pyx":960
 * 
 *         if same_strand == False:
 *             found = self.intervalFile_ptr.FindAnyOverlapsPerBin(deref(interval._bed), overlap)             # <<<<<<<<<<<<<<
 *         else:
 *             found = self.intervalFile_ptr.FindAnyOverlapsPerBin(deref(interval._bed), same_strand, overlap)
 */
    __pyx_v_found = __pyx_v_self->intervalFile_ptr->FindAnyOverlapsPerBin((*__pyx_v_interval->_bed), __pyx_v_overlap);

    /* "pybedtools/cbedtools.pyx":959
 *         self.loadIntoMap()
 * 
 *         if same_strand == False:             # <<<<<<<<<<<<<<
 *             found = self.intervalFile_ptr.FindAnyOverlapsPerBin(deref(interval._bed), overlap)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pybedtools/cbedtools.pyx":962
 *             found = self.intervalFile_ptr.FindAnyOverlapsPerBin(deref(interval._bed), overlap)
 *         else:
 *             found = self.intervalFile_ptr.FindAnyOverlapsPerBin(deref(interval._bed), same_strand, overlap)             # <<<<<<<<<<<<<<
 * 
 *         return found
 */
  /*else*/ {
    __pyx_v_found = __pyx_v_self->intervalFile_ptr->FindAnyOverlapsPerBin((*__pyx_v_interval->_bed), __pyx_v_same_strand, __pyx_v_overlap);
  }
  __pyx_L3:;

  /* "pybedtools/cbedtools.pyx":964
 *             found = self.intervalFile_ptr.FindAnyOverlapsPerBin(deref(interval._bed), same_strand, overlap)
 * 
 *         return found             # <<<<<<<<<<<<<<
 * 
 *     def count_hits(self, Interval interval, bool same_strand=False, float overlap=0.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_found); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pybedtools/cbedtools.pyx":930
 *     search = all_hits
 * 
 *     def any_hits(self, Interval interval, bool same_strand=False, float overlap=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         :Signature: `IntervalFile.any_hits(interval, same_strand=False, overlap=0.0)`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.any_hits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pybedtools/cbedtools.pyx":966
 *         return found
 * 
 *     def count_hits(self, Interval interval, bool same_strand=False, float overlap=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         :Signature: `IntervalFile.count_hits(interval, same_strand=False, overlap=0.0)`
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_19count_hits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_18count_hits[] = "\n        :Signature: `IntervalFile.count_hits(interval, same_strand=False, overlap=0.0)`\n\n        Return the number of overlaps of the Interval `interval` had with this\n        IntervalFile.\n\n        `same_strand`, if True, will only consider hits on the same strand as\n        `interval`.\n\n        `overlap` can be used to specify the fraction of overlap between\n        `interval` and each feature in the IntervalFile.\n\n        Example usage:\n\n        >>> fn = pybedtools.example_filename('a.bed')\n\n        >>> # create an Interval to query with\n        >>> i = pybedtools.Interval('chr1', 1, 10000, strand='+')\n\n        >>> # Create an IntervalFile out of a.bed\n        >>> intervalfile = pybedtools.IntervalFile(fn)\n\n        >>> # get number of stranded hits\n        >>> intervalfile.count_hits(i, same_strand=True)\n        3\n\n        ";
static PyObject *__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_19count_hits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval = 0;
  PyBoolObject *__pyx_v_same_strand = 0;
  float __pyx_v_overlap;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_hits (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_interval,&__pyx_n_s_same_strand,&__pyx_n_s_overlap,0};
    PyObject* values[3] = {0,0,0};
    values[1] = (PyObject *)((PyBoolObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interval)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_same_strand);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_overlap);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "count_hits") < 0)) __PYX_ERR(0, 966, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_interval = ((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)values[0]);
    __pyx_v_same_strand = ((PyBoolObject *)values[1]);
    if (values[2]) {
      __pyx_v_overlap = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_overlap == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 966, __pyx_L3_error)
    } else {
      __pyx_v_overlap = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_hits", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 966, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.count_hits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_interval), __pyx_ptype_10pybedtools_9cbedtools_Interval, 1, "interval", 0))) __PYX_ERR(0, 966, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_same_strand), __pyx_ptype_7cpython_4bool_bool, 1, "same_strand", 0))) __PYX_ERR(0, 966, __pyx_L1_error)
  __pyx_r = __pyx_pf_10pybedtools_9cbedtools_12IntervalFile_18count_hits(((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)__pyx_v_self), __pyx_v_interval, __pyx_v_same_strand, __pyx_v_overlap);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pybedtools_9cbedtools_12IntervalFile_18count_hits(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *__pyx_v_self, struct __pyx_obj_10pybedtools_9cbedtools_Interval *__pyx_v_interval, PyBoolObject *__pyx_v_same_strand, float __pyx_v_overlap) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("count_hits", 0);

  /* "pybedtools/cbedtools.pyx":994
 * 
 *         """
 *         self.loadIntoMap()             # <<<<<<<<<<<<<<
 * 
 *         if same_strand == False:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_loadIntoMap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pybedtools/cbedtools.pyx":996
 *         self.loadIntoMap()
 * 
 *         if same_strand == False:             # <<<<<<<<<<<<<<
 *             return self.intervalFile_ptr.CountOverlapsPerBin(deref(interval._bed), overlap)
 *         else:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_same_strand), Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pybedtools/cbedtools.pyx":997
 * 
 *         if same_strand == False:
 *             return self.intervalFile_ptr.CountOverlapsPerBin(deref(interval._bed), overlap)             # <<<<<<<<<<<<<<
 *         else:
 *             return self.intervalFile_ptr.CountOverlapsPerBin(deref(interval._bed), same_strand, overlap)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->intervalFile_ptr->CountOverlapsPerBin((*__pyx_v_interval->_bed), __pyx_v_overlap)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pybedtools/cbedtools.pyx":996
 *         self.loadIntoMap()
 * 
 *         if same_strand == False:             # <<<<<<<<<<<<<<
 *             return self.intervalFile_ptr.CountOverlapsPerBin(deref(interval._bed), overlap)
 *         else:
 */
  }

  /* "pybedtools/cbedtools.pyx":999
 *             return self.intervalFile_ptr.CountOverlapsPerBin(deref(interval._bed), overlap)
 *         else:
 *             return self.intervalFile_ptr.CountOverlapsPerBin(deref(interval._bed), same_strand, overlap)             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->intervalFile_ptr->CountOverlapsPerBin((*__pyx_v_interval->_bed), __pyx_v_same_strand, __pyx_v_overlap)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pybedtools/cbedtools.pyx":966
 *         return found
 * 
 *     def count_hits(self, Interval interval, bool same_strand=False, float overlap=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         :Signature: `IntervalFile.count_hits(interval, same_strand=False, overlap=0.0)`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pybedtools.cbedtools.IntervalFile.count_hits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 52, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 52, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":53
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 53, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":54
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_10pybedtools_9cbedtools_Interval __pyx_vtable_10pybedtools_9cbedtools_Interval;

static PyObject *__pyx_tp_new_10pybedtools_9cbedtools_Interval(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10pybedtools_9cbedtools_Interval *)o);
  p->__pyx_vtab = __pyx_vtabptr_10pybedtools_9cbedtools_Interval;
  p->_attrs = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10pybedtools_9cbedtools_Interval(PyObject *o) {
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *p = (struct __pyx_obj_10pybedtools_9cbedtools_Interval *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10pybedtools_9cbedtools_8Interval_15__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_attrs);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10pybedtools_9cbedtools_Interval(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *p = (struct __pyx_obj_10pybedtools_9cbedtools_Interval *)o;
  if (p->_attrs) {
    e = (*v)(p->_attrs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10pybedtools_9cbedtools_Interval(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10pybedtools_9cbedtools_Interval *p = (struct __pyx_obj_10pybedtools_9cbedtools_Interval *)o;
  tmp = ((PyObject*)p->_attrs);
  p->_attrs = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_10pybedtools_9cbedtools_Interval(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_10pybedtools_9cbedtools_Interval(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_21__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_chrom(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_5chrom_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_chrom(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_5chrom_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_5start_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_5start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_3end_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_end(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_3end_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_stop(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_4stop_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_stop(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_4stop_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_strand(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_6strand_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_strand(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_6strand_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_6length_1__get__(o);
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_6fields_1__get__(o);
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_attrs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_5attrs_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_attrs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_5attrs_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_5count_1__get__(o);
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_4name_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_4name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_5score_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_score(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_5score_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_file_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_9file_type_1__get__(o);
}

static int __pyx_setprop_10pybedtools_9cbedtools_8Interval_file_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10pybedtools_9cbedtools_8Interval_9file_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_o_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_7o_start_1__get__(o);
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_o_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_5o_end_1__get__(o);
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_8Interval_o_amt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_8Interval_5o_amt_1__get__(o);
}

static PyMethodDef __pyx_methods_10pybedtools_9cbedtools_Interval[] = {
  {"__copy__", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_8Interval_3__copy__, METH_NOARGS, 0},
  {"deparse_attrs", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_8Interval_9deparse_attrs, METH_NOARGS, 0},
  {"append", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_8Interval_23append, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10pybedtools_9cbedtools_Interval[] = {
  {(char *)"chrom", __pyx_getprop_10pybedtools_9cbedtools_8Interval_chrom, __pyx_setprop_10pybedtools_9cbedtools_8Interval_chrom, (char *)" the chromosome of the feature", 0},
  {(char *)"start", __pyx_getprop_10pybedtools_9cbedtools_8Interval_start, __pyx_setprop_10pybedtools_9cbedtools_8Interval_start, (char *)"The 0-based start of the feature.", 0},
  {(char *)"end", __pyx_getprop_10pybedtools_9cbedtools_8Interval_end, __pyx_setprop_10pybedtools_9cbedtools_8Interval_end, (char *)"The end of the feature", 0},
  {(char *)"stop", __pyx_getprop_10pybedtools_9cbedtools_8Interval_stop, __pyx_setprop_10pybedtools_9cbedtools_8Interval_stop, (char *)" the end of the feature", 0},
  {(char *)"strand", __pyx_getprop_10pybedtools_9cbedtools_8Interval_strand, __pyx_setprop_10pybedtools_9cbedtools_8Interval_strand, (char *)" the strand of the feature", 0},
  {(char *)"length", __pyx_getprop_10pybedtools_9cbedtools_8Interval_length, 0, (char *)" the length of the feature", 0},
  {(char *)"fields", __pyx_getprop_10pybedtools_9cbedtools_8Interval_fields, 0, (char *)0, 0},
  {(char *)"attrs", __pyx_getprop_10pybedtools_9cbedtools_8Interval_attrs, __pyx_setprop_10pybedtools_9cbedtools_8Interval_attrs, (char *)0, 0},
  {(char *)"count", __pyx_getprop_10pybedtools_9cbedtools_8Interval_count, 0, (char *)0, 0},
  {(char *)"name", __pyx_getprop_10pybedtools_9cbedtools_8Interval_name, __pyx_setprop_10pybedtools_9cbedtools_8Interval_name, (char *)"\n        >>> import pybedtools\n        >>> vcf = pybedtools.example_bedtool('v.vcf')\n        >>> [v.name for v in vcf]\n        ['rs6054257', 'chr1:16', 'rs6040355', 'chr1:222', 'microsat1']\n\n        ", 0},
  {(char *)"score", __pyx_getprop_10pybedtools_9cbedtools_8Interval_score, __pyx_setprop_10pybedtools_9cbedtools_8Interval_score, (char *)0, 0},
  {(char *)"file_type", __pyx_getprop_10pybedtools_9cbedtools_8Interval_file_type, __pyx_setprop_10pybedtools_9cbedtools_8Interval_file_type, (char *)"bed/vcf/gff", 0},
  {(char *)"o_start", __pyx_getprop_10pybedtools_9cbedtools_8Interval_o_start, 0, (char *)0, 0},
  {(char *)"o_end", __pyx_getprop_10pybedtools_9cbedtools_8Interval_o_end, 0, (char *)0, 0},
  {(char *)"o_amt", __pyx_getprop_10pybedtools_9cbedtools_8Interval_o_amt, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Interval = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_10pybedtools_9cbedtools_8Interval_27__nonzero__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Interval = {
  __pyx_pw_10pybedtools_9cbedtools_8Interval_17__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_10pybedtools_9cbedtools_Interval, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Interval = {
  __pyx_pw_10pybedtools_9cbedtools_8Interval_17__len__, /*mp_length*/
  __pyx_pw_10pybedtools_9cbedtools_8Interval_19__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_10pybedtools_9cbedtools_Interval, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10pybedtools_9cbedtools_Interval = {
  PyVarObject_HEAD_INIT(0, 0)
  "pybedtools.cbedtools.Interval", /*tp_name*/
  sizeof(struct __pyx_obj_10pybedtools_9cbedtools_Interval), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10pybedtools_9cbedtools_Interval, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_10pybedtools_9cbedtools_8Interval_13__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Interval, /*tp_as_number*/
  &__pyx_tp_as_sequence_Interval, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Interval, /*tp_as_mapping*/
  __pyx_pw_10pybedtools_9cbedtools_8Interval_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10pybedtools_9cbedtools_8Interval_11__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Class to represent a genomic interval.\n\n    Constructor::\n\n        Interval(chrom, start, end, name=\".\", score=\".\", strand=\".\", otherfields=None)\n\n    Class to represent a genomic interval of any format.  Requires at least 3\n    args: chrom (string), start (int), end (int).\n\n    `start` is *always* the 0-based start coordinate.  If this Interval is to\n    represent a GFF object (which uses a 1-based coordinate system), then\n    subtract 1 from the 4th item in the line to get the start position in\n    0-based coords for this Interval.  The 1-based GFF coord will still be\n    available, albeit as a string, in fields[3].\n\n    `otherfields` is a list of fields that don't fit into the other kwargs, and\n    will be stored in the `fields` attribute of the Interval.\n\n    All the items in `otherfields` must be strings for proper conversion to\n    C++.\n\n    By convention, for BED files, `otherfields` is everything past the first 6\n    items in the line.  This allows an Interval to represent composite features\n    (e.g., a GFF line concatenated to the end of a BED line)\n\n    But for other formats (VCF, GFF, SAM), the entire line should be passed in\n    as a list for `otherfields` so that we can always check the\n    Interval.file_type and extract the fields we want, knowing that they'll be\n    in the right order as passed in with `otherfields`.\n\n    Example usage:\n\n        >>> from pybedtools import Interval\n        >>> i = Interval(\"chr1\", 22, 44, strand='-')\n        >>> i\n        Interval(chr1:22-44)\n\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_10pybedtools_9cbedtools_Interval, /*tp_traverse*/
  __pyx_tp_clear_10pybedtools_9cbedtools_Interval, /*tp_clear*/
  __pyx_pw_10pybedtools_9cbedtools_8Interval_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10pybedtools_9cbedtools_Interval, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10pybedtools_9cbedtools_Interval, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10pybedtools_9cbedtools_8Interval_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10pybedtools_9cbedtools_Interval, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10pybedtools_9cbedtools_IntervalIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *)o);
  p->stream = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10pybedtools_9cbedtools_IntervalIterator(PyObject *o) {
  struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *p = (struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->stream);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10pybedtools_9cbedtools_IntervalIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *p = (struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *)o;
  if (p->stream) {
    e = (*v)(p->stream, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10pybedtools_9cbedtools_IntervalIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *p = (struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator *)o;
  tmp = ((PyObject*)p->stream);
  p->stream = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10pybedtools_9cbedtools_IntervalIterator[] = {
  {"__next__", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10pybedtools_9cbedtools_IntervalIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "pybedtools.cbedtools.IntervalIterator", /*tp_name*/
  sizeof(struct __pyx_obj_10pybedtools_9cbedtools_IntervalIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10pybedtools_9cbedtools_IntervalIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10pybedtools_9cbedtools_IntervalIterator, /*tp_traverse*/
  __pyx_tp_clear_10pybedtools_9cbedtools_IntervalIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_3__iter__, /*tp_iter*/
  __pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_5__next__, /*tp_iternext*/
  __pyx_methods_10pybedtools_9cbedtools_IntervalIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10pybedtools_9cbedtools_16IntervalIterator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10pybedtools_9cbedtools_IntervalIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10pybedtools_9cbedtools_IntervalFile(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)o);
  new((void*)&(p->_fn)) std::string();
  return o;
}

static void __pyx_tp_dealloc_10pybedtools_9cbedtools_IntervalFile(PyObject *o) {
  struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *p = (struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->_fn);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_12IntervalFile_fn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_2fn_1__get__(o);
}

static PyObject *__pyx_getprop_10pybedtools_9cbedtools_12IntervalFile_file_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_9file_type_1__get__(o);
}

static PyMethodDef __pyx_methods_10pybedtools_9cbedtools_IntervalFile[] = {
  {"__next__", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_7__next__, METH_NOARGS|METH_COEXIST, 0},
  {"loadIntoMap", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_9loadIntoMap, METH_NOARGS, __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_8loadIntoMap},
  {"rewind", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_11rewind, METH_NOARGS, __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_10rewind},
  {"seek", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_13seek, METH_O, __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_12seek},
  {"all_hits", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_15all_hits, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_14all_hits},
  {"any_hits", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_17any_hits, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_16any_hits},
  {"count_hits", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_12IntervalFile_19count_hits, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10pybedtools_9cbedtools_12IntervalFile_18count_hits},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10pybedtools_9cbedtools_IntervalFile[] = {
  {(char *)"fn", __pyx_getprop_10pybedtools_9cbedtools_12IntervalFile_fn, 0, (char *)0, 0},
  {(char *)"file_type", __pyx_getprop_10pybedtools_9cbedtools_12IntervalFile_file_type, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10pybedtools_9cbedtools_IntervalFile = {
  PyVarObject_HEAD_INIT(0, 0)
  "pybedtools.cbedtools.IntervalFile", /*tp_name*/
  sizeof(struct __pyx_obj_10pybedtools_9cbedtools_IntervalFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10pybedtools_9cbedtools_IntervalFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_5__iter__, /*tp_iter*/
  __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_7__next__, /*tp_iternext*/
  __pyx_methods_10pybedtools_9cbedtools_IntervalFile, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10pybedtools_9cbedtools_IntervalFile, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10pybedtools_9cbedtools_12IntervalFile_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10pybedtools_9cbedtools_IntervalFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"create_interval_from_list", (PyCFunction)__pyx_pw_10pybedtools_9cbedtools_1create_interval_from_list, METH_O, __pyx_doc_10pybedtools_9cbedtools_create_interval_from_list},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "cbedtools",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_Attributes, __pyx_k_Attributes, sizeof(__pyx_k_Attributes), 0, 0, 1, 1},
  {&__pyx_n_s_Attributes___init, __pyx_k_Attributes___init, sizeof(__pyx_k_Attributes___init), 0, 0, 1, 1},
  {&__pyx_n_s_Attributes___str, __pyx_k_Attributes___str, sizeof(__pyx_k_Attributes___str), 0, 0, 1, 1},
  {&__pyx_n_s_BedToolsFileError, __pyx_k_BedToolsFileError, sizeof(__pyx_k_BedToolsFileError), 0, 0, 1, 1},
  {&__pyx_kp_s_Class_to_map_between_a_dict_of, __pyx_k_Class_to_map_between_a_dict_of, sizeof(__pyx_k_Class_to_map_between_a_dict_of), 0, 0, 1, 0},
  {&__pyx_kp_u_Create_an_Interval_object_from, __pyx_k_Create_an_Interval_object_from, sizeof(__pyx_k_Create_an_Interval_object_from), 0, 1, 0, 0},
  {&__pyx_kp_s_Currently_unsupported_comparison, __pyx_k_Currently_unsupported_comparison, sizeof(__pyx_k_Currently_unsupported_comparison), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_opening_file, __pyx_k_Error_opening_file, sizeof(__pyx_k_Error_opening_file), 0, 0, 1, 0},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_kp_s_Features_are_nested_comparison_u, __pyx_k_Features_are_nested_comparison_u, sizeof(__pyx_k_Features_are_nested_comparison_u), 0, 0, 1, 0},
  {&__pyx_n_s_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_u_IntervalFile_all_hits_line_884, __pyx_k_IntervalFile_all_hits_line_884, sizeof(__pyx_k_IntervalFile_all_hits_line_884), 0, 1, 0, 0},
  {&__pyx_kp_u_IntervalFile_any_hits_line_930, __pyx_k_IntervalFile_any_hits_line_930, sizeof(__pyx_k_IntervalFile_any_hits_line_930), 0, 1, 0, 0},
  {&__pyx_kp_u_IntervalFile_count_hits_line_966, __pyx_k_IntervalFile_count_hits_line_966, sizeof(__pyx_k_IntervalFile_count_hits_line_966), 0, 1, 0, 0},
  {&__pyx_kp_s_IntervalFile_objects_do_not_yet, __pyx_k_IntervalFile_objects_do_not_yet, sizeof(__pyx_k_IntervalFile_objects_do_not_yet), 0, 0, 1, 0},
  {&__pyx_kp_s_Interval_attrs_was_not_None_but, __pyx_k_Interval_attrs_was_not_None_but, sizeof(__pyx_k_Interval_attrs_was_not_None_but), 0, 0, 1, 0},
  {&__pyx_kp_s_Interval_s_i_i, __pyx_k_Interval_s_i_i, sizeof(__pyx_k_Interval_s_i_i), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_MalformedBedLineError, __pyx_k_MalformedBedLineError, sizeof(__pyx_k_MalformedBedLineError), 0, 0, 1, 1},
  {&__pyx_n_s_Name, __pyx_k_Name, sizeof(__pyx_k_Name), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_PROFILES_TRUE, __pyx_k_PROFILES_TRUE, sizeof(__pyx_k_PROFILES_TRUE), 0, 0, 1, 1},
  {&__pyx_n_s_Parent, __pyx_k_Parent, sizeof(__pyx_k_Parent), 0, 0, 1, 1},
  {&__pyx_kp_u_Signature_IntervalFile_all_hits, __pyx_k_Signature_IntervalFile_all_hits, sizeof(__pyx_k_Signature_IntervalFile_all_hits), 0, 1, 0, 0},
  {&__pyx_kp_u_Signature_IntervalFile_any_hits, __pyx_k_Signature_IntervalFile_any_hits, sizeof(__pyx_k_Signature_IntervalFile_any_hits), 0, 1, 0, 0},
  {&__pyx_kp_u_Signature_IntervalFile_count_hi, __pyx_k_Signature_IntervalFile_count_hi, sizeof(__pyx_k_Signature_IntervalFile_count_hi), 0, 1, 0, 0},
  {&__pyx_kp_s_Start_is_greater_than_stop, __pyx_k_Start_is_greater_than_stop, sizeof(__pyx_k_Start_is_greater_than_stop), 0, 0, 1, 0},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 0, 1, 0},
  {&__pyx_kp_s_Unable_to_detect_format_from_s, __pyx_k_Unable_to_detect_format_from_s, sizeof(__pyx_k_Unable_to_detect_format_from_s), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 0},
  {&__pyx_kp_s__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 0, 1, 0},
  {&__pyx_kp_s__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 0, 1, 0},
  {&__pyx_kp_s__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 1, 0},
  {&__pyx_kp_s__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 0},
  {&__pyx_kp_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {&__pyx_kp_s__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 0},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
  {&__pyx_kp_s__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 1, 0},
  {&__pyx_n_s_advance_iterator, __pyx_k_advance_iterator, sizeof(__pyx_k_advance_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_all_hits, __pyx_k_all_hits, sizeof(__pyx_k_all_hits), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_attr_str, __pyx_k_attr_str, sizeof(__pyx_k_attr_str), 0, 0, 1, 1},
  {&__pyx_n_s_attr_str_2, __pyx_k_attr_str_2, sizeof(__pyx_k_attr_str_2), 0, 0, 1, 1},
  {&__pyx_n_s_attrs, __pyx_k_attrs, sizeof(__pyx_k_attrs), 0, 0, 1, 1},
  {&__pyx_n_b_bed, __pyx_k_bed, sizeof(__pyx_k_bed), 0, 0, 0, 1},
  {&__pyx_n_s_bed, __pyx_k_bed, sizeof(__pyx_k_bed), 0, 0, 1, 1},
  {&__pyx_n_s_browser, __pyx_k_browser, sizeof(__pyx_k_browser), 0, 0, 1, 1},
  {&__pyx_n_s_chrom, __pyx_k_chrom, sizeof(__pyx_k_chrom), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cmp, __pyx_k_cmp, sizeof(__pyx_k_cmp), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_kp_u_create_interval_from_list_line_5, __pyx_k_create_interval_from_list_line_5, sizeof(__pyx_k_create_interval_from_list_line_5), 0, 1, 0, 0},
  {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
  {&__pyx_n_s_deparse_attrs, __pyx_k_deparse_attrs, sizeof(__pyx_k_deparse_attrs), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_e1, __pyx_k_e1, sizeof(__pyx_k_e1), 0, 0, 1, 1},
  {&__pyx_n_s_e2, __pyx_k_e2, sizeof(__pyx_k_e2), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_kp_s_field_index_out_of_range, __pyx_k_field_index_out_of_range, sizeof(__pyx_k_field_index_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_s_field_sep, __pyx_k_field_sep, sizeof(__pyx_k_field_sep), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_file_type, __pyx_k_file_type, sizeof(__pyx_k_file_type), 0, 0, 1, 1},
  {&__pyx_n_s_fn, __pyx_k_fn, sizeof(__pyx_k_fn), 0, 0, 1, 1},
  {&__pyx_n_s_gene_id, __pyx_k_gene_id, sizeof(__pyx_k_gene_id), 0, 0, 1, 1},
  {&__pyx_n_s_gene_name, __pyx_k_gene_name, sizeof(__pyx_k_gene_name), 0, 0, 1, 1},
  {&__pyx_n_b_gff, __pyx_k_gff, sizeof(__pyx_k_gff), 0, 0, 0, 1},
  {&__pyx_n_s_gff, __pyx_k_gff, sizeof(__pyx_k_gff), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_integer_types, __pyx_k_integer_types, sizeof(__pyx_k_integer_types), 0, 0, 1, 1},
  {&__pyx_n_s_interval, __pyx_k_interval, sizeof(__pyx_k_interval), 0, 0, 1, 1},
  {&__pyx_n_s_intervalFile, __pyx_k_intervalFile, sizeof(__pyx_k_intervalFile), 0, 0, 1, 1},
  {&__pyx_n_s_isdigit, __pyx_k_isdigit, sizeof(__pyx_k_isdigit), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_kdict, __pyx_k_kdict, sizeof(__pyx_k_kdict), 0, 0, 1, 1},
  {&__pyx_n_s_ktype, __pyx_k_ktype, sizeof(__pyx_k_ktype), 0, 0, 1, 1},
  {&__pyx_n_s_kv, __pyx_k_kv, sizeof(__pyx_k_kv), 0, 0, 1, 1},
  {&__pyx_n_s_kvs, __pyx_k_kvs, sizeof(__pyx_k_kvs), 0, 0, 1, 1},
  {&__pyx_n_s_loadIntoMap, __pyx_k_loadIntoMap, sizeof(__pyx_k_loadIntoMap), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_s_malformed_line_s, __pyx_k_malformed_line_s, sizeof(__pyx_k_malformed_line_s), 0, 0, 1, 0},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n_eq, __pyx_k_n_eq, sizeof(__pyx_k_n_eq), 0, 0, 1, 1},
  {&__pyx_n_s_n_quotes, __pyx_k_n_quotes, sizeof(__pyx_k_n_quotes), 0, 0, 1, 1},
  {&__pyx_n_s_n_semi, __pyx_k_n_semi, sizeof(__pyx_k_n_semi), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_otherfields, __pyx_k_otherfields, sizeof(__pyx_k_otherfields), 0, 0, 1, 1},
  {&__pyx_n_s_overlap, __pyx_k_overlap, sizeof(__pyx_k_overlap), 0, 0, 1, 1},
  {&__pyx_n_s_pairs, __pyx_k_pairs, sizeof(__pyx_k_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pybedtools_cbedtools, __pyx_k_pybedtools_cbedtools, sizeof(__pyx_k_pybedtools_cbedtools), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_quoted, __pyx_k_quoted, sizeof(__pyx_k_quoted), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_readline, __pyx_k_readline, sizeof(__pyx_k_readline), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_richcmp___locals_cmp, __pyx_k_richcmp___locals_cmp, sizeof(__pyx_k_richcmp___locals_cmp), 0, 0, 1, 1},
  {&__pyx_n_s_rstrip, __pyx_k_rstrip, sizeof(__pyx_k_rstrip), 0, 0, 1, 1},
  {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
  {&__pyx_n_s_s2, __pyx_k_s2, sizeof(__pyx_k_s2), 0, 0, 1, 1},
  {&__pyx_kp_s_s_i, __pyx_k_s_i, sizeof(__pyx_k_s_i), 0, 0, 1, 0},
  {&__pyx_n_s_sam, __pyx_k_sam, sizeof(__pyx_k_sam), 0, 0, 1, 1},
  {&__pyx_n_s_same_strand, __pyx_k_same_strand, sizeof(__pyx_k_same_strand), 0, 0, 1, 1},
  {&__pyx_n_s_score, __pyx_k_score, sizeof(__pyx_k_score), 0, 0, 1, 1},
  {&__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 0, 1, 1},
  {&__pyx_n_s_six, __pyx_k_six, sizeof(__pyx_k_six), 0, 0, 1, 1},
  {&__pyx_n_s_sort_keys, __pyx_k_sort_keys, sizeof(__pyx_k_sort_keys), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_strand, __pyx_k_strand, sizeof(__pyx_k_strand), 0, 0, 1, 1},
  {&__pyx_n_s_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 0, 0, 1, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_subprocess, __pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_tmp_pybedtools_pybedtools_cbedt, __pyx_k_tmp_pybedtools_pybedtools_cbedt, sizeof(__pyx_k_tmp_pybedtools_pybedtools_cbedt), 0, 0, 1, 0},
  {&__pyx_n_s_track, __pyx_k_track, sizeof(__pyx_k_track), 0, 0, 1, 1},
  {&__pyx_n_s_transcript_id, __pyx_k_transcript_id, sizeof(__pyx_k_transcript_id), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_b_vcf, __pyx_k_vcf, sizeof(__pyx_k_vcf), 0, 0, 0, 1},
  {&__pyx_n_s_vcf, __pyx_k_vcf, sizeof(__pyx_k_vcf), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 179, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 301, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 760, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 763, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 846, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pybedtools/cbedtools.pyx":29
 *         s = str(s)
 *     if isinstance(s, unicode):
 *         s = s.encode('UTF-8')             # <<<<<<<<<<<<<<
 *     return <string> s
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pybedtools/cbedtools.pyx":156
 *         # in general, GFF files will have either as many '=' as ';'
 *         # (or ';'-1 if there's no trailing ';')
 *         n_semi = attr_str.count(';')             # <<<<<<<<<<<<<<
 *         n_eq = attr_str.count('=')
 *         n_quotes = attr_str.count('"')
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s__3); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pybedtools/cbedtools.pyx":157
 *         # (or ';'-1 if there's no trailing ';')
 *         n_semi = attr_str.count(';')
 *         n_eq = attr_str.count('=')             # <<<<<<<<<<<<<<
 *         n_quotes = attr_str.count('"')
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s__5); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pybedtools/cbedtools.pyx":158
 *         n_semi = attr_str.count(';')
 *         n_eq = attr_str.count('=')
 *         n_quotes = attr_str.count('"')             # <<<<<<<<<<<<<<
 * 
 *         if n_eq > n_semi - 1:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s__7); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pybedtools/cbedtools.pyx":181
 *         kvs = map(str.strip, attr_str.strip().split(self.sep))
 *         for field, value in [kv.split(self.field_sep, 1) for kv in kvs if kv]:
 *             if value.count('"') == 2:             # <<<<<<<<<<<<<<
 *                 self._quoted[field] = True
 *             self[field] = value.replace('"', '')
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s__7); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pybedtools/cbedtools.pyx":183
 *             if value.count('"') == 2:
 *                 self._quoted[field] = True
 *             self[field] = value.replace('"', '')             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_kp_s__7, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pybedtools/cbedtools.pyx":284
 *             return False
 * 
 *         def cmp(x, y):             # <<<<<<<<<<<<<<
 *             if x < y:
 *                 return -1
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_tmp_pybedtools_pybedtools_cbedt, __pyx_n_s_cmp, 284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 284, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":301
 *         try:
 *             if PROFILES_TRUE[profile] == tuple():
 *                 raise NotImplementedError('Features are nested -- comparison undefined')             # <<<<<<<<<<<<<<
 * 
 *             if op != 3:
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Features_are_nested_comparison_u); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "pybedtools/cbedtools.pyx":312
 *                 return True
 *         except KeyError:
 *             raise ValueError('Currently unsupported comparison -- please '             # <<<<<<<<<<<<<<
 *                              'submit a bug report')
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Currently_unsupported_comparison); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "pybedtools/cbedtools.pyx":369
 * 
 *         if self.file_type != "gff":
 *             raise ValueError('Interval.attrs was not None, but this was a non-GFF Interval')             # <<<<<<<<<<<<<<
 * 
 *         s = self._attrs.__str__()
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Interval_attrs_was_not_None_but); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pybedtools/cbedtools.pyx":392
 *                     self._attrs = Attributes(_pystr(self._bed.fields[8]))
 *                 else:
 *                     self._attrs = Attributes("")             # <<<<<<<<<<<<<<
 *             return self._attrs
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "pybedtools/cbedtools.pyx":420
 *                     return attrs[self.name_key]
 *                 """
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \             # <<<<<<<<<<<<<<
 *                             "gene_id", "Parent"):
 *                     if key in self.attrs:
 */
  __pyx_tuple__20 = PyTuple_Pack(6, __pyx_n_s_ID, __pyx_n_s_Name, __pyx_n_s_gene_name, __pyx_n_s_transcript_id, __pyx_n_s_gene_id, __pyx_n_s_Parent); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "pybedtools/cbedtools.pyx":441
 * 
 *             if ftype == <string>"gff":
 *                 for key in ("ID", "Name", "gene_name", "transcript_id", \             # <<<<<<<<<<<<<<
 *                             "gene_id", "Parent"):
 *                     if not key in self.attrs:
 */
  __pyx_tuple__21 = PyTuple_Pack(6, __pyx_n_s_ID, __pyx_n_s_Name, __pyx_n_s_gene_name, __pyx_n_s_transcript_id, __pyx_n_s_gene_id, __pyx_n_s_Parent); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "pybedtools/cbedtools.pyx":521
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')             # <<<<<<<<<<<<<<
 *             elif key < 0:
 *                 key = nfields + key
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_field_index_out_of_range); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "pybedtools/cbedtools.pyx":543
 *             nfields = self._bed.fields.size()
 *             if key >= nfields:
 *                 raise IndexError('field index out of range')             # <<<<<<<<<<<<<<
 *             elif key < 0:
 *                 key = nfields + key
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_field_index_out_of_range); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pybedtools/cbedtools.pyx":655
 *         # if it's too short, just add some empty fields.
 *         if len(fields) < 7:
 *             fields.extend([".".encode('UTF-8')] * (6 - len(fields)))             # <<<<<<<<<<<<<<
 *             other_fields = []
 *         else:
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "pybedtools/cbedtools.pyx":697
 * 
 *     if pyb.start > pyb.end:
 *         raise MalformedBedLineError("Start is greater than stop")             # <<<<<<<<<<<<<<
 *     pyb._bed.fields = list_to_vector(orig_fields)
 *     return pyb
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Start_is_greater_than_stop); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "pybedtools/cbedtools.pyx":769
 * 
 *             if self._itemtype == 1:
 *                 if line.startswith(('@', '#', 'track', 'browser')):             # <<<<<<<<<<<<<<
 *                     continue
 *             break
 */
  __pyx_tuple__32 = PyTuple_Pack(4, __pyx_kp_s__30, __pyx_kp_s__31, __pyx_n_s_track, __pyx_n_s_browser); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_tuple__32); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "pybedtools/cbedtools.pyx":779
 *         # Iterable of strings, in which case we need to split
 *         elif self._itemtype == 1:
 *             fields = line.rstrip('\r\n').split('\t')             # <<<<<<<<<<<<<<
 * 
 *         # Otherwise assume list/tuple/iterable of fields
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s__34); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s__13); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "pybedtools/cbedtools.pyx":819
 *             result = self.intervalFile_ptr.Open()
 *             if result == -1:
 *                 raise BedToolsFileError("Error opening file")             # <<<<<<<<<<<<<<
 *             self._open = 1
 *         cdef BED b = self.intervalFile_ptr.GetNextBed()
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_Error_opening_file); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "pybedtools/cbedtools.pyx":846
 *             except MalformedBedLineError:
 *                 # If it's a SAM, raise a meaningful exception.  If not, fail.
 *                 with open(self.fn) as fn:             # <<<<<<<<<<<<<<
 *                     interval = create_interval_from_list(fn.readline().strip().split())
 *                 if interval.file_type == 'sam':
 */
  __pyx_tuple__38 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "pybedtools/cbedtools.pyx":849
 *                     interval = create_interval_from_list(fn.readline().strip().split())
 *                 if interval.file_type == 'sam':
 *                     raise ValueError('IntervalFile objects do not yet natively support SAM. '             # <<<<<<<<<<<<<<
 *                                      'Please convert to BED/GFF/VCF first if you want to '
 *                                      'use the low-level API of IntervalFile')
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_IntervalFile_objects_do_not_yet); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "pybedtools/cbedtools.pyx":70
 * # < 0 | <= 1 | == 2 | != 3 |  > 4 | >= 5
 * PROFILES_TRUE = {
 *                 (0, 0, -1, 1): (2, 1, 5),  # a == b, a >= b, a <= b             # <<<<<<<<<<<<<<
 *                 # a  ---------
 *                 # b  ---------
 */
  __pyx_tuple__40 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_0, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_tuple__41 = PyTuple_Pack(3, __pyx_int_2, __pyx_int_1, __pyx_int_5); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "pybedtools/cbedtools.pyx":74
 *                 # b  ---------
 * 
 *                 (-1, -1, -1, -1): (0, 1),  # a < b, a <= b             # <<<<<<<<<<<<<<
 *                 # a ----
 *                 # b       -----
 */
  __pyx_tuple__42 = PyTuple_Pack(4, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "pybedtools/cbedtools.pyx":78
 *                 # b       -----
 * 
 *                 (-1, -1, -1, 0): (1,),  # a <= b             # <<<<<<<<<<<<<<
 *                 # a ----
 *                 # b     -----  (book-ended)
 */
  __pyx_tuple__44 = PyTuple_Pack(4, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_0); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "pybedtools/cbedtools.pyx":82
 *                 # b     -----  (book-ended)
 * 
 *                 (1, 1, 0, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a     -----
 *                 # b ----      (book-ended)
 */
  __pyx_tuple__46 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_1, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_int_5); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "pybedtools/cbedtools.pyx":86
 *                 # b ----      (book-ended)
 * 
 *                 (1, 1, 1, 1): (4, 5), # a > b, a >= b             # <<<<<<<<<<<<<<
 *                 # a       ------
 *                 # b ----
 */
  __pyx_tuple__48 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_1, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_tuple__49 = PyTuple_Pack(2, __pyx_int_4, __pyx_int_5); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "pybedtools/cbedtools.pyx":90
 *                 # b ----
 * 
 *                 (0, 1, -1, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a  ------------
 *                 # b  ---------
 */
  __pyx_tuple__50 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_1, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_int_5); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "pybedtools/cbedtools.pyx":94
 *                 # b  ---------
 * 
 *                 (1, 0, -1, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a   -----------
 *                 # b -------------
 */
  __pyx_tuple__52 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_0, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_int_5); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "pybedtools/cbedtools.pyx":98
 *                 # b -------------
 * 
 *                 (-1, 0, -1, 1): (1,),  # a <= b             # <<<<<<<<<<<<<<
 *                 # a -------------
 *                 # b   -----------
 */
  __pyx_tuple__54 = PyTuple_Pack(4, __pyx_int_neg_1, __pyx_int_0, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "pybedtools/cbedtools.pyx":102
 *                 # b   -----------
 * 
 *                 (0, -1, -1, 1): (1,), # a <= b             # <<<<<<<<<<<<<<
 *                 # a  ---------
 *                 # b  ------------
 */
  __pyx_tuple__56 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "pybedtools/cbedtools.pyx":106
 *                 # b  ------------
 * 
 *                 (-1, -1, -1, 1): (1,), # a <= b             # <<<<<<<<<<<<<<
 *                 # a -----------
 *                 # b        -----------
 */
  __pyx_tuple__58 = PyTuple_Pack(4, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "pybedtools/cbedtools.pyx":110
 *                 # b        -----------
 * 
 *                 (1, 1, -1, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a        -----------
 *                 # b -----------
 */
  __pyx_tuple__60 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_1, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_int_5); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "pybedtools/cbedtools.pyx":114
 *                 # b -----------
 * 
 *                 (1, -1, -1, 1): tuple(), # undef             # <<<<<<<<<<<<<<
 *                 # a    ----
 *                 # b -----------
 */
  __pyx_tuple__62 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "pybedtools/cbedtools.pyx":118
 *                 # b -----------
 * 
 *                 (-1, 1, -1, 1): tuple(), # undef             # <<<<<<<<<<<<<<
 *                 # a -----------
 *                 # b    ----
 */
  __pyx_tuple__63 = PyTuple_Pack(4, __pyx_int_neg_1, __pyx_int_1, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "pybedtools/cbedtools.pyx":122
 *                 # b    ----
 * 
 *                 (-1, 0, -1, 0): (1,),  # a <= b             # <<<<<<<<<<<<<<
 *                 # a -----------
 *                 # b           -
 */
  __pyx_tuple__64 = PyTuple_Pack(4, __pyx_int_neg_1, __pyx_int_0, __pyx_int_neg_1, __pyx_int_0); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "pybedtools/cbedtools.pyx":126
 *                 # b           -
 * 
 *                 (1, 0, 0, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a           -
 *                 # b -----------
 */
  __pyx_tuple__66 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_0, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_int_5); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "pybedtools/cbedtools.pyx":130
 *                 # b -----------
 * 
 *                 (0, 0, 0, 0): (1, 2, 5),  # a == b, a <= b, a >= b             # <<<<<<<<<<<<<<
 *                 # a -
 *                 # b -  (starts and stops are identical for all features)
 */
  __pyx_tuple__68 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_tuple__69 = PyTuple_Pack(3, __pyx_int_1, __pyx_int_2, __pyx_int_5); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "pybedtools/cbedtools.pyx":149
 *     """
 * 
 *     def __init__(self, attr_str=""):             # <<<<<<<<<<<<<<
 *         attr_str = str(attr_str)
 *         self._attr_str = attr_str
 */
  __pyx_tuple__70 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_attr_str, __pyx_n_s_n_semi, __pyx_n_s_n_eq, __pyx_n_s_n_quotes, __pyx_n_s_kvs, __pyx_n_s_field, __pyx_n_s_value, __pyx_n_s_kv); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_tmp_pybedtools_pybedtools_cbedt, __pyx_n_s_init, 149, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 149, __pyx_L1_error)
  __pyx_tuple__72 = PyTuple_Pack(1, ((PyObject*)__pyx_kp_s__2)); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "pybedtools/cbedtools.pyx":185
 *             self[field] = value.replace('"', '')
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         # stringify all items first
 *         items = []
 */
  __pyx_tuple__73 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_items, __pyx_n_s_field, __pyx_n_s_val, __pyx_n_s_pairs, __pyx_n_s_k, __pyx_n_s_v); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_tmp_pybedtools_pybedtools_cbedt, __pyx_n_s_str, 185, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 185, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":723
 * 
 * 
 * def overlap(int s1, int s2, int e1, int e2):             # <<<<<<<<<<<<<<
 *     return min(e1, e2) - max(s1, s2)
 * 
 */
  __pyx_tuple__75 = PyTuple_Pack(4, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_e1, __pyx_n_s_e2); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_tmp_pybedtools_pybedtools_cbedt, __pyx_n_s_overlap, 723, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_iteritems.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcbedtools(void); /*proto*/
PyMODINIT_FUNC initcbedtools(void)
#else
PyMODINIT_FUNC PyInit_cbedtools(void); /*proto*/
PyMODINIT_FUNC PyInit_cbedtools(void)
#endif
{
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_cbedtools(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cbedtools", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pybedtools__cbedtools) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pybedtools.cbedtools")) {
      if (unlikely(PyDict_SetItemString(modules, "pybedtools.cbedtools", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  __pyx_v_10pybedtools_9cbedtools_LOOKUPS = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_10pybedtools_9cbedtools_Interval = &__pyx_vtable_10pybedtools_9cbedtools_Interval;
  __pyx_vtable_10pybedtools_9cbedtools_Interval.append = (PyObject *(*)(struct __pyx_obj_10pybedtools_9cbedtools_Interval *, PyObject *, int __pyx_skip_dispatch))__pyx_f_10pybedtools_9cbedtools_8Interval_append;
  __pyx_vtable_10pybedtools_9cbedtools_Interval.deparse_attrs = (PyObject *(*)(struct __pyx_obj_10pybedtools_9cbedtools_Interval *, int __pyx_skip_dispatch))__pyx_f_10pybedtools_9cbedtools_8Interval_deparse_attrs;
  if (PyType_Ready(&__pyx_type_10pybedtools_9cbedtools_Interval) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_type_10pybedtools_9cbedtools_Interval.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_10pybedtools_9cbedtools_Interval, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(0, 204, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_10pybedtools_9cbedtools_8Interval_10__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_10pybedtools_9cbedtools_8Interval_10__str__.doc = __pyx_doc_10pybedtools_9cbedtools_8Interval_10__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_10pybedtools_9cbedtools_8Interval_10__str__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_10pybedtools_9cbedtools_Interval.tp_dict, __pyx_vtabptr_10pybedtools_9cbedtools_Interval) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Interval", (PyObject *)&__pyx_type_10pybedtools_9cbedtools_Interval) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_ptype_10pybedtools_9cbedtools_Interval = &__pyx_type_10pybedtools_9cbedtools_Interval;
  if (PyType_Ready(&__pyx_type_10pybedtools_9cbedtools_IntervalIterator) < 0) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_type_10pybedtools_9cbedtools_IntervalIterator.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IntervalIterator", (PyObject *)&__pyx_type_10pybedtools_9cbedtools_IntervalIterator) < 0) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_ptype_10pybedtools_9cbedtools_IntervalIterator = &__pyx_type_10pybedtools_9cbedtools_IntervalIterator;
  if (PyType_Ready(&__pyx_type_10pybedtools_9cbedtools_IntervalFile) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_type_10pybedtools_9cbedtools_IntervalFile.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IntervalFile", (PyObject *)&__pyx_type_10pybedtools_9cbedtools_IntervalFile) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_ptype_10pybedtools_9cbedtools_IntervalFile = &__pyx_type_10pybedtools_9cbedtools_IntervalFile;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(4, 15, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pybedtools/cbedtools.pyx":38
 *     return s.decode('UTF-8', 'strict')
 * 
 * if PY_MAJOR_VERSION < 3:             # <<<<<<<<<<<<<<
 *     integer_types = (int, long)
 * else:
 */
  __pyx_t_1 = ((PY_MAJOR_VERSION < 3) != 0);
  if (__pyx_t_1) {

    /* "pybedtools/cbedtools.pyx":39
 * 
 * if PY_MAJOR_VERSION < 3:
 *     integer_types = (int, long)             # <<<<<<<<<<<<<<
 * else:
 *     integer_types = (int,)
 */
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyInt_Type)));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyInt_Type)));
    __Pyx_INCREF(((PyObject *)(&PyLong_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyLong_Type)));
    PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)(&PyLong_Type)));
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_integer_types, __pyx_t_2) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pybedtools/cbedtools.pyx":38
 *     return s.decode('UTF-8', 'strict')
 * 
 * if PY_MAJOR_VERSION < 3:             # <<<<<<<<<<<<<<
 *     integer_types = (int, long)
 * else:
 */
    goto __pyx_L2;
  }

  /* "pybedtools/cbedtools.pyx":41
 *     integer_types = (int, long)
 * else:
 *     integer_types = (int,)             # <<<<<<<<<<<<<<
 * 
 * """
 */
  /*else*/ {
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyInt_Type)));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyInt_Type)));
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_integer_types, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L2:;

  /* "pybedtools/cbedtools.pyx":52
 * """
 * from cython.operator cimport dereference as deref
 * import sys             # <<<<<<<<<<<<<<
 * import six
 * import subprocess
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":53
 * from cython.operator cimport dereference as deref
 * import sys
 * import six             # <<<<<<<<<<<<<<
 * import subprocess
 * from collections import defaultdict
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_six, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_six, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":54
 * import sys
 * import six
 * import subprocess             # <<<<<<<<<<<<<<
 * from collections import defaultdict
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_subprocess, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subprocess, __pyx_t_2) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":55
 * import six
 * import subprocess
 * from collections import defaultdict             # <<<<<<<<<<<<<<
 * 
 * cdef dict LOOKUPS = {
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_defaultdict);
  __Pyx_GIVEREF(__pyx_n_s_defaultdict);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_defaultdict);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_defaultdict, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":58
 * 
 * cdef dict LOOKUPS = {
 *     "gff":  {"chrom": 0, "start": 3, "end": 4, "stop": 4, "strand": 6},             # <<<<<<<<<<<<<<
 *     "vcf":  {"chrom": 0, "start": 1},
 *     "bed":  {"chrom": 0, "start": 1, "end": 2, "stop": 2, "score": 4, "strand": 5}
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_chrom, __pyx_int_0) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_start, __pyx_int_3) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_end, __pyx_int_4) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_stop, __pyx_int_4) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_strand, __pyx_int_6) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_gff, __pyx_t_2) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":59
 * cdef dict LOOKUPS = {
 *     "gff":  {"chrom": 0, "start": 3, "end": 4, "stop": 4, "strand": 6},
 *     "vcf":  {"chrom": 0, "start": 1},             # <<<<<<<<<<<<<<
 *     "bed":  {"chrom": 0, "start": 1, "end": 2, "stop": 2, "score": 4, "strand": 5}
 * }
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_chrom, __pyx_int_0) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_start, __pyx_int_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_vcf, __pyx_t_2) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":60
 *     "gff":  {"chrom": 0, "start": 3, "end": 4, "stop": 4, "strand": 6},
 *     "vcf":  {"chrom": 0, "start": 1},
 *     "bed":  {"chrom": 0, "start": 1, "end": 2, "stop": 2, "score": 4, "strand": 5}             # <<<<<<<<<<<<<<
 * }
 * for ktype, kdict in list(LOOKUPS.items()):
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_chrom, __pyx_int_0) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_start, __pyx_int_1) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_end, __pyx_int_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_stop, __pyx_int_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score, __pyx_int_4) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_strand, __pyx_int_5) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_bed, __pyx_t_2) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_10pybedtools_9cbedtools_LOOKUPS);
  __Pyx_DECREF_SET(__pyx_v_10pybedtools_9cbedtools_LOOKUPS, ((PyObject*)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":62
 *     "bed":  {"chrom": 0, "start": 1, "end": 2, "stop": 2, "score": 4, "strand": 5}
 * }
 * for ktype, kdict in list(LOOKUPS.items()):             # <<<<<<<<<<<<<<
 *     for k, v in list(kdict.items()):
 *         kdict[v] = k
 */
  if (unlikely(__pyx_v_10pybedtools_9cbedtools_LOOKUPS == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "items");
    __PYX_ERR(0, 62, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_Items(__pyx_v_10pybedtools_9cbedtools_LOOKUPS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 62, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 62, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 62, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_ktype, __pyx_t_5) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_kdict, __pyx_t_6) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pybedtools/cbedtools.pyx":63
 * }
 * for ktype, kdict in list(LOOKUPS.items()):
 *     for k, v in list(kdict.items()):             # <<<<<<<<<<<<<<
 *         kdict[v] = k
 * 
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_kdict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_items); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 63, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 63, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 63, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 63, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_10); if (unlikely(!__pyx_t_6)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_10); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_10), 2) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 63, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_k, __pyx_t_6) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_v, __pyx_t_7) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pybedtools/cbedtools.pyx":64
 * for ktype, kdict in list(LOOKUPS.items()):
 *     for k, v in list(kdict.items()):
 *         kdict[v] = k             # <<<<<<<<<<<<<<
 * 
 * # Keys are tuples of start/start, stop/stop, start/stop, stop/start.
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_kdict); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_v); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(PyObject_SetItem(__pyx_t_7, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pybedtools/cbedtools.pyx":63
 * }
 * for ktype, kdict in list(LOOKUPS.items()):
 *     for k, v in list(kdict.items()):             # <<<<<<<<<<<<<<
 *         kdict[v] = k
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pybedtools/cbedtools.pyx":62
 *     "bed":  {"chrom": 0, "start": 1, "end": 2, "stop": 2, "score": 4, "strand": 5}
 * }
 * for ktype, kdict in list(LOOKUPS.items()):             # <<<<<<<<<<<<<<
 *     for k, v in list(kdict.items()):
 *         kdict[v] = k
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":70
 * # < 0 | <= 1 | == 2 | != 3 |  > 4 | >= 5
 * PROFILES_TRUE = {
 *                 (0, 0, -1, 1): (2, 1, 5),  # a == b, a >= b, a <= b             # <<<<<<<<<<<<<<
 *                 # a  ---------
 *                 # b  ---------
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__40, __pyx_tuple__41) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":74
 *                 # b  ---------
 * 
 *                 (-1, -1, -1, -1): (0, 1),  # a < b, a <= b             # <<<<<<<<<<<<<<
 *                 # a ----
 *                 # b       -----
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__42, __pyx_tuple__43) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":78
 *                 # b       -----
 * 
 *                 (-1, -1, -1, 0): (1,),  # a <= b             # <<<<<<<<<<<<<<
 *                 # a ----
 *                 # b     -----  (book-ended)
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__44, __pyx_tuple__45) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":82
 *                 # b     -----  (book-ended)
 * 
 *                 (1, 1, 0, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a     -----
 *                 # b ----      (book-ended)
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__46, __pyx_tuple__47) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":86
 *                 # b ----      (book-ended)
 * 
 *                 (1, 1, 1, 1): (4, 5), # a > b, a >= b             # <<<<<<<<<<<<<<
 *                 # a       ------
 *                 # b ----
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__48, __pyx_tuple__49) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":90
 *                 # b ----
 * 
 *                 (0, 1, -1, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a  ------------
 *                 # b  ---------
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__50, __pyx_tuple__51) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":94
 *                 # b  ---------
 * 
 *                 (1, 0, -1, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a   -----------
 *                 # b -------------
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__52, __pyx_tuple__53) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":98
 *                 # b -------------
 * 
 *                 (-1, 0, -1, 1): (1,),  # a <= b             # <<<<<<<<<<<<<<
 *                 # a -------------
 *                 # b   -----------
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__54, __pyx_tuple__55) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":102
 *                 # b   -----------
 * 
 *                 (0, -1, -1, 1): (1,), # a <= b             # <<<<<<<<<<<<<<
 *                 # a  ---------
 *                 # b  ------------
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__56, __pyx_tuple__57) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":106
 *                 # b  ------------
 * 
 *                 (-1, -1, -1, 1): (1,), # a <= b             # <<<<<<<<<<<<<<
 *                 # a -----------
 *                 # b        -----------
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__58, __pyx_tuple__59) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":110
 *                 # b        -----------
 * 
 *                 (1, 1, -1, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a        -----------
 *                 # b -----------
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__60, __pyx_tuple__61) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":114
 *                 # b -----------
 * 
 *                 (1, -1, -1, 1): tuple(), # undef             # <<<<<<<<<<<<<<
 *                 # a    ----
 *                 # b -----------
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyTuple_Type)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__62, __pyx_t_2) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":118
 *                 # b -----------
 * 
 *                 (-1, 1, -1, 1): tuple(), # undef             # <<<<<<<<<<<<<<
 *                 # a -----------
 *                 # b    ----
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyTuple_Type)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__63, __pyx_t_2) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pybedtools/cbedtools.pyx":122
 *                 # b    ----
 * 
 *                 (-1, 0, -1, 0): (1,),  # a <= b             # <<<<<<<<<<<<<<
 *                 # a -----------
 *                 # b           -
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__64, __pyx_tuple__65) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":126
 *                 # b           -
 * 
 *                 (1, 0, 0, 1): (5,),  # a >= b             # <<<<<<<<<<<<<<
 *                 # a           -
 *                 # b -----------
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__66, __pyx_tuple__67) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "pybedtools/cbedtools.pyx":130
 *                 # b -----------
 * 
 *                 (0, 0, 0, 0): (1, 2, 5),  # a == b, a <= b, a >= b             # <<<<<<<<<<<<<<
 *                 # a -
 *                 # b -  (starts and stops are identical for all features)
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_tuple__68, __pyx_tuple__69) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PROFILES_TRUE, __pyx_t_3) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":136
 * 
 * 
 * class MalformedBedLineError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_Exception);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_MalformedBedLineError, __pyx_n_s_MalformedBedLineError, (PyObject *) NULL, __pyx_n_s_pybedtools_cbedtools, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_MalformedBedLineError, __pyx_t_3, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MalformedBedLineError, __pyx_t_6) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":140
 * 
 * 
 * class BedToolsFileError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_Exception);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_BedToolsFileError, __pyx_n_s_BedToolsFileError, (PyObject *) NULL, __pyx_n_s_pybedtools_cbedtools, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_BedToolsFileError, __pyx_t_3, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BedToolsFileError, __pyx_t_6) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":144
 * 
 * 
 * class Attributes(dict):             # <<<<<<<<<<<<<<
 *     """
 *     Class to map between a dict of attrs and fields[8] of a GFF Interval obj.
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)(&PyDict_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyDict_Type)));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)(&PyDict_Type)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_Attributes, __pyx_n_s_Attributes, (PyObject *) NULL, __pyx_n_s_pybedtools_cbedtools, __pyx_kp_s_Class_to_map_between_a_dict_of); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "pybedtools/cbedtools.pyx":149
 *     """
 * 
 *     def __init__(self, attr_str=""):             # <<<<<<<<<<<<<<
 *         attr_str = str(attr_str)
 *         self._attr_str = attr_str
 */
  __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10pybedtools_9cbedtools_10Attributes_1__init__, 0, __pyx_n_s_Attributes___init, NULL, __pyx_n_s_pybedtools_cbedtools, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__72);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_init, __pyx_t_6) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pybedtools/cbedtools.pyx":185
 *             self[field] = value.replace('"', '')
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         # stringify all items first
 *         items = []
 */
  __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10pybedtools_9cbedtools_10Attributes_3__str__, 0, __pyx_n_s_Attributes___str, NULL, __pyx_n_s_pybedtools_cbedtools, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_str, __pyx_t_6) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pybedtools/cbedtools.pyx":144
 * 
 * 
 * class Attributes(dict):             # <<<<<<<<<<<<<<
 *     """
 *     Class to map between a dict of attrs and fields[8] of a GFF Interval obj.
 */
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Attributes, __pyx_t_3, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Attributes, __pyx_t_6) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":723
 * 
 * 
 * def overlap(int s1, int s2, int e1, int e2):             # <<<<<<<<<<<<<<
 *     return min(e1, e2) - max(s1, s2)
 * 
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_10pybedtools_9cbedtools_3overlap, NULL, __pyx_n_s_pybedtools_cbedtools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_overlap, __pyx_t_3) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pybedtools/cbedtools.pyx":928
 * 
 *     # search() is an alias for all_hits
 *     search = all_hits             # <<<<<<<<<<<<<<
 * 
 *     def any_hits(self, Interval interval, bool same_strand=False, float overlap=0.0):
 */
  __pyx_t_3 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_10pybedtools_9cbedtools_IntervalFile, __pyx_n_s_all_hits); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10pybedtools_9cbedtools_IntervalFile->tp_dict, __pyx_n_s_search, __pyx_t_3) < 0) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10pybedtools_9cbedtools_IntervalFile);

  /* "pybedtools/cbedtools.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * # String notes:
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_create_interval_from_list_line_5, __pyx_kp_u_Create_an_Interval_object_from) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_IntervalFile_all_hits_line_884, __pyx_kp_u_Signature_IntervalFile_all_hits) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_IntervalFile_any_hits_line_930, __pyx_kp_u_Signature_IntervalFile_any_hits) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_IntervalFile_count_hits_line_966, __pyx_kp_u_Signature_IntervalFile_count_hi) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pybedtools.cbedtools", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pybedtools.cbedtools");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyIntBinop */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* UnpackUnboundCMethod */
    static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(PyObject_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_O | METH_NOARGS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
    static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_iteritems */
    static CYTHON_INLINE PyObject* __Pyx_PyDict_IterItems(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_iteritems, d);
}

/* SaveResetException */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* StringJoin */
    #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
    static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_COMPILING_IN_CPYTHON
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    PyObject *self = f->m_self;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* GetModuleGlobalName */
        static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* RaiseException */
          #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetException */
            #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* GetItemInt */
              static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetAttr */
              static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* ExtTypeTest */
              static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* SliceTupleAndList */
              #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* PyIntBinop */
              #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AndObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            return PyInt_FromLong(a & b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_and(op1, op2);
            }
        }
                x = a & b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla & llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    return (inplace ? PyNumber_InPlaceAnd : PyNumber_And)(op1, op2);
}
#endif

/* PyIntBinop */
              #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* SetItemInt */
              static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* ArgTypeTest */
                static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* WriteUnraisableException */
                static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* IterNext */
                static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(!iternext)) {
#else
    if (unlikely(!iternext) || unlikely(!PyIter_Check(iterator))) {
#endif
        PyErr_Format(PyExc_TypeError,
            "%.200s object is not an iterator", Py_TYPE(iterator)->tp_name);
        return NULL;
    }
    next = iternext(iterator);
    if (likely(next))
        return next;
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_VERSION_HEX >= 0x02070000
    if (unlikely(iternext == &_PyObject_NextNotImplemented))
        return NULL;
#endif
#endif
    if (defval) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
            if (unlikely(exc_type != PyExc_StopIteration) &&
                    !PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))
                return NULL;
            PyErr_Clear();
        }
        Py_INCREF(defval);
        return defval;
    }
    if (!PyErr_Occurred())
        PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}

/* None */
                  static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SwapException */
                  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* SetVTable */
                  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
                  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
                  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* py_dict_items */
                  static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* CalculateMetaclass */
                  static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
                  static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetNameInClass */
                  static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CodeObjectCache */
                  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
                  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CHRPOS(CHRPOS value) {
    const CHRPOS neg_one = (CHRPOS) -1, const_zero = (CHRPOS) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CHRPOS) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CHRPOS) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(CHRPOS) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(CHRPOS) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CHRPOS) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CHRPOS),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE CHRPOS __Pyx_PyInt_As_CHRPOS(PyObject *x) {
    const CHRPOS neg_one = (CHRPOS) -1, const_zero = (CHRPOS) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(CHRPOS) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(CHRPOS, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (CHRPOS) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (CHRPOS) 0;
                case  1: __PYX_VERIFY_RETURN_INT(CHRPOS, digit, digits[0])
                case 2:
                    if (8 * sizeof(CHRPOS) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) >= 2 * PyLong_SHIFT) {
                            return (CHRPOS) (((((CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(CHRPOS) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) >= 3 * PyLong_SHIFT) {
                            return (CHRPOS) (((((((CHRPOS)digits[2]) << PyLong_SHIFT) | (CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(CHRPOS) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) >= 4 * PyLong_SHIFT) {
                            return (CHRPOS) (((((((((CHRPOS)digits[3]) << PyLong_SHIFT) | (CHRPOS)digits[2]) << PyLong_SHIFT) | (CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (CHRPOS) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(CHRPOS) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(CHRPOS, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(CHRPOS) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(CHRPOS, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (CHRPOS) 0;
                case -1: __PYX_VERIFY_RETURN_INT(CHRPOS, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(CHRPOS,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(CHRPOS) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) - 1 > 2 * PyLong_SHIFT) {
                            return (CHRPOS) (((CHRPOS)-1)*(((((CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(CHRPOS) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) - 1 > 2 * PyLong_SHIFT) {
                            return (CHRPOS) ((((((CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(CHRPOS) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) - 1 > 3 * PyLong_SHIFT) {
                            return (CHRPOS) (((CHRPOS)-1)*(((((((CHRPOS)digits[2]) << PyLong_SHIFT) | (CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(CHRPOS) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) - 1 > 3 * PyLong_SHIFT) {
                            return (CHRPOS) ((((((((CHRPOS)digits[2]) << PyLong_SHIFT) | (CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(CHRPOS) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) - 1 > 4 * PyLong_SHIFT) {
                            return (CHRPOS) (((CHRPOS)-1)*(((((((((CHRPOS)digits[3]) << PyLong_SHIFT) | (CHRPOS)digits[2]) << PyLong_SHIFT) | (CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(CHRPOS) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CHRPOS, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CHRPOS) - 1 > 4 * PyLong_SHIFT) {
                            return (CHRPOS) ((((((((((CHRPOS)digits[3]) << PyLong_SHIFT) | (CHRPOS)digits[2]) << PyLong_SHIFT) | (CHRPOS)digits[1]) << PyLong_SHIFT) | (CHRPOS)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(CHRPOS) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(CHRPOS, long, PyLong_AsLong(x))
            } else if (sizeof(CHRPOS) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(CHRPOS, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            CHRPOS val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (CHRPOS) -1;
        }
    } else {
        CHRPOS val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (CHRPOS) -1;
        val = __Pyx_PyInt_As_CHRPOS(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to CHRPOS");
    return (CHRPOS) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to CHRPOS");
    return (CHRPOS) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT) {
                            return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT) {
                            return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT) {
                            return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
                  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
